<?php

/**
 * Base class that represents a row from the 'UNIDADES_ORCAMENTARIAS' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Thu Jul 15 18:23:20 2010
 *
 * @package    lib.model.om
 */
abstract class BaseUnidadesOrcamentarias extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UnidadesOrcamentariasPeer
	 */
	protected static $peer;

	/**
	 * The value for the cd_municipio field.
	 * @var        string
	 */
	protected $cd_municipio;

	/**
	 * The value for the dt_versao_orc field.
	 * @var        int
	 */
	protected $dt_versao_orc;

	/**
	 * The value for the cd_orgao field.
	 * @var        string
	 */
	protected $cd_orgao;

	/**
	 * The value for the cd_unid_orc field.
	 * @var        string
	 */
	protected $cd_unid_orc;

	/**
	 * The value for the cd_tipo_unid_adm field.
	 * @var        string
	 */
	protected $cd_tipo_unid_adm;

	/**
	 * The value for the nm_unid_orc field.
	 * @var        string
	 */
	protected $nm_unid_orc;

	/**
	 * The value for the tp_administracao_uo field.
	 * @var        string
	 */
	protected $tp_administracao_uo;

	/**
	 * @var        Orgaos
	 */
	protected $aOrgaos;

	/**
	 * @var        array BalDespExtOrc[] Collection to store aggregation of BalDespExtOrc objects.
	 */
	protected $collBalDespExtOrcs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBalDespExtOrcs.
	 */
	private $lastBalDespExtOrcCriteria = null;

	/**
	 * @var        array BalDespExtraOrc[] Collection to store aggregation of BalDespExtraOrc objects.
	 */
	protected $collBalDespExtraOrcs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBalDespExtraOrcs.
	 */
	private $lastBalDespExtraOrcCriteria = null;

	/**
	 * @var        array BalRecExtOrc[] Collection to store aggregation of BalRecExtOrc objects.
	 */
	protected $collBalRecExtOrcs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBalRecExtOrcs.
	 */
	private $lastBalRecExtOrcCriteria = null;

	/**
	 * @var        array BalRecExtraOrc[] Collection to store aggregation of BalRecExtraOrc objects.
	 */
	protected $collBalRecExtraOrcs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBalRecExtraOrcs.
	 */
	private $lastBalRecExtraOrcCriteria = null;

	/**
	 * @var        array ContasBancarias[] Collection to store aggregation of ContasBancarias objects.
	 */
	protected $collContasBancariass;

	/**
	 * @var        Criteria The criteria used to select the current contents of collContasBancariass.
	 */
	private $lastContasBancariasCriteria = null;

	/**
	 * @var        array DespesasExtraOrc[] Collection to store aggregation of DespesasExtraOrc objects.
	 */
	protected $collDespesasExtraOrcs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDespesasExtraOrcs.
	 */
	private $lastDespesasExtraOrcCriteria = null;

	/**
	 * @var        array FolhasPagamentos[] Collection to store aggregation of FolhasPagamentos objects.
	 */
	protected $collFolhasPagamentoss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFolhasPagamentoss.
	 */
	private $lastFolhasPagamentosCriteria = null;

	/**
	 * @var        array GestoresUnidOrc[] Collection to store aggregation of GestoresUnidOrc objects.
	 */
	protected $collGestoresUnidOrcs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collGestoresUnidOrcs.
	 */
	private $lastGestoresUnidOrcCriteria = null;

	/**
	 * @var        array NotasEmpenhos[] Collection to store aggregation of NotasEmpenhos objects.
	 */
	protected $collNotasEmpenhoss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotasEmpenhoss.
	 */
	private $lastNotasEmpenhosCriteria = null;

	/**
	 * @var        array OrcDespCatEco[] Collection to store aggregation of OrcDespCatEco objects.
	 */
	protected $collOrcDespCatEcos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collOrcDespCatEcos.
	 */
	private $lastOrcDespCatEcoCriteria = null;

	/**
	 * @var        array OrcDespProjAtiv[] Collection to store aggregation of OrcDespProjAtiv objects.
	 */
	protected $collOrcDespProjAtivs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collOrcDespProjAtivs.
	 */
	private $lastOrcDespProjAtivCriteria = null;

	/**
	 * @var        array OrcRecCatEco[] Collection to store aggregation of OrcRecCatEco objects.
	 */
	protected $collOrcRecCatEcos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collOrcRecCatEcos.
	 */
	private $lastOrcRecCatEcoCriteria = null;

	/**
	 * @var        array Servidores[] Collection to store aggregation of Servidores objects.
	 */
	protected $collServidoress;

	/**
	 * @var        Criteria The criteria used to select the current contents of collServidoress.
	 */
	private $lastServidoresCriteria = null;

	/**
	 * @var        array ServidoresMunicipais[] Collection to store aggregation of ServidoresMunicipais objects.
	 */
	protected $collServidoresMunicipaiss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collServidoresMunicipaiss.
	 */
	private $lastServidoresMunicipaisCriteria = null;

	/**
	 * @var        array ServidoresMunicipaisTemp[] Collection to store aggregation of ServidoresMunicipaisTemp objects.
	 */
	protected $collServidoresMunicipaisTemps;

	/**
	 * @var        Criteria The criteria used to select the current contents of collServidoresMunicipaisTemps.
	 */
	private $lastServidoresMunicipaisTempCriteria = null;

	/**
	 * @var        array TaloesExtras[] Collection to store aggregation of TaloesExtras objects.
	 */
	protected $collTaloesExtrass;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTaloesExtrass.
	 */
	private $lastTaloesExtrasCriteria = null;

	/**
	 * @var        array UnidOrcUg[] Collection to store aggregation of UnidOrcUg objects.
	 */
	protected $collUnidOrcUgs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUnidOrcUgs.
	 */
	private $lastUnidOrcUgCriteria = null;

	/**
	 * @var        array VariacoesExtraOrc[] Collection to store aggregation of VariacoesExtraOrc objects.
	 */
	protected $collVariacoesExtraOrcs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVariacoesExtraOrcs.
	 */
	private $lastVariacoesExtraOrcCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'UnidadesOrcamentariasPeer';

	/**
	 * Get the [cd_municipio] column value.
	 * 
	 * @return     string
	 */
	public function getCdMunicipio()
	{
		return $this->cd_municipio;
	}

	/**
	 * Get the [dt_versao_orc] column value.
	 * 
	 * @return     int
	 */
	public function getDtVersaoOrc()
	{
		return $this->dt_versao_orc;
	}

	/**
	 * Get the [cd_orgao] column value.
	 * 
	 * @return     string
	 */
	public function getCdOrgao()
	{
		return $this->cd_orgao;
	}

	/**
	 * Get the [cd_unid_orc] column value.
	 * 
	 * @return     string
	 */
	public function getCdUnidOrc()
	{
		return $this->cd_unid_orc;
	}

	/**
	 * Get the [cd_tipo_unid_adm] column value.
	 * 
	 * @return     string
	 */
	public function getCdTipoUnidAdm()
	{
		return $this->cd_tipo_unid_adm;
	}

	/**
	 * Get the [nm_unid_orc] column value.
	 * 
	 * @return     string
	 */
	public function getNmUnidOrc()
	{
		return $this->nm_unid_orc;
	}

	/**
	 * Get the [tp_administracao_uo] column value.
	 * 
	 * @return     string
	 */
	public function getTpAdministracaoUo()
	{
		return $this->tp_administracao_uo;
	}

	/**
	 * Set the value of [cd_municipio] column.
	 * 
	 * @param      string $v new value
	 * @return     UnidadesOrcamentarias The current object (for fluent API support)
	 */
	public function setCdMunicipio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_municipio !== $v) {
			$this->cd_municipio = $v;
			$this->modifiedColumns[] = UnidadesOrcamentariasPeer::CD_MUNICIPIO;
		}

		if ($this->aOrgaos !== null && $this->aOrgaos->getCdMunicipio() !== $v) {
			$this->aOrgaos = null;
		}

		return $this;
	} // setCdMunicipio()

	/**
	 * Set the value of [dt_versao_orc] column.
	 * 
	 * @param      int $v new value
	 * @return     UnidadesOrcamentarias The current object (for fluent API support)
	 */
	public function setDtVersaoOrc($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->dt_versao_orc !== $v) {
			$this->dt_versao_orc = $v;
			$this->modifiedColumns[] = UnidadesOrcamentariasPeer::DT_VERSAO_ORC;
		}

		if ($this->aOrgaos !== null && $this->aOrgaos->getDtVersaoOrc() !== $v) {
			$this->aOrgaos = null;
		}

		return $this;
	} // setDtVersaoOrc()

	/**
	 * Set the value of [cd_orgao] column.
	 * 
	 * @param      string $v new value
	 * @return     UnidadesOrcamentarias The current object (for fluent API support)
	 */
	public function setCdOrgao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_orgao !== $v) {
			$this->cd_orgao = $v;
			$this->modifiedColumns[] = UnidadesOrcamentariasPeer::CD_ORGAO;
		}

		if ($this->aOrgaos !== null && $this->aOrgaos->getCdOrgao() !== $v) {
			$this->aOrgaos = null;
		}

		return $this;
	} // setCdOrgao()

	/**
	 * Set the value of [cd_unid_orc] column.
	 * 
	 * @param      string $v new value
	 * @return     UnidadesOrcamentarias The current object (for fluent API support)
	 */
	public function setCdUnidOrc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_unid_orc !== $v) {
			$this->cd_unid_orc = $v;
			$this->modifiedColumns[] = UnidadesOrcamentariasPeer::CD_UNID_ORC;
		}

		return $this;
	} // setCdUnidOrc()

	/**
	 * Set the value of [cd_tipo_unid_adm] column.
	 * 
	 * @param      string $v new value
	 * @return     UnidadesOrcamentarias The current object (for fluent API support)
	 */
	public function setCdTipoUnidAdm($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_tipo_unid_adm !== $v) {
			$this->cd_tipo_unid_adm = $v;
			$this->modifiedColumns[] = UnidadesOrcamentariasPeer::CD_TIPO_UNID_ADM;
		}

		return $this;
	} // setCdTipoUnidAdm()

	/**
	 * Set the value of [nm_unid_orc] column.
	 * 
	 * @param      string $v new value
	 * @return     UnidadesOrcamentarias The current object (for fluent API support)
	 */
	public function setNmUnidOrc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nm_unid_orc !== $v) {
			$this->nm_unid_orc = $v;
			$this->modifiedColumns[] = UnidadesOrcamentariasPeer::NM_UNID_ORC;
		}

		return $this;
	} // setNmUnidOrc()

	/**
	 * Set the value of [tp_administracao_uo] column.
	 * 
	 * @param      string $v new value
	 * @return     UnidadesOrcamentarias The current object (for fluent API support)
	 */
	public function setTpAdministracaoUo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tp_administracao_uo !== $v) {
			$this->tp_administracao_uo = $v;
			$this->modifiedColumns[] = UnidadesOrcamentariasPeer::TP_ADMINISTRACAO_UO;
		}

		return $this;
	} // setTpAdministracaoUo()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->cd_municipio = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->dt_versao_orc = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->cd_orgao = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->cd_unid_orc = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->cd_tipo_unid_adm = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->nm_unid_orc = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->tp_administracao_uo = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 7; // 7 = UnidadesOrcamentariasPeer::NUM_COLUMNS - UnidadesOrcamentariasPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating UnidadesOrcamentarias object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aOrgaos !== null && $this->cd_municipio !== $this->aOrgaos->getCdMunicipio()) {
			$this->aOrgaos = null;
		}
		if ($this->aOrgaos !== null && $this->dt_versao_orc !== $this->aOrgaos->getDtVersaoOrc()) {
			$this->aOrgaos = null;
		}
		if ($this->aOrgaos !== null && $this->cd_orgao !== $this->aOrgaos->getCdOrgao()) {
			$this->aOrgaos = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UnidadesOrcamentariasPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UnidadesOrcamentariasPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aOrgaos = null;
			$this->collBalDespExtOrcs = null;
			$this->lastBalDespExtOrcCriteria = null;

			$this->collBalDespExtraOrcs = null;
			$this->lastBalDespExtraOrcCriteria = null;

			$this->collBalRecExtOrcs = null;
			$this->lastBalRecExtOrcCriteria = null;

			$this->collBalRecExtraOrcs = null;
			$this->lastBalRecExtraOrcCriteria = null;

			$this->collContasBancariass = null;
			$this->lastContasBancariasCriteria = null;

			$this->collDespesasExtraOrcs = null;
			$this->lastDespesasExtraOrcCriteria = null;

			$this->collFolhasPagamentoss = null;
			$this->lastFolhasPagamentosCriteria = null;

			$this->collGestoresUnidOrcs = null;
			$this->lastGestoresUnidOrcCriteria = null;

			$this->collNotasEmpenhoss = null;
			$this->lastNotasEmpenhosCriteria = null;

			$this->collOrcDespCatEcos = null;
			$this->lastOrcDespCatEcoCriteria = null;

			$this->collOrcDespProjAtivs = null;
			$this->lastOrcDespProjAtivCriteria = null;

			$this->collOrcRecCatEcos = null;
			$this->lastOrcRecCatEcoCriteria = null;

			$this->collServidoress = null;
			$this->lastServidoresCriteria = null;

			$this->collServidoresMunicipaiss = null;
			$this->lastServidoresMunicipaisCriteria = null;

			$this->collServidoresMunicipaisTemps = null;
			$this->lastServidoresMunicipaisTempCriteria = null;

			$this->collTaloesExtrass = null;
			$this->lastTaloesExtrasCriteria = null;

			$this->collUnidOrcUgs = null;
			$this->lastUnidOrcUgCriteria = null;

			$this->collVariacoesExtraOrcs = null;
			$this->lastVariacoesExtraOrcCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UnidadesOrcamentariasPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUnidadesOrcamentarias:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				UnidadesOrcamentariasPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUnidadesOrcamentarias:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UnidadesOrcamentariasPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUnidadesOrcamentarias:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUnidadesOrcamentarias:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				UnidadesOrcamentariasPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aOrgaos !== null) {
				if ($this->aOrgaos->isModified() || $this->aOrgaos->isNew()) {
					$affectedRows += $this->aOrgaos->save($con);
				}
				$this->setOrgaos($this->aOrgaos);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UnidadesOrcamentariasPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += UnidadesOrcamentariasPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collBalDespExtOrcs !== null) {
				foreach ($this->collBalDespExtOrcs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collBalDespExtraOrcs !== null) {
				foreach ($this->collBalDespExtraOrcs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collBalRecExtOrcs !== null) {
				foreach ($this->collBalRecExtOrcs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collBalRecExtraOrcs !== null) {
				foreach ($this->collBalRecExtraOrcs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collContasBancariass !== null) {
				foreach ($this->collContasBancariass as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDespesasExtraOrcs !== null) {
				foreach ($this->collDespesasExtraOrcs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFolhasPagamentoss !== null) {
				foreach ($this->collFolhasPagamentoss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collGestoresUnidOrcs !== null) {
				foreach ($this->collGestoresUnidOrcs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNotasEmpenhoss !== null) {
				foreach ($this->collNotasEmpenhoss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collOrcDespCatEcos !== null) {
				foreach ($this->collOrcDespCatEcos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collOrcDespProjAtivs !== null) {
				foreach ($this->collOrcDespProjAtivs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collOrcRecCatEcos !== null) {
				foreach ($this->collOrcRecCatEcos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collServidoress !== null) {
				foreach ($this->collServidoress as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collServidoresMunicipaiss !== null) {
				foreach ($this->collServidoresMunicipaiss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collServidoresMunicipaisTemps !== null) {
				foreach ($this->collServidoresMunicipaisTemps as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTaloesExtrass !== null) {
				foreach ($this->collTaloesExtrass as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUnidOrcUgs !== null) {
				foreach ($this->collUnidOrcUgs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVariacoesExtraOrcs !== null) {
				foreach ($this->collVariacoesExtraOrcs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aOrgaos !== null) {
				if (!$this->aOrgaos->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aOrgaos->getValidationFailures());
				}
			}


			if (($retval = UnidadesOrcamentariasPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collBalDespExtOrcs !== null) {
					foreach ($this->collBalDespExtOrcs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collBalDespExtraOrcs !== null) {
					foreach ($this->collBalDespExtraOrcs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collBalRecExtOrcs !== null) {
					foreach ($this->collBalRecExtOrcs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collBalRecExtraOrcs !== null) {
					foreach ($this->collBalRecExtraOrcs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collContasBancariass !== null) {
					foreach ($this->collContasBancariass as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDespesasExtraOrcs !== null) {
					foreach ($this->collDespesasExtraOrcs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFolhasPagamentoss !== null) {
					foreach ($this->collFolhasPagamentoss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collGestoresUnidOrcs !== null) {
					foreach ($this->collGestoresUnidOrcs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNotasEmpenhoss !== null) {
					foreach ($this->collNotasEmpenhoss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collOrcDespCatEcos !== null) {
					foreach ($this->collOrcDespCatEcos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collOrcDespProjAtivs !== null) {
					foreach ($this->collOrcDespProjAtivs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collOrcRecCatEcos !== null) {
					foreach ($this->collOrcRecCatEcos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collServidoress !== null) {
					foreach ($this->collServidoress as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collServidoresMunicipaiss !== null) {
					foreach ($this->collServidoresMunicipaiss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collServidoresMunicipaisTemps !== null) {
					foreach ($this->collServidoresMunicipaisTemps as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTaloesExtrass !== null) {
					foreach ($this->collTaloesExtrass as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUnidOrcUgs !== null) {
					foreach ($this->collUnidOrcUgs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVariacoesExtraOrcs !== null) {
					foreach ($this->collVariacoesExtraOrcs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UnidadesOrcamentariasPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCdMunicipio();
				break;
			case 1:
				return $this->getDtVersaoOrc();
				break;
			case 2:
				return $this->getCdOrgao();
				break;
			case 3:
				return $this->getCdUnidOrc();
				break;
			case 4:
				return $this->getCdTipoUnidAdm();
				break;
			case 5:
				return $this->getNmUnidOrc();
				break;
			case 6:
				return $this->getTpAdministracaoUo();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UnidadesOrcamentariasPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCdMunicipio(),
			$keys[1] => $this->getDtVersaoOrc(),
			$keys[2] => $this->getCdOrgao(),
			$keys[3] => $this->getCdUnidOrc(),
			$keys[4] => $this->getCdTipoUnidAdm(),
			$keys[5] => $this->getNmUnidOrc(),
			$keys[6] => $this->getTpAdministracaoUo(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UnidadesOrcamentariasPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCdMunicipio($value);
				break;
			case 1:
				$this->setDtVersaoOrc($value);
				break;
			case 2:
				$this->setCdOrgao($value);
				break;
			case 3:
				$this->setCdUnidOrc($value);
				break;
			case 4:
				$this->setCdTipoUnidAdm($value);
				break;
			case 5:
				$this->setNmUnidOrc($value);
				break;
			case 6:
				$this->setTpAdministracaoUo($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UnidadesOrcamentariasPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCdMunicipio($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDtVersaoOrc($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCdOrgao($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCdUnidOrc($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCdTipoUnidAdm($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setNmUnidOrc($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setTpAdministracaoUo($arr[$keys[6]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);

		if ($this->isColumnModified(UnidadesOrcamentariasPeer::CD_MUNICIPIO)) $criteria->add(UnidadesOrcamentariasPeer::CD_MUNICIPIO, $this->cd_municipio);
		if ($this->isColumnModified(UnidadesOrcamentariasPeer::DT_VERSAO_ORC)) $criteria->add(UnidadesOrcamentariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
		if ($this->isColumnModified(UnidadesOrcamentariasPeer::CD_ORGAO)) $criteria->add(UnidadesOrcamentariasPeer::CD_ORGAO, $this->cd_orgao);
		if ($this->isColumnModified(UnidadesOrcamentariasPeer::CD_UNID_ORC)) $criteria->add(UnidadesOrcamentariasPeer::CD_UNID_ORC, $this->cd_unid_orc);
		if ($this->isColumnModified(UnidadesOrcamentariasPeer::CD_TIPO_UNID_ADM)) $criteria->add(UnidadesOrcamentariasPeer::CD_TIPO_UNID_ADM, $this->cd_tipo_unid_adm);
		if ($this->isColumnModified(UnidadesOrcamentariasPeer::NM_UNID_ORC)) $criteria->add(UnidadesOrcamentariasPeer::NM_UNID_ORC, $this->nm_unid_orc);
		if ($this->isColumnModified(UnidadesOrcamentariasPeer::TP_ADMINISTRACAO_UO)) $criteria->add(UnidadesOrcamentariasPeer::TP_ADMINISTRACAO_UO, $this->tp_administracao_uo);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);

		$criteria->add(UnidadesOrcamentariasPeer::CD_MUNICIPIO, $this->cd_municipio);
		$criteria->add(UnidadesOrcamentariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
		$criteria->add(UnidadesOrcamentariasPeer::CD_ORGAO, $this->cd_orgao);
		$criteria->add(UnidadesOrcamentariasPeer::CD_UNID_ORC, $this->cd_unid_orc);

		return $criteria;
	}

	/**
	 * Returns the composite primary key for this object.
	 * The array elements will be in same order as specified in XML.
	 * @return     array
	 */
	public function getPrimaryKey()
	{
		$pks = array();

		$pks[0] = $this->getCdMunicipio();

		$pks[1] = $this->getDtVersaoOrc();

		$pks[2] = $this->getCdOrgao();

		$pks[3] = $this->getCdUnidOrc();

		return $pks;
	}

	/**
	 * Set the [composite] primary key.
	 *
	 * @param      array $keys The elements of the composite key (order must match the order in XML file).
	 * @return     void
	 */
	public function setPrimaryKey($keys)
	{

		$this->setCdMunicipio($keys[0]);

		$this->setDtVersaoOrc($keys[1]);

		$this->setCdOrgao($keys[2]);

		$this->setCdUnidOrc($keys[3]);

	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of UnidadesOrcamentarias (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCdMunicipio($this->cd_municipio);

		$copyObj->setDtVersaoOrc($this->dt_versao_orc);

		$copyObj->setCdOrgao($this->cd_orgao);

		$copyObj->setCdUnidOrc($this->cd_unid_orc);

		$copyObj->setCdTipoUnidAdm($this->cd_tipo_unid_adm);

		$copyObj->setNmUnidOrc($this->nm_unid_orc);

		$copyObj->setTpAdministracaoUo($this->tp_administracao_uo);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getBalDespExtOrcs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBalDespExtOrc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getBalDespExtraOrcs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBalDespExtraOrc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getBalRecExtOrcs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBalRecExtOrc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getBalRecExtraOrcs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBalRecExtraOrc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getContasBancariass() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addContasBancarias($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDespesasExtraOrcs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDespesasExtraOrc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFolhasPagamentoss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFolhasPagamentos($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getGestoresUnidOrcs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addGestoresUnidOrc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNotasEmpenhoss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotasEmpenhos($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getOrcDespCatEcos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addOrcDespCatEco($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getOrcDespProjAtivs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addOrcDespProjAtiv($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getOrcRecCatEcos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addOrcRecCatEco($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getServidoress() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addServidores($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getServidoresMunicipaiss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addServidoresMunicipais($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getServidoresMunicipaisTemps() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addServidoresMunicipaisTemp($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTaloesExtrass() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTaloesExtras($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUnidOrcUgs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUnidOrcUg($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVariacoesExtraOrcs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVariacoesExtraOrc($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     UnidadesOrcamentarias Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UnidadesOrcamentariasPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UnidadesOrcamentariasPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Orgaos object.
	 *
	 * @param      Orgaos $v
	 * @return     UnidadesOrcamentarias The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setOrgaos(Orgaos $v = null)
	{
		if ($v === null) {
			$this->setCdMunicipio(NULL);
		} else {
			$this->setCdMunicipio($v->getCdMunicipio());
		}

		if ($v === null) {
			$this->setCdOrgao(NULL);
		} else {
			$this->setCdOrgao($v->getCdOrgao());
		}

		if ($v === null) {
			$this->setDtVersaoOrc(NULL);
		} else {
			$this->setDtVersaoOrc($v->getDtVersaoOrc());
		}

		$this->aOrgaos = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Orgaos object, it will not be re-added.
		if ($v !== null) {
			$v->addUnidadesOrcamentarias($this);
		}

		return $this;
	}


	/**
	 * Get the associated Orgaos object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Orgaos The associated Orgaos object.
	 * @throws     PropelException
	 */
	public function getOrgaos(PropelPDO $con = null)
	{
		if ($this->aOrgaos === null && (($this->cd_municipio !== "" && $this->cd_municipio !== null) && ($this->cd_orgao !== "" && $this->cd_orgao !== null) && $this->dt_versao_orc !== null)) {
			$c = new Criteria(OrgaosPeer::DATABASE_NAME);
			$c->add(OrgaosPeer::CD_MUNICIPIO, $this->cd_municipio);
			$c->add(OrgaosPeer::CD_ORGAO, $this->cd_orgao);
			$c->add(OrgaosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
			$this->aOrgaos = OrgaosPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aOrgaos->addUnidadesOrcamentariass($this);
			 */
		}
		return $this->aOrgaos;
	}

	/**
	 * Clears out the collBalDespExtOrcs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBalDespExtOrcs()
	 */
	public function clearBalDespExtOrcs()
	{
		$this->collBalDespExtOrcs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBalDespExtOrcs collection (array).
	 *
	 * By default this just sets the collBalDespExtOrcs collection to an empty array (like clearcollBalDespExtOrcs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBalDespExtOrcs()
	{
		$this->collBalDespExtOrcs = array();
	}

	/**
	 * Gets an array of BalDespExtOrc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related BalDespExtOrcs from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array BalDespExtOrc[]
	 * @throws     PropelException
	 */
	public function getBalDespExtOrcs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBalDespExtOrcs === null) {
			if ($this->isNew()) {
			   $this->collBalDespExtOrcs = array();
			} else {

				$criteria->add(BalDespExtOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(BalDespExtOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(BalDespExtOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				BalDespExtOrcPeer::addSelectColumns($criteria);
				$this->collBalDespExtOrcs = BalDespExtOrcPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BalDespExtOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(BalDespExtOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(BalDespExtOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				BalDespExtOrcPeer::addSelectColumns($criteria);
				if (!isset($this->lastBalDespExtOrcCriteria) || !$this->lastBalDespExtOrcCriteria->equals($criteria)) {
					$this->collBalDespExtOrcs = BalDespExtOrcPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBalDespExtOrcCriteria = $criteria;
		return $this->collBalDespExtOrcs;
	}

	/**
	 * Returns the number of related BalDespExtOrc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related BalDespExtOrc objects.
	 * @throws     PropelException
	 */
	public function countBalDespExtOrcs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBalDespExtOrcs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BalDespExtOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(BalDespExtOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(BalDespExtOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = BalDespExtOrcPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BalDespExtOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(BalDespExtOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(BalDespExtOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastBalDespExtOrcCriteria) || !$this->lastBalDespExtOrcCriteria->equals($criteria)) {
					$count = BalDespExtOrcPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collBalDespExtOrcs);
				}
			} else {
				$count = count($this->collBalDespExtOrcs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a BalDespExtOrc object to this object
	 * through the BalDespExtOrc foreign key attribute.
	 *
	 * @param      BalDespExtOrc $l BalDespExtOrc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBalDespExtOrc(BalDespExtOrc $l)
	{
		if ($this->collBalDespExtOrcs === null) {
			$this->initBalDespExtOrcs();
		}
		if (!in_array($l, $this->collBalDespExtOrcs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBalDespExtOrcs, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}

	/**
	 * Clears out the collBalDespExtraOrcs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBalDespExtraOrcs()
	 */
	public function clearBalDespExtraOrcs()
	{
		$this->collBalDespExtraOrcs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBalDespExtraOrcs collection (array).
	 *
	 * By default this just sets the collBalDespExtraOrcs collection to an empty array (like clearcollBalDespExtraOrcs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBalDespExtraOrcs()
	{
		$this->collBalDespExtraOrcs = array();
	}

	/**
	 * Gets an array of BalDespExtraOrc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related BalDespExtraOrcs from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array BalDespExtraOrc[]
	 * @throws     PropelException
	 */
	public function getBalDespExtraOrcs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBalDespExtraOrcs === null) {
			if ($this->isNew()) {
			   $this->collBalDespExtraOrcs = array();
			} else {

				$criteria->add(BalDespExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(BalDespExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(BalDespExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				BalDespExtraOrcPeer::addSelectColumns($criteria);
				$this->collBalDespExtraOrcs = BalDespExtraOrcPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BalDespExtraOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(BalDespExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(BalDespExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				BalDespExtraOrcPeer::addSelectColumns($criteria);
				if (!isset($this->lastBalDespExtraOrcCriteria) || !$this->lastBalDespExtraOrcCriteria->equals($criteria)) {
					$this->collBalDespExtraOrcs = BalDespExtraOrcPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBalDespExtraOrcCriteria = $criteria;
		return $this->collBalDespExtraOrcs;
	}

	/**
	 * Returns the number of related BalDespExtraOrc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related BalDespExtraOrc objects.
	 * @throws     PropelException
	 */
	public function countBalDespExtraOrcs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBalDespExtraOrcs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BalDespExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(BalDespExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(BalDespExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = BalDespExtraOrcPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BalDespExtraOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(BalDespExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(BalDespExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastBalDespExtraOrcCriteria) || !$this->lastBalDespExtraOrcCriteria->equals($criteria)) {
					$count = BalDespExtraOrcPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collBalDespExtraOrcs);
				}
			} else {
				$count = count($this->collBalDespExtraOrcs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a BalDespExtraOrc object to this object
	 * through the BalDespExtraOrc foreign key attribute.
	 *
	 * @param      BalDespExtraOrc $l BalDespExtraOrc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBalDespExtraOrc(BalDespExtraOrc $l)
	{
		if ($this->collBalDespExtraOrcs === null) {
			$this->initBalDespExtraOrcs();
		}
		if (!in_array($l, $this->collBalDespExtraOrcs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBalDespExtraOrcs, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related BalDespExtraOrcs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getBalDespExtraOrcsJoinContasExtraOrc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBalDespExtraOrcs === null) {
			if ($this->isNew()) {
				$this->collBalDespExtraOrcs = array();
			} else {

				$criteria->add(BalDespExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(BalDespExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(BalDespExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collBalDespExtraOrcs = BalDespExtraOrcPeer::doSelectJoinContasExtraOrc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(BalDespExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(BalDespExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(BalDespExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastBalDespExtraOrcCriteria) || !$this->lastBalDespExtraOrcCriteria->equals($criteria)) {
				$this->collBalDespExtraOrcs = BalDespExtraOrcPeer::doSelectJoinContasExtraOrc($criteria, $con, $join_behavior);
			}
		}
		$this->lastBalDespExtraOrcCriteria = $criteria;

		return $this->collBalDespExtraOrcs;
	}

	/**
	 * Clears out the collBalRecExtOrcs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBalRecExtOrcs()
	 */
	public function clearBalRecExtOrcs()
	{
		$this->collBalRecExtOrcs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBalRecExtOrcs collection (array).
	 *
	 * By default this just sets the collBalRecExtOrcs collection to an empty array (like clearcollBalRecExtOrcs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBalRecExtOrcs()
	{
		$this->collBalRecExtOrcs = array();
	}

	/**
	 * Gets an array of BalRecExtOrc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related BalRecExtOrcs from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array BalRecExtOrc[]
	 * @throws     PropelException
	 */
	public function getBalRecExtOrcs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBalRecExtOrcs === null) {
			if ($this->isNew()) {
			   $this->collBalRecExtOrcs = array();
			} else {

				$criteria->add(BalRecExtOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(BalRecExtOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(BalRecExtOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				BalRecExtOrcPeer::addSelectColumns($criteria);
				$this->collBalRecExtOrcs = BalRecExtOrcPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BalRecExtOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(BalRecExtOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(BalRecExtOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				BalRecExtOrcPeer::addSelectColumns($criteria);
				if (!isset($this->lastBalRecExtOrcCriteria) || !$this->lastBalRecExtOrcCriteria->equals($criteria)) {
					$this->collBalRecExtOrcs = BalRecExtOrcPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBalRecExtOrcCriteria = $criteria;
		return $this->collBalRecExtOrcs;
	}

	/**
	 * Returns the number of related BalRecExtOrc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related BalRecExtOrc objects.
	 * @throws     PropelException
	 */
	public function countBalRecExtOrcs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBalRecExtOrcs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BalRecExtOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(BalRecExtOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(BalRecExtOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = BalRecExtOrcPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BalRecExtOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(BalRecExtOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(BalRecExtOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastBalRecExtOrcCriteria) || !$this->lastBalRecExtOrcCriteria->equals($criteria)) {
					$count = BalRecExtOrcPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collBalRecExtOrcs);
				}
			} else {
				$count = count($this->collBalRecExtOrcs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a BalRecExtOrc object to this object
	 * through the BalRecExtOrc foreign key attribute.
	 *
	 * @param      BalRecExtOrc $l BalRecExtOrc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBalRecExtOrc(BalRecExtOrc $l)
	{
		if ($this->collBalRecExtOrcs === null) {
			$this->initBalRecExtOrcs();
		}
		if (!in_array($l, $this->collBalRecExtOrcs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBalRecExtOrcs, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}

	/**
	 * Clears out the collBalRecExtraOrcs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBalRecExtraOrcs()
	 */
	public function clearBalRecExtraOrcs()
	{
		$this->collBalRecExtraOrcs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBalRecExtraOrcs collection (array).
	 *
	 * By default this just sets the collBalRecExtraOrcs collection to an empty array (like clearcollBalRecExtraOrcs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBalRecExtraOrcs()
	{
		$this->collBalRecExtraOrcs = array();
	}

	/**
	 * Gets an array of BalRecExtraOrc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related BalRecExtraOrcs from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array BalRecExtraOrc[]
	 * @throws     PropelException
	 */
	public function getBalRecExtraOrcs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBalRecExtraOrcs === null) {
			if ($this->isNew()) {
			   $this->collBalRecExtraOrcs = array();
			} else {

				$criteria->add(BalRecExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(BalRecExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(BalRecExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				BalRecExtraOrcPeer::addSelectColumns($criteria);
				$this->collBalRecExtraOrcs = BalRecExtraOrcPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BalRecExtraOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(BalRecExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(BalRecExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				BalRecExtraOrcPeer::addSelectColumns($criteria);
				if (!isset($this->lastBalRecExtraOrcCriteria) || !$this->lastBalRecExtraOrcCriteria->equals($criteria)) {
					$this->collBalRecExtraOrcs = BalRecExtraOrcPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBalRecExtraOrcCriteria = $criteria;
		return $this->collBalRecExtraOrcs;
	}

	/**
	 * Returns the number of related BalRecExtraOrc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related BalRecExtraOrc objects.
	 * @throws     PropelException
	 */
	public function countBalRecExtraOrcs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBalRecExtraOrcs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BalRecExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(BalRecExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(BalRecExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = BalRecExtraOrcPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BalRecExtraOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(BalRecExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(BalRecExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastBalRecExtraOrcCriteria) || !$this->lastBalRecExtraOrcCriteria->equals($criteria)) {
					$count = BalRecExtraOrcPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collBalRecExtraOrcs);
				}
			} else {
				$count = count($this->collBalRecExtraOrcs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a BalRecExtraOrc object to this object
	 * through the BalRecExtraOrc foreign key attribute.
	 *
	 * @param      BalRecExtraOrc $l BalRecExtraOrc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBalRecExtraOrc(BalRecExtraOrc $l)
	{
		if ($this->collBalRecExtraOrcs === null) {
			$this->initBalRecExtraOrcs();
		}
		if (!in_array($l, $this->collBalRecExtraOrcs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBalRecExtraOrcs, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related BalRecExtraOrcs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getBalRecExtraOrcsJoinContasExtraOrc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBalRecExtraOrcs === null) {
			if ($this->isNew()) {
				$this->collBalRecExtraOrcs = array();
			} else {

				$criteria->add(BalRecExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(BalRecExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(BalRecExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collBalRecExtraOrcs = BalRecExtraOrcPeer::doSelectJoinContasExtraOrc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(BalRecExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(BalRecExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(BalRecExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastBalRecExtraOrcCriteria) || !$this->lastBalRecExtraOrcCriteria->equals($criteria)) {
				$this->collBalRecExtraOrcs = BalRecExtraOrcPeer::doSelectJoinContasExtraOrc($criteria, $con, $join_behavior);
			}
		}
		$this->lastBalRecExtraOrcCriteria = $criteria;

		return $this->collBalRecExtraOrcs;
	}

	/**
	 * Clears out the collContasBancariass collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addContasBancariass()
	 */
	public function clearContasBancariass()
	{
		$this->collContasBancariass = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collContasBancariass collection (array).
	 *
	 * By default this just sets the collContasBancariass collection to an empty array (like clearcollContasBancariass());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initContasBancariass()
	{
		$this->collContasBancariass = array();
	}

	/**
	 * Gets an array of ContasBancarias objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related ContasBancariass from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ContasBancarias[]
	 * @throws     PropelException
	 */
	public function getContasBancariass($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collContasBancariass === null) {
			if ($this->isNew()) {
			   $this->collContasBancariass = array();
			} else {

				$criteria->add(ContasBancariasPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ContasBancariasPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ContasBancariasPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ContasBancariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				ContasBancariasPeer::addSelectColumns($criteria);
				$this->collContasBancariass = ContasBancariasPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ContasBancariasPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(ContasBancariasPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(ContasBancariasPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(ContasBancariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				ContasBancariasPeer::addSelectColumns($criteria);
				if (!isset($this->lastContasBancariasCriteria) || !$this->lastContasBancariasCriteria->equals($criteria)) {
					$this->collContasBancariass = ContasBancariasPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastContasBancariasCriteria = $criteria;
		return $this->collContasBancariass;
	}

	/**
	 * Returns the number of related ContasBancarias objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ContasBancarias objects.
	 * @throws     PropelException
	 */
	public function countContasBancariass(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collContasBancariass === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ContasBancariasPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ContasBancariasPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ContasBancariasPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ContasBancariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = ContasBancariasPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ContasBancariasPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(ContasBancariasPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(ContasBancariasPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(ContasBancariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastContasBancariasCriteria) || !$this->lastContasBancariasCriteria->equals($criteria)) {
					$count = ContasBancariasPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collContasBancariass);
				}
			} else {
				$count = count($this->collContasBancariass);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ContasBancarias object to this object
	 * through the ContasBancarias foreign key attribute.
	 *
	 * @param      ContasBancarias $l ContasBancarias
	 * @return     void
	 * @throws     PropelException
	 */
	public function addContasBancarias(ContasBancarias $l)
	{
		if ($this->collContasBancariass === null) {
			$this->initContasBancariass();
		}
		if (!in_array($l, $this->collContasBancariass, true)) { // only add it if the **same** object is not already associated
			array_push($this->collContasBancariass, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}

	/**
	 * Clears out the collDespesasExtraOrcs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDespesasExtraOrcs()
	 */
	public function clearDespesasExtraOrcs()
	{
		$this->collDespesasExtraOrcs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDespesasExtraOrcs collection (array).
	 *
	 * By default this just sets the collDespesasExtraOrcs collection to an empty array (like clearcollDespesasExtraOrcs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDespesasExtraOrcs()
	{
		$this->collDespesasExtraOrcs = array();
	}

	/**
	 * Gets an array of DespesasExtraOrc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related DespesasExtraOrcs from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DespesasExtraOrc[]
	 * @throws     PropelException
	 */
	public function getDespesasExtraOrcs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDespesasExtraOrcs === null) {
			if ($this->isNew()) {
			   $this->collDespesasExtraOrcs = array();
			} else {

				$criteria->add(DespesasExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(DespesasExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(DespesasExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				DespesasExtraOrcPeer::addSelectColumns($criteria);
				$this->collDespesasExtraOrcs = DespesasExtraOrcPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DespesasExtraOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(DespesasExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(DespesasExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				DespesasExtraOrcPeer::addSelectColumns($criteria);
				if (!isset($this->lastDespesasExtraOrcCriteria) || !$this->lastDespesasExtraOrcCriteria->equals($criteria)) {
					$this->collDespesasExtraOrcs = DespesasExtraOrcPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDespesasExtraOrcCriteria = $criteria;
		return $this->collDespesasExtraOrcs;
	}

	/**
	 * Returns the number of related DespesasExtraOrc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DespesasExtraOrc objects.
	 * @throws     PropelException
	 */
	public function countDespesasExtraOrcs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDespesasExtraOrcs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DespesasExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(DespesasExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(DespesasExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = DespesasExtraOrcPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DespesasExtraOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(DespesasExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(DespesasExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastDespesasExtraOrcCriteria) || !$this->lastDespesasExtraOrcCriteria->equals($criteria)) {
					$count = DespesasExtraOrcPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDespesasExtraOrcs);
				}
			} else {
				$count = count($this->collDespesasExtraOrcs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DespesasExtraOrc object to this object
	 * through the DespesasExtraOrc foreign key attribute.
	 *
	 * @param      DespesasExtraOrc $l DespesasExtraOrc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDespesasExtraOrc(DespesasExtraOrc $l)
	{
		if ($this->collDespesasExtraOrcs === null) {
			$this->initDespesasExtraOrcs();
		}
		if (!in_array($l, $this->collDespesasExtraOrcs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDespesasExtraOrcs, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related DespesasExtraOrcs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getDespesasExtraOrcsJoinContasExtraOrc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDespesasExtraOrcs === null) {
			if ($this->isNew()) {
				$this->collDespesasExtraOrcs = array();
			} else {

				$criteria->add(DespesasExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(DespesasExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(DespesasExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collDespesasExtraOrcs = DespesasExtraOrcPeer::doSelectJoinContasExtraOrc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DespesasExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(DespesasExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(DespesasExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastDespesasExtraOrcCriteria) || !$this->lastDespesasExtraOrcCriteria->equals($criteria)) {
				$this->collDespesasExtraOrcs = DespesasExtraOrcPeer::doSelectJoinContasExtraOrc($criteria, $con, $join_behavior);
			}
		}
		$this->lastDespesasExtraOrcCriteria = $criteria;

		return $this->collDespesasExtraOrcs;
	}

	/**
	 * Clears out the collFolhasPagamentoss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFolhasPagamentoss()
	 */
	public function clearFolhasPagamentoss()
	{
		$this->collFolhasPagamentoss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFolhasPagamentoss collection (array).
	 *
	 * By default this just sets the collFolhasPagamentoss collection to an empty array (like clearcollFolhasPagamentoss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFolhasPagamentoss()
	{
		$this->collFolhasPagamentoss = array();
	}

	/**
	 * Gets an array of FolhasPagamentos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related FolhasPagamentoss from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array FolhasPagamentos[]
	 * @throws     PropelException
	 */
	public function getFolhasPagamentoss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFolhasPagamentoss === null) {
			if ($this->isNew()) {
			   $this->collFolhasPagamentoss = array();
			} else {

				$criteria->add(FolhasPagamentosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(FolhasPagamentosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(FolhasPagamentosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				FolhasPagamentosPeer::addSelectColumns($criteria);
				$this->collFolhasPagamentoss = FolhasPagamentosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FolhasPagamentosPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(FolhasPagamentosPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(FolhasPagamentosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				FolhasPagamentosPeer::addSelectColumns($criteria);
				if (!isset($this->lastFolhasPagamentosCriteria) || !$this->lastFolhasPagamentosCriteria->equals($criteria)) {
					$this->collFolhasPagamentoss = FolhasPagamentosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFolhasPagamentosCriteria = $criteria;
		return $this->collFolhasPagamentoss;
	}

	/**
	 * Returns the number of related FolhasPagamentos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related FolhasPagamentos objects.
	 * @throws     PropelException
	 */
	public function countFolhasPagamentoss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFolhasPagamentoss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FolhasPagamentosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(FolhasPagamentosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(FolhasPagamentosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = FolhasPagamentosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FolhasPagamentosPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(FolhasPagamentosPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(FolhasPagamentosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastFolhasPagamentosCriteria) || !$this->lastFolhasPagamentosCriteria->equals($criteria)) {
					$count = FolhasPagamentosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFolhasPagamentoss);
				}
			} else {
				$count = count($this->collFolhasPagamentoss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a FolhasPagamentos object to this object
	 * through the FolhasPagamentos foreign key attribute.
	 *
	 * @param      FolhasPagamentos $l FolhasPagamentos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFolhasPagamentos(FolhasPagamentos $l)
	{
		if ($this->collFolhasPagamentoss === null) {
			$this->initFolhasPagamentoss();
		}
		if (!in_array($l, $this->collFolhasPagamentoss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFolhasPagamentoss, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related FolhasPagamentoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getFolhasPagamentossJoinTiposFolhas($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFolhasPagamentoss === null) {
			if ($this->isNew()) {
				$this->collFolhasPagamentoss = array();
			} else {

				$criteria->add(FolhasPagamentosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(FolhasPagamentosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(FolhasPagamentosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collFolhasPagamentoss = FolhasPagamentosPeer::doSelectJoinTiposFolhas($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FolhasPagamentosPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(FolhasPagamentosPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(FolhasPagamentosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastFolhasPagamentosCriteria) || !$this->lastFolhasPagamentosCriteria->equals($criteria)) {
				$this->collFolhasPagamentoss = FolhasPagamentosPeer::doSelectJoinTiposFolhas($criteria, $con, $join_behavior);
			}
		}
		$this->lastFolhasPagamentosCriteria = $criteria;

		return $this->collFolhasPagamentoss;
	}

	/**
	 * Clears out the collGestoresUnidOrcs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addGestoresUnidOrcs()
	 */
	public function clearGestoresUnidOrcs()
	{
		$this->collGestoresUnidOrcs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collGestoresUnidOrcs collection (array).
	 *
	 * By default this just sets the collGestoresUnidOrcs collection to an empty array (like clearcollGestoresUnidOrcs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initGestoresUnidOrcs()
	{
		$this->collGestoresUnidOrcs = array();
	}

	/**
	 * Gets an array of GestoresUnidOrc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related GestoresUnidOrcs from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array GestoresUnidOrc[]
	 * @throws     PropelException
	 */
	public function getGestoresUnidOrcs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGestoresUnidOrcs === null) {
			if ($this->isNew()) {
			   $this->collGestoresUnidOrcs = array();
			} else {

				$criteria->add(GestoresUnidOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(GestoresUnidOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(GestoresUnidOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				GestoresUnidOrcPeer::addSelectColumns($criteria);
				$this->collGestoresUnidOrcs = GestoresUnidOrcPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(GestoresUnidOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(GestoresUnidOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(GestoresUnidOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				GestoresUnidOrcPeer::addSelectColumns($criteria);
				if (!isset($this->lastGestoresUnidOrcCriteria) || !$this->lastGestoresUnidOrcCriteria->equals($criteria)) {
					$this->collGestoresUnidOrcs = GestoresUnidOrcPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastGestoresUnidOrcCriteria = $criteria;
		return $this->collGestoresUnidOrcs;
	}

	/**
	 * Returns the number of related GestoresUnidOrc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related GestoresUnidOrc objects.
	 * @throws     PropelException
	 */
	public function countGestoresUnidOrcs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collGestoresUnidOrcs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(GestoresUnidOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(GestoresUnidOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(GestoresUnidOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = GestoresUnidOrcPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(GestoresUnidOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(GestoresUnidOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(GestoresUnidOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastGestoresUnidOrcCriteria) || !$this->lastGestoresUnidOrcCriteria->equals($criteria)) {
					$count = GestoresUnidOrcPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collGestoresUnidOrcs);
				}
			} else {
				$count = count($this->collGestoresUnidOrcs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a GestoresUnidOrc object to this object
	 * through the GestoresUnidOrc foreign key attribute.
	 *
	 * @param      GestoresUnidOrc $l GestoresUnidOrc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addGestoresUnidOrc(GestoresUnidOrc $l)
	{
		if ($this->collGestoresUnidOrcs === null) {
			$this->initGestoresUnidOrcs();
		}
		if (!in_array($l, $this->collGestoresUnidOrcs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collGestoresUnidOrcs, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related GestoresUnidOrcs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getGestoresUnidOrcsJoinTiposCargos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGestoresUnidOrcs === null) {
			if ($this->isNew()) {
				$this->collGestoresUnidOrcs = array();
			} else {

				$criteria->add(GestoresUnidOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(GestoresUnidOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(GestoresUnidOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collGestoresUnidOrcs = GestoresUnidOrcPeer::doSelectJoinTiposCargos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GestoresUnidOrcPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(GestoresUnidOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(GestoresUnidOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastGestoresUnidOrcCriteria) || !$this->lastGestoresUnidOrcCriteria->equals($criteria)) {
				$this->collGestoresUnidOrcs = GestoresUnidOrcPeer::doSelectJoinTiposCargos($criteria, $con, $join_behavior);
			}
		}
		$this->lastGestoresUnidOrcCriteria = $criteria;

		return $this->collGestoresUnidOrcs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related GestoresUnidOrcs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getGestoresUnidOrcsJoinAgentesPublicos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGestoresUnidOrcs === null) {
			if ($this->isNew()) {
				$this->collGestoresUnidOrcs = array();
			} else {

				$criteria->add(GestoresUnidOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(GestoresUnidOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(GestoresUnidOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collGestoresUnidOrcs = GestoresUnidOrcPeer::doSelectJoinAgentesPublicos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GestoresUnidOrcPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(GestoresUnidOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(GestoresUnidOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastGestoresUnidOrcCriteria) || !$this->lastGestoresUnidOrcCriteria->equals($criteria)) {
				$this->collGestoresUnidOrcs = GestoresUnidOrcPeer::doSelectJoinAgentesPublicos($criteria, $con, $join_behavior);
			}
		}
		$this->lastGestoresUnidOrcCriteria = $criteria;

		return $this->collGestoresUnidOrcs;
	}

	/**
	 * Clears out the collNotasEmpenhoss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotasEmpenhoss()
	 */
	public function clearNotasEmpenhoss()
	{
		$this->collNotasEmpenhoss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotasEmpenhoss collection (array).
	 *
	 * By default this just sets the collNotasEmpenhoss collection to an empty array (like clearcollNotasEmpenhoss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotasEmpenhoss()
	{
		$this->collNotasEmpenhoss = array();
	}

	/**
	 * Gets an array of NotasEmpenhos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related NotasEmpenhoss from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NotasEmpenhos[]
	 * @throws     PropelException
	 */
	public function getNotasEmpenhoss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotasEmpenhoss === null) {
			if ($this->isNew()) {
			   $this->collNotasEmpenhoss = array();
			} else {

				$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				NotasEmpenhosPeer::addSelectColumns($criteria);
				$this->collNotasEmpenhoss = NotasEmpenhosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				NotasEmpenhosPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotasEmpenhosCriteria) || !$this->lastNotasEmpenhosCriteria->equals($criteria)) {
					$this->collNotasEmpenhoss = NotasEmpenhosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotasEmpenhosCriteria = $criteria;
		return $this->collNotasEmpenhoss;
	}

	/**
	 * Returns the number of related NotasEmpenhos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NotasEmpenhos objects.
	 * @throws     PropelException
	 */
	public function countNotasEmpenhoss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotasEmpenhoss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = NotasEmpenhosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastNotasEmpenhosCriteria) || !$this->lastNotasEmpenhosCriteria->equals($criteria)) {
					$count = NotasEmpenhosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collNotasEmpenhoss);
				}
			} else {
				$count = count($this->collNotasEmpenhoss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NotasEmpenhos object to this object
	 * through the NotasEmpenhos foreign key attribute.
	 *
	 * @param      NotasEmpenhos $l NotasEmpenhos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotasEmpenhos(NotasEmpenhos $l)
	{
		if ($this->collNotasEmpenhoss === null) {
			$this->initNotasEmpenhoss();
		}
		if (!in_array($l, $this->collNotasEmpenhoss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotasEmpenhoss, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related NotasEmpenhoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getNotasEmpenhossJoinUnidadesFederacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotasEmpenhoss === null) {
			if ($this->isNew()) {
				$this->collNotasEmpenhoss = array();
			} else {

				$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collNotasEmpenhoss = NotasEmpenhosPeer::doSelectJoinUnidadesFederacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastNotasEmpenhosCriteria) || !$this->lastNotasEmpenhosCriteria->equals($criteria)) {
				$this->collNotasEmpenhoss = NotasEmpenhosPeer::doSelectJoinUnidadesFederacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotasEmpenhosCriteria = $criteria;

		return $this->collNotasEmpenhoss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related NotasEmpenhoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getNotasEmpenhossJoinCatEcoProjAtiv($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotasEmpenhoss === null) {
			if ($this->isNew()) {
				$this->collNotasEmpenhoss = array();
			} else {

				$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collNotasEmpenhoss = NotasEmpenhosPeer::doSelectJoinCatEcoProjAtiv($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastNotasEmpenhosCriteria) || !$this->lastNotasEmpenhosCriteria->equals($criteria)) {
				$this->collNotasEmpenhoss = NotasEmpenhosPeer::doSelectJoinCatEcoProjAtiv($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotasEmpenhosCriteria = $criteria;

		return $this->collNotasEmpenhoss;
	}

	/**
	 * Clears out the collOrcDespCatEcos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addOrcDespCatEcos()
	 */
	public function clearOrcDespCatEcos()
	{
		$this->collOrcDespCatEcos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collOrcDespCatEcos collection (array).
	 *
	 * By default this just sets the collOrcDespCatEcos collection to an empty array (like clearcollOrcDespCatEcos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initOrcDespCatEcos()
	{
		$this->collOrcDespCatEcos = array();
	}

	/**
	 * Gets an array of OrcDespCatEco objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related OrcDespCatEcos from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array OrcDespCatEco[]
	 * @throws     PropelException
	 */
	public function getOrcDespCatEcos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrcDespCatEcos === null) {
			if ($this->isNew()) {
			   $this->collOrcDespCatEcos = array();
			} else {

				$criteria->add(OrcDespCatEcoPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(OrcDespCatEcoPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(OrcDespCatEcoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				OrcDespCatEcoPeer::addSelectColumns($criteria);
				$this->collOrcDespCatEcos = OrcDespCatEcoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(OrcDespCatEcoPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(OrcDespCatEcoPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(OrcDespCatEcoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				OrcDespCatEcoPeer::addSelectColumns($criteria);
				if (!isset($this->lastOrcDespCatEcoCriteria) || !$this->lastOrcDespCatEcoCriteria->equals($criteria)) {
					$this->collOrcDespCatEcos = OrcDespCatEcoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastOrcDespCatEcoCriteria = $criteria;
		return $this->collOrcDespCatEcos;
	}

	/**
	 * Returns the number of related OrcDespCatEco objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related OrcDespCatEco objects.
	 * @throws     PropelException
	 */
	public function countOrcDespCatEcos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collOrcDespCatEcos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(OrcDespCatEcoPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(OrcDespCatEcoPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(OrcDespCatEcoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = OrcDespCatEcoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(OrcDespCatEcoPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(OrcDespCatEcoPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(OrcDespCatEcoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastOrcDespCatEcoCriteria) || !$this->lastOrcDespCatEcoCriteria->equals($criteria)) {
					$count = OrcDespCatEcoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collOrcDespCatEcos);
				}
			} else {
				$count = count($this->collOrcDespCatEcos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a OrcDespCatEco object to this object
	 * through the OrcDespCatEco foreign key attribute.
	 *
	 * @param      OrcDespCatEco $l OrcDespCatEco
	 * @return     void
	 * @throws     PropelException
	 */
	public function addOrcDespCatEco(OrcDespCatEco $l)
	{
		if ($this->collOrcDespCatEcos === null) {
			$this->initOrcDespCatEcos();
		}
		if (!in_array($l, $this->collOrcDespCatEcos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collOrcDespCatEcos, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}

	/**
	 * Clears out the collOrcDespProjAtivs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addOrcDespProjAtivs()
	 */
	public function clearOrcDespProjAtivs()
	{
		$this->collOrcDespProjAtivs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collOrcDespProjAtivs collection (array).
	 *
	 * By default this just sets the collOrcDespProjAtivs collection to an empty array (like clearcollOrcDespProjAtivs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initOrcDespProjAtivs()
	{
		$this->collOrcDespProjAtivs = array();
	}

	/**
	 * Gets an array of OrcDespProjAtiv objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related OrcDespProjAtivs from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array OrcDespProjAtiv[]
	 * @throws     PropelException
	 */
	public function getOrcDespProjAtivs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrcDespProjAtivs === null) {
			if ($this->isNew()) {
			   $this->collOrcDespProjAtivs = array();
			} else {

				$criteria->add(OrcDespProjAtivPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(OrcDespProjAtivPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(OrcDespProjAtivPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(OrcDespProjAtivPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				OrcDespProjAtivPeer::addSelectColumns($criteria);
				$this->collOrcDespProjAtivs = OrcDespProjAtivPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(OrcDespProjAtivPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(OrcDespProjAtivPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(OrcDespProjAtivPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(OrcDespProjAtivPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				OrcDespProjAtivPeer::addSelectColumns($criteria);
				if (!isset($this->lastOrcDespProjAtivCriteria) || !$this->lastOrcDespProjAtivCriteria->equals($criteria)) {
					$this->collOrcDespProjAtivs = OrcDespProjAtivPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastOrcDespProjAtivCriteria = $criteria;
		return $this->collOrcDespProjAtivs;
	}

	/**
	 * Returns the number of related OrcDespProjAtiv objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related OrcDespProjAtiv objects.
	 * @throws     PropelException
	 */
	public function countOrcDespProjAtivs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collOrcDespProjAtivs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(OrcDespProjAtivPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(OrcDespProjAtivPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(OrcDespProjAtivPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(OrcDespProjAtivPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = OrcDespProjAtivPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(OrcDespProjAtivPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(OrcDespProjAtivPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(OrcDespProjAtivPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(OrcDespProjAtivPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastOrcDespProjAtivCriteria) || !$this->lastOrcDespProjAtivCriteria->equals($criteria)) {
					$count = OrcDespProjAtivPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collOrcDespProjAtivs);
				}
			} else {
				$count = count($this->collOrcDespProjAtivs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a OrcDespProjAtiv object to this object
	 * through the OrcDespProjAtiv foreign key attribute.
	 *
	 * @param      OrcDespProjAtiv $l OrcDespProjAtiv
	 * @return     void
	 * @throws     PropelException
	 */
	public function addOrcDespProjAtiv(OrcDespProjAtiv $l)
	{
		if ($this->collOrcDespProjAtivs === null) {
			$this->initOrcDespProjAtivs();
		}
		if (!in_array($l, $this->collOrcDespProjAtivs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collOrcDespProjAtivs, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related OrcDespProjAtivs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getOrcDespProjAtivsJoinSubfuncoes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrcDespProjAtivs === null) {
			if ($this->isNew()) {
				$this->collOrcDespProjAtivs = array();
			} else {

				$criteria->add(OrcDespProjAtivPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(OrcDespProjAtivPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(OrcDespProjAtivPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(OrcDespProjAtivPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collOrcDespProjAtivs = OrcDespProjAtivPeer::doSelectJoinSubfuncoes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrcDespProjAtivPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(OrcDespProjAtivPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(OrcDespProjAtivPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(OrcDespProjAtivPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastOrcDespProjAtivCriteria) || !$this->lastOrcDespProjAtivCriteria->equals($criteria)) {
				$this->collOrcDespProjAtivs = OrcDespProjAtivPeer::doSelectJoinSubfuncoes($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrcDespProjAtivCriteria = $criteria;

		return $this->collOrcDespProjAtivs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related OrcDespProjAtivs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getOrcDespProjAtivsJoinTiposOrcamentos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrcDespProjAtivs === null) {
			if ($this->isNew()) {
				$this->collOrcDespProjAtivs = array();
			} else {

				$criteria->add(OrcDespProjAtivPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(OrcDespProjAtivPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(OrcDespProjAtivPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(OrcDespProjAtivPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collOrcDespProjAtivs = OrcDespProjAtivPeer::doSelectJoinTiposOrcamentos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrcDespProjAtivPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(OrcDespProjAtivPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(OrcDespProjAtivPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(OrcDespProjAtivPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastOrcDespProjAtivCriteria) || !$this->lastOrcDespProjAtivCriteria->equals($criteria)) {
				$this->collOrcDespProjAtivs = OrcDespProjAtivPeer::doSelectJoinTiposOrcamentos($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrcDespProjAtivCriteria = $criteria;

		return $this->collOrcDespProjAtivs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related OrcDespProjAtivs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getOrcDespProjAtivsJoinProgramas($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrcDespProjAtivs === null) {
			if ($this->isNew()) {
				$this->collOrcDespProjAtivs = array();
			} else {

				$criteria->add(OrcDespProjAtivPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(OrcDespProjAtivPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(OrcDespProjAtivPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(OrcDespProjAtivPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collOrcDespProjAtivs = OrcDespProjAtivPeer::doSelectJoinProgramas($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrcDespProjAtivPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(OrcDespProjAtivPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(OrcDespProjAtivPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(OrcDespProjAtivPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastOrcDespProjAtivCriteria) || !$this->lastOrcDespProjAtivCriteria->equals($criteria)) {
				$this->collOrcDespProjAtivs = OrcDespProjAtivPeer::doSelectJoinProgramas($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrcDespProjAtivCriteria = $criteria;

		return $this->collOrcDespProjAtivs;
	}

	/**
	 * Clears out the collOrcRecCatEcos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addOrcRecCatEcos()
	 */
	public function clearOrcRecCatEcos()
	{
		$this->collOrcRecCatEcos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collOrcRecCatEcos collection (array).
	 *
	 * By default this just sets the collOrcRecCatEcos collection to an empty array (like clearcollOrcRecCatEcos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initOrcRecCatEcos()
	{
		$this->collOrcRecCatEcos = array();
	}

	/**
	 * Gets an array of OrcRecCatEco objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related OrcRecCatEcos from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array OrcRecCatEco[]
	 * @throws     PropelException
	 */
	public function getOrcRecCatEcos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrcRecCatEcos === null) {
			if ($this->isNew()) {
			   $this->collOrcRecCatEcos = array();
			} else {

				$criteria->add(OrcRecCatEcoPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(OrcRecCatEcoPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(OrcRecCatEcoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				OrcRecCatEcoPeer::addSelectColumns($criteria);
				$this->collOrcRecCatEcos = OrcRecCatEcoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(OrcRecCatEcoPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(OrcRecCatEcoPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(OrcRecCatEcoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				OrcRecCatEcoPeer::addSelectColumns($criteria);
				if (!isset($this->lastOrcRecCatEcoCriteria) || !$this->lastOrcRecCatEcoCriteria->equals($criteria)) {
					$this->collOrcRecCatEcos = OrcRecCatEcoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastOrcRecCatEcoCriteria = $criteria;
		return $this->collOrcRecCatEcos;
	}

	/**
	 * Returns the number of related OrcRecCatEco objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related OrcRecCatEco objects.
	 * @throws     PropelException
	 */
	public function countOrcRecCatEcos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collOrcRecCatEcos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(OrcRecCatEcoPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(OrcRecCatEcoPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(OrcRecCatEcoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = OrcRecCatEcoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(OrcRecCatEcoPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(OrcRecCatEcoPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(OrcRecCatEcoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastOrcRecCatEcoCriteria) || !$this->lastOrcRecCatEcoCriteria->equals($criteria)) {
					$count = OrcRecCatEcoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collOrcRecCatEcos);
				}
			} else {
				$count = count($this->collOrcRecCatEcos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a OrcRecCatEco object to this object
	 * through the OrcRecCatEco foreign key attribute.
	 *
	 * @param      OrcRecCatEco $l OrcRecCatEco
	 * @return     void
	 * @throws     PropelException
	 */
	public function addOrcRecCatEco(OrcRecCatEco $l)
	{
		if ($this->collOrcRecCatEcos === null) {
			$this->initOrcRecCatEcos();
		}
		if (!in_array($l, $this->collOrcRecCatEcos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collOrcRecCatEcos, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}

	/**
	 * Clears out the collServidoress collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addServidoress()
	 */
	public function clearServidoress()
	{
		$this->collServidoress = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collServidoress collection (array).
	 *
	 * By default this just sets the collServidoress collection to an empty array (like clearcollServidoress());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initServidoress()
	{
		$this->collServidoress = array();
	}

	/**
	 * Gets an array of Servidores objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related Servidoress from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Servidores[]
	 * @throws     PropelException
	 */
	public function getServidoress($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collServidoress === null) {
			if ($this->isNew()) {
			   $this->collServidoress = array();
			} else {

				$criteria->add(ServidoresPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ServidoresPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ServidoresPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ServidoresPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				ServidoresPeer::addSelectColumns($criteria);
				$this->collServidoress = ServidoresPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ServidoresPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(ServidoresPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(ServidoresPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(ServidoresPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				ServidoresPeer::addSelectColumns($criteria);
				if (!isset($this->lastServidoresCriteria) || !$this->lastServidoresCriteria->equals($criteria)) {
					$this->collServidoress = ServidoresPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastServidoresCriteria = $criteria;
		return $this->collServidoress;
	}

	/**
	 * Returns the number of related Servidores objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Servidores objects.
	 * @throws     PropelException
	 */
	public function countServidoress(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collServidoress === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ServidoresPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ServidoresPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ServidoresPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ServidoresPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = ServidoresPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ServidoresPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(ServidoresPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(ServidoresPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(ServidoresPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastServidoresCriteria) || !$this->lastServidoresCriteria->equals($criteria)) {
					$count = ServidoresPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collServidoress);
				}
			} else {
				$count = count($this->collServidoress);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Servidores object to this object
	 * through the Servidores foreign key attribute.
	 *
	 * @param      Servidores $l Servidores
	 * @return     void
	 * @throws     PropelException
	 */
	public function addServidores(Servidores $l)
	{
		if ($this->collServidoress === null) {
			$this->initServidoress();
		}
		if (!in_array($l, $this->collServidoress, true)) { // only add it if the **same** object is not already associated
			array_push($this->collServidoress, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}

	/**
	 * Clears out the collServidoresMunicipaiss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addServidoresMunicipaiss()
	 */
	public function clearServidoresMunicipaiss()
	{
		$this->collServidoresMunicipaiss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collServidoresMunicipaiss collection (array).
	 *
	 * By default this just sets the collServidoresMunicipaiss collection to an empty array (like clearcollServidoresMunicipaiss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initServidoresMunicipaiss()
	{
		$this->collServidoresMunicipaiss = array();
	}

	/**
	 * Gets an array of ServidoresMunicipais objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related ServidoresMunicipaiss from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ServidoresMunicipais[]
	 * @throws     PropelException
	 */
	public function getServidoresMunicipaiss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collServidoresMunicipaiss === null) {
			if ($this->isNew()) {
			   $this->collServidoresMunicipaiss = array();
			} else {

				$criteria->add(ServidoresMunicipaisPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ServidoresMunicipaisPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ServidoresMunicipaisPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ServidoresMunicipaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				ServidoresMunicipaisPeer::addSelectColumns($criteria);
				$this->collServidoresMunicipaiss = ServidoresMunicipaisPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ServidoresMunicipaisPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(ServidoresMunicipaisPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(ServidoresMunicipaisPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(ServidoresMunicipaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				ServidoresMunicipaisPeer::addSelectColumns($criteria);
				if (!isset($this->lastServidoresMunicipaisCriteria) || !$this->lastServidoresMunicipaisCriteria->equals($criteria)) {
					$this->collServidoresMunicipaiss = ServidoresMunicipaisPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastServidoresMunicipaisCriteria = $criteria;
		return $this->collServidoresMunicipaiss;
	}

	/**
	 * Returns the number of related ServidoresMunicipais objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ServidoresMunicipais objects.
	 * @throws     PropelException
	 */
	public function countServidoresMunicipaiss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collServidoresMunicipaiss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ServidoresMunicipaisPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ServidoresMunicipaisPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ServidoresMunicipaisPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ServidoresMunicipaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = ServidoresMunicipaisPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ServidoresMunicipaisPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(ServidoresMunicipaisPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(ServidoresMunicipaisPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(ServidoresMunicipaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastServidoresMunicipaisCriteria) || !$this->lastServidoresMunicipaisCriteria->equals($criteria)) {
					$count = ServidoresMunicipaisPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collServidoresMunicipaiss);
				}
			} else {
				$count = count($this->collServidoresMunicipaiss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ServidoresMunicipais object to this object
	 * through the ServidoresMunicipais foreign key attribute.
	 *
	 * @param      ServidoresMunicipais $l ServidoresMunicipais
	 * @return     void
	 * @throws     PropelException
	 */
	public function addServidoresMunicipais(ServidoresMunicipais $l)
	{
		if ($this->collServidoresMunicipaiss === null) {
			$this->initServidoresMunicipaiss();
		}
		if (!in_array($l, $this->collServidoresMunicipaiss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collServidoresMunicipaiss, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related ServidoresMunicipaiss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getServidoresMunicipaissJoinDadosPessoaisServ($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collServidoresMunicipaiss === null) {
			if ($this->isNew()) {
				$this->collServidoresMunicipaiss = array();
			} else {

				$criteria->add(ServidoresMunicipaisPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ServidoresMunicipaisPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ServidoresMunicipaisPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ServidoresMunicipaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collServidoresMunicipaiss = ServidoresMunicipaisPeer::doSelectJoinDadosPessoaisServ($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ServidoresMunicipaisPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(ServidoresMunicipaisPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(ServidoresMunicipaisPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(ServidoresMunicipaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastServidoresMunicipaisCriteria) || !$this->lastServidoresMunicipaisCriteria->equals($criteria)) {
				$this->collServidoresMunicipaiss = ServidoresMunicipaisPeer::doSelectJoinDadosPessoaisServ($criteria, $con, $join_behavior);
			}
		}
		$this->lastServidoresMunicipaisCriteria = $criteria;

		return $this->collServidoresMunicipaiss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related ServidoresMunicipaiss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getServidoresMunicipaissJoinSitFuncionais($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collServidoresMunicipaiss === null) {
			if ($this->isNew()) {
				$this->collServidoresMunicipaiss = array();
			} else {

				$criteria->add(ServidoresMunicipaisPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ServidoresMunicipaisPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ServidoresMunicipaisPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ServidoresMunicipaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collServidoresMunicipaiss = ServidoresMunicipaisPeer::doSelectJoinSitFuncionais($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ServidoresMunicipaisPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(ServidoresMunicipaisPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(ServidoresMunicipaisPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(ServidoresMunicipaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastServidoresMunicipaisCriteria) || !$this->lastServidoresMunicipaisCriteria->equals($criteria)) {
				$this->collServidoresMunicipaiss = ServidoresMunicipaisPeer::doSelectJoinSitFuncionais($criteria, $con, $join_behavior);
			}
		}
		$this->lastServidoresMunicipaisCriteria = $criteria;

		return $this->collServidoresMunicipaiss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related ServidoresMunicipaiss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getServidoresMunicipaissJoinVinculos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collServidoresMunicipaiss === null) {
			if ($this->isNew()) {
				$this->collServidoresMunicipaiss = array();
			} else {

				$criteria->add(ServidoresMunicipaisPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ServidoresMunicipaisPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ServidoresMunicipaisPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ServidoresMunicipaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collServidoresMunicipaiss = ServidoresMunicipaisPeer::doSelectJoinVinculos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ServidoresMunicipaisPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(ServidoresMunicipaisPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(ServidoresMunicipaisPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(ServidoresMunicipaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastServidoresMunicipaisCriteria) || !$this->lastServidoresMunicipaisCriteria->equals($criteria)) {
				$this->collServidoresMunicipaiss = ServidoresMunicipaisPeer::doSelectJoinVinculos($criteria, $con, $join_behavior);
			}
		}
		$this->lastServidoresMunicipaisCriteria = $criteria;

		return $this->collServidoresMunicipaiss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related ServidoresMunicipaiss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getServidoresMunicipaissJoinGrausInstrucao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collServidoresMunicipaiss === null) {
			if ($this->isNew()) {
				$this->collServidoresMunicipaiss = array();
			} else {

				$criteria->add(ServidoresMunicipaisPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ServidoresMunicipaisPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ServidoresMunicipaisPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ServidoresMunicipaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collServidoresMunicipaiss = ServidoresMunicipaisPeer::doSelectJoinGrausInstrucao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ServidoresMunicipaisPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(ServidoresMunicipaisPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(ServidoresMunicipaisPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(ServidoresMunicipaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastServidoresMunicipaisCriteria) || !$this->lastServidoresMunicipaisCriteria->equals($criteria)) {
				$this->collServidoresMunicipaiss = ServidoresMunicipaisPeer::doSelectJoinGrausInstrucao($criteria, $con, $join_behavior);
			}
		}
		$this->lastServidoresMunicipaisCriteria = $criteria;

		return $this->collServidoresMunicipaiss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related ServidoresMunicipaiss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getServidoresMunicipaissJoinFormaIngresso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collServidoresMunicipaiss === null) {
			if ($this->isNew()) {
				$this->collServidoresMunicipaiss = array();
			} else {

				$criteria->add(ServidoresMunicipaisPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ServidoresMunicipaisPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ServidoresMunicipaisPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ServidoresMunicipaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collServidoresMunicipaiss = ServidoresMunicipaisPeer::doSelectJoinFormaIngresso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ServidoresMunicipaisPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(ServidoresMunicipaisPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(ServidoresMunicipaisPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(ServidoresMunicipaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastServidoresMunicipaisCriteria) || !$this->lastServidoresMunicipaisCriteria->equals($criteria)) {
				$this->collServidoresMunicipaiss = ServidoresMunicipaisPeer::doSelectJoinFormaIngresso($criteria, $con, $join_behavior);
			}
		}
		$this->lastServidoresMunicipaisCriteria = $criteria;

		return $this->collServidoresMunicipaiss;
	}

	/**
	 * Clears out the collServidoresMunicipaisTemps collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addServidoresMunicipaisTemps()
	 */
	public function clearServidoresMunicipaisTemps()
	{
		$this->collServidoresMunicipaisTemps = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collServidoresMunicipaisTemps collection (array).
	 *
	 * By default this just sets the collServidoresMunicipaisTemps collection to an empty array (like clearcollServidoresMunicipaisTemps());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initServidoresMunicipaisTemps()
	{
		$this->collServidoresMunicipaisTemps = array();
	}

	/**
	 * Gets an array of ServidoresMunicipaisTemp objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related ServidoresMunicipaisTemps from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ServidoresMunicipaisTemp[]
	 * @throws     PropelException
	 */
	public function getServidoresMunicipaisTemps($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collServidoresMunicipaisTemps === null) {
			if ($this->isNew()) {
			   $this->collServidoresMunicipaisTemps = array();
			} else {

				$criteria->add(ServidoresMunicipaisTempPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ServidoresMunicipaisTempPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ServidoresMunicipaisTempPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ServidoresMunicipaisTempPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				ServidoresMunicipaisTempPeer::addSelectColumns($criteria);
				$this->collServidoresMunicipaisTemps = ServidoresMunicipaisTempPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ServidoresMunicipaisTempPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(ServidoresMunicipaisTempPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(ServidoresMunicipaisTempPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(ServidoresMunicipaisTempPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				ServidoresMunicipaisTempPeer::addSelectColumns($criteria);
				if (!isset($this->lastServidoresMunicipaisTempCriteria) || !$this->lastServidoresMunicipaisTempCriteria->equals($criteria)) {
					$this->collServidoresMunicipaisTemps = ServidoresMunicipaisTempPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastServidoresMunicipaisTempCriteria = $criteria;
		return $this->collServidoresMunicipaisTemps;
	}

	/**
	 * Returns the number of related ServidoresMunicipaisTemp objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ServidoresMunicipaisTemp objects.
	 * @throws     PropelException
	 */
	public function countServidoresMunicipaisTemps(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collServidoresMunicipaisTemps === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ServidoresMunicipaisTempPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ServidoresMunicipaisTempPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ServidoresMunicipaisTempPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ServidoresMunicipaisTempPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = ServidoresMunicipaisTempPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ServidoresMunicipaisTempPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(ServidoresMunicipaisTempPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(ServidoresMunicipaisTempPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(ServidoresMunicipaisTempPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastServidoresMunicipaisTempCriteria) || !$this->lastServidoresMunicipaisTempCriteria->equals($criteria)) {
					$count = ServidoresMunicipaisTempPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collServidoresMunicipaisTemps);
				}
			} else {
				$count = count($this->collServidoresMunicipaisTemps);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ServidoresMunicipaisTemp object to this object
	 * through the ServidoresMunicipaisTemp foreign key attribute.
	 *
	 * @param      ServidoresMunicipaisTemp $l ServidoresMunicipaisTemp
	 * @return     void
	 * @throws     PropelException
	 */
	public function addServidoresMunicipaisTemp(ServidoresMunicipaisTemp $l)
	{
		if ($this->collServidoresMunicipaisTemps === null) {
			$this->initServidoresMunicipaisTemps();
		}
		if (!in_array($l, $this->collServidoresMunicipaisTemps, true)) { // only add it if the **same** object is not already associated
			array_push($this->collServidoresMunicipaisTemps, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related ServidoresMunicipaisTemps from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getServidoresMunicipaisTempsJoinSitFuncionais($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collServidoresMunicipaisTemps === null) {
			if ($this->isNew()) {
				$this->collServidoresMunicipaisTemps = array();
			} else {

				$criteria->add(ServidoresMunicipaisTempPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ServidoresMunicipaisTempPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ServidoresMunicipaisTempPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ServidoresMunicipaisTempPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collServidoresMunicipaisTemps = ServidoresMunicipaisTempPeer::doSelectJoinSitFuncionais($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ServidoresMunicipaisTempPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(ServidoresMunicipaisTempPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(ServidoresMunicipaisTempPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(ServidoresMunicipaisTempPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastServidoresMunicipaisTempCriteria) || !$this->lastServidoresMunicipaisTempCriteria->equals($criteria)) {
				$this->collServidoresMunicipaisTemps = ServidoresMunicipaisTempPeer::doSelectJoinSitFuncionais($criteria, $con, $join_behavior);
			}
		}
		$this->lastServidoresMunicipaisTempCriteria = $criteria;

		return $this->collServidoresMunicipaisTemps;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related ServidoresMunicipaisTemps from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getServidoresMunicipaisTempsJoinVinculos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collServidoresMunicipaisTemps === null) {
			if ($this->isNew()) {
				$this->collServidoresMunicipaisTemps = array();
			} else {

				$criteria->add(ServidoresMunicipaisTempPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ServidoresMunicipaisTempPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ServidoresMunicipaisTempPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ServidoresMunicipaisTempPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collServidoresMunicipaisTemps = ServidoresMunicipaisTempPeer::doSelectJoinVinculos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ServidoresMunicipaisTempPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(ServidoresMunicipaisTempPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(ServidoresMunicipaisTempPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(ServidoresMunicipaisTempPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastServidoresMunicipaisTempCriteria) || !$this->lastServidoresMunicipaisTempCriteria->equals($criteria)) {
				$this->collServidoresMunicipaisTemps = ServidoresMunicipaisTempPeer::doSelectJoinVinculos($criteria, $con, $join_behavior);
			}
		}
		$this->lastServidoresMunicipaisTempCriteria = $criteria;

		return $this->collServidoresMunicipaisTemps;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related ServidoresMunicipaisTemps from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getServidoresMunicipaisTempsJoinGrausInstrucao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collServidoresMunicipaisTemps === null) {
			if ($this->isNew()) {
				$this->collServidoresMunicipaisTemps = array();
			} else {

				$criteria->add(ServidoresMunicipaisTempPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(ServidoresMunicipaisTempPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(ServidoresMunicipaisTempPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(ServidoresMunicipaisTempPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collServidoresMunicipaisTemps = ServidoresMunicipaisTempPeer::doSelectJoinGrausInstrucao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ServidoresMunicipaisTempPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(ServidoresMunicipaisTempPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(ServidoresMunicipaisTempPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(ServidoresMunicipaisTempPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastServidoresMunicipaisTempCriteria) || !$this->lastServidoresMunicipaisTempCriteria->equals($criteria)) {
				$this->collServidoresMunicipaisTemps = ServidoresMunicipaisTempPeer::doSelectJoinGrausInstrucao($criteria, $con, $join_behavior);
			}
		}
		$this->lastServidoresMunicipaisTempCriteria = $criteria;

		return $this->collServidoresMunicipaisTemps;
	}

	/**
	 * Clears out the collTaloesExtrass collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTaloesExtrass()
	 */
	public function clearTaloesExtrass()
	{
		$this->collTaloesExtrass = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTaloesExtrass collection (array).
	 *
	 * By default this just sets the collTaloesExtrass collection to an empty array (like clearcollTaloesExtrass());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTaloesExtrass()
	{
		$this->collTaloesExtrass = array();
	}

	/**
	 * Gets an array of TaloesExtras objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related TaloesExtrass from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TaloesExtras[]
	 * @throws     PropelException
	 */
	public function getTaloesExtrass($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTaloesExtrass === null) {
			if ($this->isNew()) {
			   $this->collTaloesExtrass = array();
			} else {

				$criteria->add(TaloesExtrasPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(TaloesExtrasPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(TaloesExtrasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				TaloesExtrasPeer::addSelectColumns($criteria);
				$this->collTaloesExtrass = TaloesExtrasPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TaloesExtrasPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(TaloesExtrasPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(TaloesExtrasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				TaloesExtrasPeer::addSelectColumns($criteria);
				if (!isset($this->lastTaloesExtrasCriteria) || !$this->lastTaloesExtrasCriteria->equals($criteria)) {
					$this->collTaloesExtrass = TaloesExtrasPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTaloesExtrasCriteria = $criteria;
		return $this->collTaloesExtrass;
	}

	/**
	 * Returns the number of related TaloesExtras objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TaloesExtras objects.
	 * @throws     PropelException
	 */
	public function countTaloesExtrass(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTaloesExtrass === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TaloesExtrasPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(TaloesExtrasPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(TaloesExtrasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = TaloesExtrasPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TaloesExtrasPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(TaloesExtrasPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(TaloesExtrasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastTaloesExtrasCriteria) || !$this->lastTaloesExtrasCriteria->equals($criteria)) {
					$count = TaloesExtrasPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTaloesExtrass);
				}
			} else {
				$count = count($this->collTaloesExtrass);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TaloesExtras object to this object
	 * through the TaloesExtras foreign key attribute.
	 *
	 * @param      TaloesExtras $l TaloesExtras
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTaloesExtras(TaloesExtras $l)
	{
		if ($this->collTaloesExtrass === null) {
			$this->initTaloesExtrass();
		}
		if (!in_array($l, $this->collTaloesExtrass, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTaloesExtrass, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related TaloesExtrass from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getTaloesExtrassJoinContasExtraOrc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTaloesExtrass === null) {
			if ($this->isNew()) {
				$this->collTaloesExtrass = array();
			} else {

				$criteria->add(TaloesExtrasPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(TaloesExtrasPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(TaloesExtrasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collTaloesExtrass = TaloesExtrasPeer::doSelectJoinContasExtraOrc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TaloesExtrasPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(TaloesExtrasPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(TaloesExtrasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastTaloesExtrasCriteria) || !$this->lastTaloesExtrasCriteria->equals($criteria)) {
				$this->collTaloesExtrass = TaloesExtrasPeer::doSelectJoinContasExtraOrc($criteria, $con, $join_behavior);
			}
		}
		$this->lastTaloesExtrasCriteria = $criteria;

		return $this->collTaloesExtrass;
	}

	/**
	 * Clears out the collUnidOrcUgs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUnidOrcUgs()
	 */
	public function clearUnidOrcUgs()
	{
		$this->collUnidOrcUgs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUnidOrcUgs collection (array).
	 *
	 * By default this just sets the collUnidOrcUgs collection to an empty array (like clearcollUnidOrcUgs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUnidOrcUgs()
	{
		$this->collUnidOrcUgs = array();
	}

	/**
	 * Gets an array of UnidOrcUg objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related UnidOrcUgs from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UnidOrcUg[]
	 * @throws     PropelException
	 */
	public function getUnidOrcUgs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUnidOrcUgs === null) {
			if ($this->isNew()) {
			   $this->collUnidOrcUgs = array();
			} else {

				$criteria->add(UnidOrcUgPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(UnidOrcUgPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(UnidOrcUgPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(UnidOrcUgPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				UnidOrcUgPeer::addSelectColumns($criteria);
				$this->collUnidOrcUgs = UnidOrcUgPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UnidOrcUgPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(UnidOrcUgPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(UnidOrcUgPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(UnidOrcUgPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				UnidOrcUgPeer::addSelectColumns($criteria);
				if (!isset($this->lastUnidOrcUgCriteria) || !$this->lastUnidOrcUgCriteria->equals($criteria)) {
					$this->collUnidOrcUgs = UnidOrcUgPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUnidOrcUgCriteria = $criteria;
		return $this->collUnidOrcUgs;
	}

	/**
	 * Returns the number of related UnidOrcUg objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UnidOrcUg objects.
	 * @throws     PropelException
	 */
	public function countUnidOrcUgs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUnidOrcUgs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UnidOrcUgPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(UnidOrcUgPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(UnidOrcUgPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(UnidOrcUgPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = UnidOrcUgPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UnidOrcUgPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(UnidOrcUgPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(UnidOrcUgPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(UnidOrcUgPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastUnidOrcUgCriteria) || !$this->lastUnidOrcUgCriteria->equals($criteria)) {
					$count = UnidOrcUgPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUnidOrcUgs);
				}
			} else {
				$count = count($this->collUnidOrcUgs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UnidOrcUg object to this object
	 * through the UnidOrcUg foreign key attribute.
	 *
	 * @param      UnidOrcUg $l UnidOrcUg
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUnidOrcUg(UnidOrcUg $l)
	{
		if ($this->collUnidOrcUgs === null) {
			$this->initUnidOrcUgs();
		}
		if (!in_array($l, $this->collUnidOrcUgs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUnidOrcUgs, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related UnidOrcUgs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getUnidOrcUgsJoinUnidGestoras($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUnidOrcUgs === null) {
			if ($this->isNew()) {
				$this->collUnidOrcUgs = array();
			} else {

				$criteria->add(UnidOrcUgPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(UnidOrcUgPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(UnidOrcUgPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(UnidOrcUgPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collUnidOrcUgs = UnidOrcUgPeer::doSelectJoinUnidGestoras($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UnidOrcUgPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(UnidOrcUgPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(UnidOrcUgPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(UnidOrcUgPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastUnidOrcUgCriteria) || !$this->lastUnidOrcUgCriteria->equals($criteria)) {
				$this->collUnidOrcUgs = UnidOrcUgPeer::doSelectJoinUnidGestoras($criteria, $con, $join_behavior);
			}
		}
		$this->lastUnidOrcUgCriteria = $criteria;

		return $this->collUnidOrcUgs;
	}

	/**
	 * Clears out the collVariacoesExtraOrcs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVariacoesExtraOrcs()
	 */
	public function clearVariacoesExtraOrcs()
	{
		$this->collVariacoesExtraOrcs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVariacoesExtraOrcs collection (array).
	 *
	 * By default this just sets the collVariacoesExtraOrcs collection to an empty array (like clearcollVariacoesExtraOrcs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVariacoesExtraOrcs()
	{
		$this->collVariacoesExtraOrcs = array();
	}

	/**
	 * Gets an array of VariacoesExtraOrc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias has previously been saved, it will retrieve
	 * related VariacoesExtraOrcs from storage. If this UnidadesOrcamentarias is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array VariacoesExtraOrc[]
	 * @throws     PropelException
	 */
	public function getVariacoesExtraOrcs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVariacoesExtraOrcs === null) {
			if ($this->isNew()) {
			   $this->collVariacoesExtraOrcs = array();
			} else {

				$criteria->add(VariacoesExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(VariacoesExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(VariacoesExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				VariacoesExtraOrcPeer::addSelectColumns($criteria);
				$this->collVariacoesExtraOrcs = VariacoesExtraOrcPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VariacoesExtraOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(VariacoesExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(VariacoesExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				VariacoesExtraOrcPeer::addSelectColumns($criteria);
				if (!isset($this->lastVariacoesExtraOrcCriteria) || !$this->lastVariacoesExtraOrcCriteria->equals($criteria)) {
					$this->collVariacoesExtraOrcs = VariacoesExtraOrcPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVariacoesExtraOrcCriteria = $criteria;
		return $this->collVariacoesExtraOrcs;
	}

	/**
	 * Returns the number of related VariacoesExtraOrc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related VariacoesExtraOrc objects.
	 * @throws     PropelException
	 */
	public function countVariacoesExtraOrcs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVariacoesExtraOrcs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VariacoesExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(VariacoesExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(VariacoesExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = VariacoesExtraOrcPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VariacoesExtraOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(VariacoesExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(VariacoesExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastVariacoesExtraOrcCriteria) || !$this->lastVariacoesExtraOrcCriteria->equals($criteria)) {
					$count = VariacoesExtraOrcPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collVariacoesExtraOrcs);
				}
			} else {
				$count = count($this->collVariacoesExtraOrcs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a VariacoesExtraOrc object to this object
	 * through the VariacoesExtraOrc foreign key attribute.
	 *
	 * @param      VariacoesExtraOrc $l VariacoesExtraOrc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVariacoesExtraOrc(VariacoesExtraOrc $l)
	{
		if ($this->collVariacoesExtraOrcs === null) {
			$this->initVariacoesExtraOrcs();
		}
		if (!in_array($l, $this->collVariacoesExtraOrcs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVariacoesExtraOrcs, $l);
			$l->setUnidadesOrcamentarias($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UnidadesOrcamentarias is new, it will return
	 * an empty collection; or if this UnidadesOrcamentarias has previously
	 * been saved, it will retrieve related VariacoesExtraOrcs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UnidadesOrcamentarias.
	 */
	public function getVariacoesExtraOrcsJoinContasExtraOrc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVariacoesExtraOrcs === null) {
			if ($this->isNew()) {
				$this->collVariacoesExtraOrcs = array();
			} else {

				$criteria->add(VariacoesExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(VariacoesExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(VariacoesExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$this->collVariacoesExtraOrcs = VariacoesExtraOrcPeer::doSelectJoinContasExtraOrc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VariacoesExtraOrcPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(VariacoesExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(VariacoesExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			if (!isset($this->lastVariacoesExtraOrcCriteria) || !$this->lastVariacoesExtraOrcCriteria->equals($criteria)) {
				$this->collVariacoesExtraOrcs = VariacoesExtraOrcPeer::doSelectJoinContasExtraOrc($criteria, $con, $join_behavior);
			}
		}
		$this->lastVariacoesExtraOrcCriteria = $criteria;

		return $this->collVariacoesExtraOrcs;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collBalDespExtOrcs) {
				foreach ((array) $this->collBalDespExtOrcs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collBalDespExtraOrcs) {
				foreach ((array) $this->collBalDespExtraOrcs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collBalRecExtOrcs) {
				foreach ((array) $this->collBalRecExtOrcs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collBalRecExtraOrcs) {
				foreach ((array) $this->collBalRecExtraOrcs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collContasBancariass) {
				foreach ((array) $this->collContasBancariass as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDespesasExtraOrcs) {
				foreach ((array) $this->collDespesasExtraOrcs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFolhasPagamentoss) {
				foreach ((array) $this->collFolhasPagamentoss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collGestoresUnidOrcs) {
				foreach ((array) $this->collGestoresUnidOrcs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNotasEmpenhoss) {
				foreach ((array) $this->collNotasEmpenhoss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collOrcDespCatEcos) {
				foreach ((array) $this->collOrcDespCatEcos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collOrcDespProjAtivs) {
				foreach ((array) $this->collOrcDespProjAtivs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collOrcRecCatEcos) {
				foreach ((array) $this->collOrcRecCatEcos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collServidoress) {
				foreach ((array) $this->collServidoress as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collServidoresMunicipaiss) {
				foreach ((array) $this->collServidoresMunicipaiss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collServidoresMunicipaisTemps) {
				foreach ((array) $this->collServidoresMunicipaisTemps as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTaloesExtrass) {
				foreach ((array) $this->collTaloesExtrass as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUnidOrcUgs) {
				foreach ((array) $this->collUnidOrcUgs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVariacoesExtraOrcs) {
				foreach ((array) $this->collVariacoesExtraOrcs as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collBalDespExtOrcs = null;
		$this->collBalDespExtraOrcs = null;
		$this->collBalRecExtOrcs = null;
		$this->collBalRecExtraOrcs = null;
		$this->collContasBancariass = null;
		$this->collDespesasExtraOrcs = null;
		$this->collFolhasPagamentoss = null;
		$this->collGestoresUnidOrcs = null;
		$this->collNotasEmpenhoss = null;
		$this->collOrcDespCatEcos = null;
		$this->collOrcDespProjAtivs = null;
		$this->collOrcRecCatEcos = null;
		$this->collServidoress = null;
		$this->collServidoresMunicipaiss = null;
		$this->collServidoresMunicipaisTemps = null;
		$this->collTaloesExtrass = null;
		$this->collUnidOrcUgs = null;
		$this->collVariacoesExtraOrcs = null;
			$this->aOrgaos = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseUnidadesOrcamentarias:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseUnidadesOrcamentarias::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseUnidadesOrcamentarias
