<?php

/**
 * Base class that represents a row from the 'DESPESAS_EXTRA_ORC' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Thu Jul 15 18:22:48 2010
 *
 * @package    lib.model.om
 */
abstract class BaseDespesasExtraOrc extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        DespesasExtraOrcPeer
	 */
	protected static $peer;

	/**
	 * The value for the cd_municipio field.
	 * @var        string
	 */
	protected $cd_municipio;

	/**
	 * The value for the dt_versao_orc field.
	 * @var        int
	 */
	protected $dt_versao_orc;

	/**
	 * The value for the cd_orgao field.
	 * @var        string
	 */
	protected $cd_orgao;

	/**
	 * The value for the cd_unid_orc field.
	 * @var        string
	 */
	protected $cd_unid_orc;

	/**
	 * The value for the cd_conta_ctx field.
	 * @var        int
	 */
	protected $cd_conta_ctx;

	/**
	 * The value for the nu_banco_cb field.
	 * @var        string
	 */
	protected $nu_banco_cb;

	/**
	 * The value for the nu_agencia_cb field.
	 * @var        string
	 */
	protected $nu_agencia_cb;

	/**
	 * The value for the nu_conta_corrente_cb field.
	 * @var        string
	 */
	protected $nu_conta_corrente_cb;

	/**
	 * The value for the nu_docdesp_xd field.
	 * @var        string
	 */
	protected $nu_docdesp_xd;

	/**
	 * The value for the dt_ref_xd field.
	 * @var        int
	 */
	protected $dt_ref_xd;

	/**
	 * The value for the nu_doc_caixa_xd field.
	 * @var        string
	 */
	protected $nu_doc_caixa_xd;

	/**
	 * The value for the dt_emissao_xd field.
	 * @var        string
	 */
	protected $dt_emissao_xd;

	/**
	 * The value for the vl_docdesp_xd field.
	 * @var        string
	 */
	protected $vl_docdesp_xd;

	/**
	 * The value for the vl_deducao_xd field.
	 * @var        string
	 */
	protected $vl_deducao_xd;

	/**
	 * The value for the tp_docdesp_xd field.
	 * @var        int
	 */
	protected $tp_docdesp_xd;

	/**
	 * The value for the st_estornado_xd field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $st_estornado_xd;

	/**
	 * @var        UnidadesOrcamentarias
	 */
	protected $aUnidadesOrcamentarias;

	/**
	 * @var        ContasExtraOrc
	 */
	protected $aContasExtraOrc;

	/**
	 * @var        array EstornosDespExtra[] Collection to store aggregation of EstornosDespExtra objects.
	 */
	protected $collEstornosDespExtras;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEstornosDespExtras.
	 */
	private $lastEstornosDespExtraCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'DespesasExtraOrcPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->st_estornado_xd = 0;
	}

	/**
	 * Initializes internal state of BaseDespesasExtraOrc object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [cd_municipio] column value.
	 * 
	 * @return     string
	 */
	public function getCdMunicipio()
	{
		return $this->cd_municipio;
	}

	/**
	 * Get the [dt_versao_orc] column value.
	 * 
	 * @return     int
	 */
	public function getDtVersaoOrc()
	{
		return $this->dt_versao_orc;
	}

	/**
	 * Get the [cd_orgao] column value.
	 * 
	 * @return     string
	 */
	public function getCdOrgao()
	{
		return $this->cd_orgao;
	}

	/**
	 * Get the [cd_unid_orc] column value.
	 * 
	 * @return     string
	 */
	public function getCdUnidOrc()
	{
		return $this->cd_unid_orc;
	}

	/**
	 * Get the [cd_conta_ctx] column value.
	 * 
	 * @return     int
	 */
	public function getCdContaCtx()
	{
		return $this->cd_conta_ctx;
	}

	/**
	 * Get the [nu_banco_cb] column value.
	 * 
	 * @return     string
	 */
	public function getNuBancoCb()
	{
		return $this->nu_banco_cb;
	}

	/**
	 * Get the [nu_agencia_cb] column value.
	 * 
	 * @return     string
	 */
	public function getNuAgenciaCb()
	{
		return $this->nu_agencia_cb;
	}

	/**
	 * Get the [nu_conta_corrente_cb] column value.
	 * 
	 * @return     string
	 */
	public function getNuContaCorrenteCb()
	{
		return $this->nu_conta_corrente_cb;
	}

	/**
	 * Get the [nu_docdesp_xd] column value.
	 * 
	 * @return     string
	 */
	public function getNuDocdespXd()
	{
		return $this->nu_docdesp_xd;
	}

	/**
	 * Get the [dt_ref_xd] column value.
	 * 
	 * @return     int
	 */
	public function getDtRefXd()
	{
		return $this->dt_ref_xd;
	}

	/**
	 * Get the [nu_doc_caixa_xd] column value.
	 * 
	 * @return     string
	 */
	public function getNuDocCaixaXd()
	{
		return $this->nu_doc_caixa_xd;
	}

	/**
	 * Get the [optionally formatted] temporal [dt_emissao_xd] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or MssqlDateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtEmissaoXd($format = 'Y-m-d H:i:s')
	{
		if ($this->dt_emissao_xd === null) {
			return null;
		}



		try {
			$dt = new MssqlDateTime($this->dt_emissao_xd);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to MssqlDateTime: " . var_export($this->dt_emissao_xd, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a MssqlDateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [vl_docdesp_xd] column value.
	 * 
	 * @return     string
	 */
	public function getVlDocdespXd()
	{
		return $this->vl_docdesp_xd;
	}

	/**
	 * Get the [vl_deducao_xd] column value.
	 * 
	 * @return     string
	 */
	public function getVlDeducaoXd()
	{
		return $this->vl_deducao_xd;
	}

	/**
	 * Get the [tp_docdesp_xd] column value.
	 * 
	 * @return     int
	 */
	public function getTpDocdespXd()
	{
		return $this->tp_docdesp_xd;
	}

	/**
	 * Get the [st_estornado_xd] column value.
	 * 
	 * @return     int
	 */
	public function getStEstornadoXd()
	{
		return $this->st_estornado_xd;
	}

	/**
	 * Set the value of [cd_municipio] column.
	 * 
	 * @param      string $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setCdMunicipio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_municipio !== $v) {
			$this->cd_municipio = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::CD_MUNICIPIO;
		}

		if ($this->aContasExtraOrc !== null && $this->aContasExtraOrc->getCdMunicipio() !== $v) {
			$this->aContasExtraOrc = null;
		}

		return $this;
	} // setCdMunicipio()

	/**
	 * Set the value of [dt_versao_orc] column.
	 * 
	 * @param      int $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setDtVersaoOrc($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->dt_versao_orc !== $v) {
			$this->dt_versao_orc = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::DT_VERSAO_ORC;
		}

		if ($this->aUnidadesOrcamentarias !== null && $this->aUnidadesOrcamentarias->getDtVersaoOrc() !== $v) {
			$this->aUnidadesOrcamentarias = null;
		}

		if ($this->aContasExtraOrc !== null && $this->aContasExtraOrc->getDtVersaoOrc() !== $v) {
			$this->aContasExtraOrc = null;
		}

		return $this;
	} // setDtVersaoOrc()

	/**
	 * Set the value of [cd_orgao] column.
	 * 
	 * @param      string $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setCdOrgao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_orgao !== $v) {
			$this->cd_orgao = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::CD_ORGAO;
		}

		if ($this->aUnidadesOrcamentarias !== null && $this->aUnidadesOrcamentarias->getCdOrgao() !== $v) {
			$this->aUnidadesOrcamentarias = null;
		}

		return $this;
	} // setCdOrgao()

	/**
	 * Set the value of [cd_unid_orc] column.
	 * 
	 * @param      string $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setCdUnidOrc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_unid_orc !== $v) {
			$this->cd_unid_orc = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::CD_UNID_ORC;
		}

		if ($this->aUnidadesOrcamentarias !== null && $this->aUnidadesOrcamentarias->getCdUnidOrc() !== $v) {
			$this->aUnidadesOrcamentarias = null;
		}

		return $this;
	} // setCdUnidOrc()

	/**
	 * Set the value of [cd_conta_ctx] column.
	 * 
	 * @param      int $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setCdContaCtx($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cd_conta_ctx !== $v) {
			$this->cd_conta_ctx = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::CD_CONTA_CTX;
		}

		if ($this->aContasExtraOrc !== null && $this->aContasExtraOrc->getCdContaCtx() !== $v) {
			$this->aContasExtraOrc = null;
		}

		return $this;
	} // setCdContaCtx()

	/**
	 * Set the value of [nu_banco_cb] column.
	 * 
	 * @param      string $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setNuBancoCb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_banco_cb !== $v) {
			$this->nu_banco_cb = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::NU_BANCO_CB;
		}

		return $this;
	} // setNuBancoCb()

	/**
	 * Set the value of [nu_agencia_cb] column.
	 * 
	 * @param      string $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setNuAgenciaCb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_agencia_cb !== $v) {
			$this->nu_agencia_cb = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::NU_AGENCIA_CB;
		}

		return $this;
	} // setNuAgenciaCb()

	/**
	 * Set the value of [nu_conta_corrente_cb] column.
	 * 
	 * @param      string $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setNuContaCorrenteCb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_conta_corrente_cb !== $v) {
			$this->nu_conta_corrente_cb = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::NU_CONTA_CORRENTE_CB;
		}

		return $this;
	} // setNuContaCorrenteCb()

	/**
	 * Set the value of [nu_docdesp_xd] column.
	 * 
	 * @param      string $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setNuDocdespXd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_docdesp_xd !== $v) {
			$this->nu_docdesp_xd = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::NU_DOCDESP_XD;
		}

		return $this;
	} // setNuDocdespXd()

	/**
	 * Set the value of [dt_ref_xd] column.
	 * 
	 * @param      int $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setDtRefXd($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->dt_ref_xd !== $v) {
			$this->dt_ref_xd = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::DT_REF_XD;
		}

		return $this;
	} // setDtRefXd()

	/**
	 * Set the value of [nu_doc_caixa_xd] column.
	 * 
	 * @param      string $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setNuDocCaixaXd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_doc_caixa_xd !== $v) {
			$this->nu_doc_caixa_xd = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::NU_DOC_CAIXA_XD;
		}

		return $this;
	} // setNuDocCaixaXd()

	/**
	 * Sets the value of [dt_emissao_xd] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setDtEmissaoXd($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new MssqlDateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new MssqlDateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_emissao_xd !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_emissao_xd !== null && $tmpDt = new MssqlDateTime($this->dt_emissao_xd)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_emissao_xd = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = DespesasExtraOrcPeer::DT_EMISSAO_XD;
			}
		} // if either are not null

		return $this;
	} // setDtEmissaoXd()

	/**
	 * Set the value of [vl_docdesp_xd] column.
	 * 
	 * @param      string $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setVlDocdespXd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vl_docdesp_xd !== $v) {
			$this->vl_docdesp_xd = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::VL_DOCDESP_XD;
		}

		return $this;
	} // setVlDocdespXd()

	/**
	 * Set the value of [vl_deducao_xd] column.
	 * 
	 * @param      string $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setVlDeducaoXd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vl_deducao_xd !== $v) {
			$this->vl_deducao_xd = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::VL_DEDUCAO_XD;
		}

		return $this;
	} // setVlDeducaoXd()

	/**
	 * Set the value of [tp_docdesp_xd] column.
	 * 
	 * @param      int $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setTpDocdespXd($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tp_docdesp_xd !== $v) {
			$this->tp_docdesp_xd = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::TP_DOCDESP_XD;
		}

		return $this;
	} // setTpDocdespXd()

	/**
	 * Set the value of [st_estornado_xd] column.
	 * 
	 * @param      int $v new value
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 */
	public function setStEstornadoXd($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->st_estornado_xd !== $v || $this->isNew()) {
			$this->st_estornado_xd = $v;
			$this->modifiedColumns[] = DespesasExtraOrcPeer::ST_ESTORNADO_XD;
		}

		return $this;
	} // setStEstornadoXd()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->st_estornado_xd !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->cd_municipio = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->dt_versao_orc = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->cd_orgao = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->cd_unid_orc = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->cd_conta_ctx = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->nu_banco_cb = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->nu_agencia_cb = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->nu_conta_corrente_cb = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->nu_docdesp_xd = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->dt_ref_xd = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->nu_doc_caixa_xd = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->dt_emissao_xd = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->vl_docdesp_xd = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->vl_deducao_xd = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->tp_docdesp_xd = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->st_estornado_xd = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 16; // 16 = DespesasExtraOrcPeer::NUM_COLUMNS - DespesasExtraOrcPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating DespesasExtraOrc object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aContasExtraOrc !== null && $this->cd_municipio !== $this->aContasExtraOrc->getCdMunicipio()) {
			$this->aContasExtraOrc = null;
		}
		if ($this->aUnidadesOrcamentarias !== null && $this->dt_versao_orc !== $this->aUnidadesOrcamentarias->getDtVersaoOrc()) {
			$this->aUnidadesOrcamentarias = null;
		}
		if ($this->aContasExtraOrc !== null && $this->dt_versao_orc !== $this->aContasExtraOrc->getDtVersaoOrc()) {
			$this->aContasExtraOrc = null;
		}
		if ($this->aUnidadesOrcamentarias !== null && $this->cd_orgao !== $this->aUnidadesOrcamentarias->getCdOrgao()) {
			$this->aUnidadesOrcamentarias = null;
		}
		if ($this->aUnidadesOrcamentarias !== null && $this->cd_unid_orc !== $this->aUnidadesOrcamentarias->getCdUnidOrc()) {
			$this->aUnidadesOrcamentarias = null;
		}
		if ($this->aContasExtraOrc !== null && $this->cd_conta_ctx !== $this->aContasExtraOrc->getCdContaCtx()) {
			$this->aContasExtraOrc = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(DespesasExtraOrcPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = DespesasExtraOrcPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aUnidadesOrcamentarias = null;
			$this->aContasExtraOrc = null;
			$this->collEstornosDespExtras = null;
			$this->lastEstornosDespExtraCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(DespesasExtraOrcPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseDespesasExtraOrc:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				DespesasExtraOrcPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseDespesasExtraOrc:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(DespesasExtraOrcPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseDespesasExtraOrc:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseDespesasExtraOrc:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				DespesasExtraOrcPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUnidadesOrcamentarias !== null) {
				if ($this->aUnidadesOrcamentarias->isModified() || $this->aUnidadesOrcamentarias->isNew()) {
					$affectedRows += $this->aUnidadesOrcamentarias->save($con);
				}
				$this->setUnidadesOrcamentarias($this->aUnidadesOrcamentarias);
			}

			if ($this->aContasExtraOrc !== null) {
				if ($this->aContasExtraOrc->isModified() || $this->aContasExtraOrc->isNew()) {
					$affectedRows += $this->aContasExtraOrc->save($con);
				}
				$this->setContasExtraOrc($this->aContasExtraOrc);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = DespesasExtraOrcPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += DespesasExtraOrcPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collEstornosDespExtras !== null) {
				foreach ($this->collEstornosDespExtras as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUnidadesOrcamentarias !== null) {
				if (!$this->aUnidadesOrcamentarias->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUnidadesOrcamentarias->getValidationFailures());
				}
			}

			if ($this->aContasExtraOrc !== null) {
				if (!$this->aContasExtraOrc->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aContasExtraOrc->getValidationFailures());
				}
			}


			if (($retval = DespesasExtraOrcPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collEstornosDespExtras !== null) {
					foreach ($this->collEstornosDespExtras as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = DespesasExtraOrcPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCdMunicipio();
				break;
			case 1:
				return $this->getDtVersaoOrc();
				break;
			case 2:
				return $this->getCdOrgao();
				break;
			case 3:
				return $this->getCdUnidOrc();
				break;
			case 4:
				return $this->getCdContaCtx();
				break;
			case 5:
				return $this->getNuBancoCb();
				break;
			case 6:
				return $this->getNuAgenciaCb();
				break;
			case 7:
				return $this->getNuContaCorrenteCb();
				break;
			case 8:
				return $this->getNuDocdespXd();
				break;
			case 9:
				return $this->getDtRefXd();
				break;
			case 10:
				return $this->getNuDocCaixaXd();
				break;
			case 11:
				return $this->getDtEmissaoXd();
				break;
			case 12:
				return $this->getVlDocdespXd();
				break;
			case 13:
				return $this->getVlDeducaoXd();
				break;
			case 14:
				return $this->getTpDocdespXd();
				break;
			case 15:
				return $this->getStEstornadoXd();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = DespesasExtraOrcPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCdMunicipio(),
			$keys[1] => $this->getDtVersaoOrc(),
			$keys[2] => $this->getCdOrgao(),
			$keys[3] => $this->getCdUnidOrc(),
			$keys[4] => $this->getCdContaCtx(),
			$keys[5] => $this->getNuBancoCb(),
			$keys[6] => $this->getNuAgenciaCb(),
			$keys[7] => $this->getNuContaCorrenteCb(),
			$keys[8] => $this->getNuDocdespXd(),
			$keys[9] => $this->getDtRefXd(),
			$keys[10] => $this->getNuDocCaixaXd(),
			$keys[11] => $this->getDtEmissaoXd(),
			$keys[12] => $this->getVlDocdespXd(),
			$keys[13] => $this->getVlDeducaoXd(),
			$keys[14] => $this->getTpDocdespXd(),
			$keys[15] => $this->getStEstornadoXd(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = DespesasExtraOrcPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCdMunicipio($value);
				break;
			case 1:
				$this->setDtVersaoOrc($value);
				break;
			case 2:
				$this->setCdOrgao($value);
				break;
			case 3:
				$this->setCdUnidOrc($value);
				break;
			case 4:
				$this->setCdContaCtx($value);
				break;
			case 5:
				$this->setNuBancoCb($value);
				break;
			case 6:
				$this->setNuAgenciaCb($value);
				break;
			case 7:
				$this->setNuContaCorrenteCb($value);
				break;
			case 8:
				$this->setNuDocdespXd($value);
				break;
			case 9:
				$this->setDtRefXd($value);
				break;
			case 10:
				$this->setNuDocCaixaXd($value);
				break;
			case 11:
				$this->setDtEmissaoXd($value);
				break;
			case 12:
				$this->setVlDocdespXd($value);
				break;
			case 13:
				$this->setVlDeducaoXd($value);
				break;
			case 14:
				$this->setTpDocdespXd($value);
				break;
			case 15:
				$this->setStEstornadoXd($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = DespesasExtraOrcPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCdMunicipio($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDtVersaoOrc($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCdOrgao($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCdUnidOrc($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCdContaCtx($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setNuBancoCb($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setNuAgenciaCb($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setNuContaCorrenteCb($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setNuDocdespXd($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setDtRefXd($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setNuDocCaixaXd($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDtEmissaoXd($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setVlDocdespXd($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setVlDeducaoXd($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setTpDocdespXd($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setStEstornadoXd($arr[$keys[15]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(DespesasExtraOrcPeer::DATABASE_NAME);

		if ($this->isColumnModified(DespesasExtraOrcPeer::CD_MUNICIPIO)) $criteria->add(DespesasExtraOrcPeer::CD_MUNICIPIO, $this->cd_municipio);
		if ($this->isColumnModified(DespesasExtraOrcPeer::DT_VERSAO_ORC)) $criteria->add(DespesasExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
		if ($this->isColumnModified(DespesasExtraOrcPeer::CD_ORGAO)) $criteria->add(DespesasExtraOrcPeer::CD_ORGAO, $this->cd_orgao);
		if ($this->isColumnModified(DespesasExtraOrcPeer::CD_UNID_ORC)) $criteria->add(DespesasExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);
		if ($this->isColumnModified(DespesasExtraOrcPeer::CD_CONTA_CTX)) $criteria->add(DespesasExtraOrcPeer::CD_CONTA_CTX, $this->cd_conta_ctx);
		if ($this->isColumnModified(DespesasExtraOrcPeer::NU_BANCO_CB)) $criteria->add(DespesasExtraOrcPeer::NU_BANCO_CB, $this->nu_banco_cb);
		if ($this->isColumnModified(DespesasExtraOrcPeer::NU_AGENCIA_CB)) $criteria->add(DespesasExtraOrcPeer::NU_AGENCIA_CB, $this->nu_agencia_cb);
		if ($this->isColumnModified(DespesasExtraOrcPeer::NU_CONTA_CORRENTE_CB)) $criteria->add(DespesasExtraOrcPeer::NU_CONTA_CORRENTE_CB, $this->nu_conta_corrente_cb);
		if ($this->isColumnModified(DespesasExtraOrcPeer::NU_DOCDESP_XD)) $criteria->add(DespesasExtraOrcPeer::NU_DOCDESP_XD, $this->nu_docdesp_xd);
		if ($this->isColumnModified(DespesasExtraOrcPeer::DT_REF_XD)) $criteria->add(DespesasExtraOrcPeer::DT_REF_XD, $this->dt_ref_xd);
		if ($this->isColumnModified(DespesasExtraOrcPeer::NU_DOC_CAIXA_XD)) $criteria->add(DespesasExtraOrcPeer::NU_DOC_CAIXA_XD, $this->nu_doc_caixa_xd);
		if ($this->isColumnModified(DespesasExtraOrcPeer::DT_EMISSAO_XD)) $criteria->add(DespesasExtraOrcPeer::DT_EMISSAO_XD, $this->dt_emissao_xd);
		if ($this->isColumnModified(DespesasExtraOrcPeer::VL_DOCDESP_XD)) $criteria->add(DespesasExtraOrcPeer::VL_DOCDESP_XD, $this->vl_docdesp_xd);
		if ($this->isColumnModified(DespesasExtraOrcPeer::VL_DEDUCAO_XD)) $criteria->add(DespesasExtraOrcPeer::VL_DEDUCAO_XD, $this->vl_deducao_xd);
		if ($this->isColumnModified(DespesasExtraOrcPeer::TP_DOCDESP_XD)) $criteria->add(DespesasExtraOrcPeer::TP_DOCDESP_XD, $this->tp_docdesp_xd);
		if ($this->isColumnModified(DespesasExtraOrcPeer::ST_ESTORNADO_XD)) $criteria->add(DespesasExtraOrcPeer::ST_ESTORNADO_XD, $this->st_estornado_xd);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(DespesasExtraOrcPeer::DATABASE_NAME);

		$criteria->add(DespesasExtraOrcPeer::CD_MUNICIPIO, $this->cd_municipio);
		$criteria->add(DespesasExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
		$criteria->add(DespesasExtraOrcPeer::CD_ORGAO, $this->cd_orgao);
		$criteria->add(DespesasExtraOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);
		$criteria->add(DespesasExtraOrcPeer::CD_CONTA_CTX, $this->cd_conta_ctx);
		$criteria->add(DespesasExtraOrcPeer::NU_BANCO_CB, $this->nu_banco_cb);
		$criteria->add(DespesasExtraOrcPeer::NU_AGENCIA_CB, $this->nu_agencia_cb);
		$criteria->add(DespesasExtraOrcPeer::NU_CONTA_CORRENTE_CB, $this->nu_conta_corrente_cb);
		$criteria->add(DespesasExtraOrcPeer::NU_DOCDESP_XD, $this->nu_docdesp_xd);

		return $criteria;
	}

	/**
	 * Returns the composite primary key for this object.
	 * The array elements will be in same order as specified in XML.
	 * @return     array
	 */
	public function getPrimaryKey()
	{
		$pks = array();

		$pks[0] = $this->getCdMunicipio();

		$pks[1] = $this->getDtVersaoOrc();

		$pks[2] = $this->getCdOrgao();

		$pks[3] = $this->getCdUnidOrc();

		$pks[4] = $this->getCdContaCtx();

		$pks[5] = $this->getNuBancoCb();

		$pks[6] = $this->getNuAgenciaCb();

		$pks[7] = $this->getNuContaCorrenteCb();

		$pks[8] = $this->getNuDocdespXd();

		return $pks;
	}

	/**
	 * Set the [composite] primary key.
	 *
	 * @param      array $keys The elements of the composite key (order must match the order in XML file).
	 * @return     void
	 */
	public function setPrimaryKey($keys)
	{

		$this->setCdMunicipio($keys[0]);

		$this->setDtVersaoOrc($keys[1]);

		$this->setCdOrgao($keys[2]);

		$this->setCdUnidOrc($keys[3]);

		$this->setCdContaCtx($keys[4]);

		$this->setNuBancoCb($keys[5]);

		$this->setNuAgenciaCb($keys[6]);

		$this->setNuContaCorrenteCb($keys[7]);

		$this->setNuDocdespXd($keys[8]);

	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of DespesasExtraOrc (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCdMunicipio($this->cd_municipio);

		$copyObj->setDtVersaoOrc($this->dt_versao_orc);

		$copyObj->setCdOrgao($this->cd_orgao);

		$copyObj->setCdUnidOrc($this->cd_unid_orc);

		$copyObj->setCdContaCtx($this->cd_conta_ctx);

		$copyObj->setNuBancoCb($this->nu_banco_cb);

		$copyObj->setNuAgenciaCb($this->nu_agencia_cb);

		$copyObj->setNuContaCorrenteCb($this->nu_conta_corrente_cb);

		$copyObj->setNuDocdespXd($this->nu_docdesp_xd);

		$copyObj->setDtRefXd($this->dt_ref_xd);

		$copyObj->setNuDocCaixaXd($this->nu_doc_caixa_xd);

		$copyObj->setDtEmissaoXd($this->dt_emissao_xd);

		$copyObj->setVlDocdespXd($this->vl_docdesp_xd);

		$copyObj->setVlDeducaoXd($this->vl_deducao_xd);

		$copyObj->setTpDocdespXd($this->tp_docdesp_xd);

		$copyObj->setStEstornadoXd($this->st_estornado_xd);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getEstornosDespExtras() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEstornosDespExtra($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     DespesasExtraOrc Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     DespesasExtraOrcPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new DespesasExtraOrcPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a UnidadesOrcamentarias object.
	 *
	 * @param      UnidadesOrcamentarias $v
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUnidadesOrcamentarias(UnidadesOrcamentarias $v = null)
	{
		if ($v === null) {
			$this->setCdOrgao(NULL);
		} else {
			$this->setCdOrgao($v->getCdOrgao());
		}

		if ($v === null) {
			$this->setCdUnidOrc(NULL);
		} else {
			$this->setCdUnidOrc($v->getCdUnidOrc());
		}

		if ($v === null) {
			$this->setDtVersaoOrc(NULL);
		} else {
			$this->setDtVersaoOrc($v->getDtVersaoOrc());
		}

		$this->aUnidadesOrcamentarias = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the UnidadesOrcamentarias object, it will not be re-added.
		if ($v !== null) {
			$v->addDespesasExtraOrc($this);
		}

		return $this;
	}


	/**
	 * Get the associated UnidadesOrcamentarias object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     UnidadesOrcamentarias The associated UnidadesOrcamentarias object.
	 * @throws     PropelException
	 */
	public function getUnidadesOrcamentarias(PropelPDO $con = null)
	{
		if ($this->aUnidadesOrcamentarias === null && (($this->cd_orgao !== "" && $this->cd_orgao !== null) && ($this->cd_unid_orc !== "" && $this->cd_unid_orc !== null) && $this->dt_versao_orc !== null)) {
			$c = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
			$c->add(UnidadesOrcamentariasPeer::CD_ORGAO, $this->cd_orgao);
			$c->add(UnidadesOrcamentariasPeer::CD_UNID_ORC, $this->cd_unid_orc);
			$c->add(UnidadesOrcamentariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
			$this->aUnidadesOrcamentarias = UnidadesOrcamentariasPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUnidadesOrcamentarias->addDespesasExtraOrcs($this);
			 */
		}
		return $this->aUnidadesOrcamentarias;
	}

	/**
	 * Declares an association between this object and a ContasExtraOrc object.
	 *
	 * @param      ContasExtraOrc $v
	 * @return     DespesasExtraOrc The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setContasExtraOrc(ContasExtraOrc $v = null)
	{
		if ($v === null) {
			$this->setCdContaCtx(NULL);
		} else {
			$this->setCdContaCtx($v->getCdContaCtx());
		}

		if ($v === null) {
			$this->setCdMunicipio(NULL);
		} else {
			$this->setCdMunicipio($v->getCdMunicipio());
		}

		if ($v === null) {
			$this->setDtVersaoOrc(NULL);
		} else {
			$this->setDtVersaoOrc($v->getDtVersaoOrc());
		}

		$this->aContasExtraOrc = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the ContasExtraOrc object, it will not be re-added.
		if ($v !== null) {
			$v->addDespesasExtraOrc($this);
		}

		return $this;
	}


	/**
	 * Get the associated ContasExtraOrc object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     ContasExtraOrc The associated ContasExtraOrc object.
	 * @throws     PropelException
	 */
	public function getContasExtraOrc(PropelPDO $con = null)
	{
		if ($this->aContasExtraOrc === null && ($this->cd_conta_ctx !== null && ($this->cd_municipio !== "" && $this->cd_municipio !== null) && $this->dt_versao_orc !== null)) {
			$c = new Criteria(ContasExtraOrcPeer::DATABASE_NAME);
			$c->add(ContasExtraOrcPeer::CD_CONTA_CTX, $this->cd_conta_ctx);
			$c->add(ContasExtraOrcPeer::CD_MUNICIPIO, $this->cd_municipio);
			$c->add(ContasExtraOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
			$this->aContasExtraOrc = ContasExtraOrcPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aContasExtraOrc->addDespesasExtraOrcs($this);
			 */
		}
		return $this->aContasExtraOrc;
	}

	/**
	 * Clears out the collEstornosDespExtras collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEstornosDespExtras()
	 */
	public function clearEstornosDespExtras()
	{
		$this->collEstornosDespExtras = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEstornosDespExtras collection (array).
	 *
	 * By default this just sets the collEstornosDespExtras collection to an empty array (like clearcollEstornosDespExtras());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEstornosDespExtras()
	{
		$this->collEstornosDespExtras = array();
	}

	/**
	 * Gets an array of EstornosDespExtra objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this DespesasExtraOrc has previously been saved, it will retrieve
	 * related EstornosDespExtras from storage. If this DespesasExtraOrc is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EstornosDespExtra[]
	 * @throws     PropelException
	 */
	public function getEstornosDespExtras($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(DespesasExtraOrcPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEstornosDespExtras === null) {
			if ($this->isNew()) {
			   $this->collEstornosDespExtras = array();
			} else {

				$criteria->add(EstornosDespExtraPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(EstornosDespExtraPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(EstornosDespExtraPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(EstornosDespExtraPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(EstornosDespExtraPeer::NU_AGENCIA_CB, $this->nu_agencia_cb);

				$criteria->add(EstornosDespExtraPeer::NU_BANCO_CB, $this->nu_banco_cb);

				$criteria->add(EstornosDespExtraPeer::NU_CONTA_CORRENTE_CB, $this->nu_conta_corrente_cb);

				$criteria->add(EstornosDespExtraPeer::NU_DOCDESP_XD, $this->nu_docdesp_xd);

				EstornosDespExtraPeer::addSelectColumns($criteria);
				$this->collEstornosDespExtras = EstornosDespExtraPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EstornosDespExtraPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(EstornosDespExtraPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(EstornosDespExtraPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(EstornosDespExtraPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(EstornosDespExtraPeer::NU_AGENCIA_CB, $this->nu_agencia_cb);


				$criteria->add(EstornosDespExtraPeer::NU_BANCO_CB, $this->nu_banco_cb);


				$criteria->add(EstornosDespExtraPeer::NU_CONTA_CORRENTE_CB, $this->nu_conta_corrente_cb);


				$criteria->add(EstornosDespExtraPeer::NU_DOCDESP_XD, $this->nu_docdesp_xd);

				EstornosDespExtraPeer::addSelectColumns($criteria);
				if (!isset($this->lastEstornosDespExtraCriteria) || !$this->lastEstornosDespExtraCriteria->equals($criteria)) {
					$this->collEstornosDespExtras = EstornosDespExtraPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEstornosDespExtraCriteria = $criteria;
		return $this->collEstornosDespExtras;
	}

	/**
	 * Returns the number of related EstornosDespExtra objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EstornosDespExtra objects.
	 * @throws     PropelException
	 */
	public function countEstornosDespExtras(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(DespesasExtraOrcPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEstornosDespExtras === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EstornosDespExtraPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(EstornosDespExtraPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(EstornosDespExtraPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(EstornosDespExtraPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(EstornosDespExtraPeer::NU_AGENCIA_CB, $this->nu_agencia_cb);

				$criteria->add(EstornosDespExtraPeer::NU_BANCO_CB, $this->nu_banco_cb);

				$criteria->add(EstornosDespExtraPeer::NU_CONTA_CORRENTE_CB, $this->nu_conta_corrente_cb);

				$criteria->add(EstornosDespExtraPeer::NU_DOCDESP_XD, $this->nu_docdesp_xd);

				$count = EstornosDespExtraPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EstornosDespExtraPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(EstornosDespExtraPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(EstornosDespExtraPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(EstornosDespExtraPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(EstornosDespExtraPeer::NU_AGENCIA_CB, $this->nu_agencia_cb);


				$criteria->add(EstornosDespExtraPeer::NU_BANCO_CB, $this->nu_banco_cb);


				$criteria->add(EstornosDespExtraPeer::NU_CONTA_CORRENTE_CB, $this->nu_conta_corrente_cb);


				$criteria->add(EstornosDespExtraPeer::NU_DOCDESP_XD, $this->nu_docdesp_xd);

				if (!isset($this->lastEstornosDespExtraCriteria) || !$this->lastEstornosDespExtraCriteria->equals($criteria)) {
					$count = EstornosDespExtraPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEstornosDespExtras);
				}
			} else {
				$count = count($this->collEstornosDespExtras);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EstornosDespExtra object to this object
	 * through the EstornosDespExtra foreign key attribute.
	 *
	 * @param      EstornosDespExtra $l EstornosDespExtra
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEstornosDespExtra(EstornosDespExtra $l)
	{
		if ($this->collEstornosDespExtras === null) {
			$this->initEstornosDespExtras();
		}
		if (!in_array($l, $this->collEstornosDespExtras, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEstornosDespExtras, $l);
			$l->setDespesasExtraOrc($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collEstornosDespExtras) {
				foreach ((array) $this->collEstornosDespExtras as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collEstornosDespExtras = null;
			$this->aUnidadesOrcamentarias = null;
			$this->aContasExtraOrc = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseDespesasExtraOrc:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseDespesasExtraOrc::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseDespesasExtraOrc
