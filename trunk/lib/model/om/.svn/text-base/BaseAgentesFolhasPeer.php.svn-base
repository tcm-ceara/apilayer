<?php

/**
 * Base static class for performing query and update operations on the 'AGENTES_FOLHAS' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Thu Jul 15 18:22:31 2010
 *
 * @package    lib.model.om
 */
abstract class BaseAgentesFolhasPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'AGENTES_FOLHAS';

	/** the related Propel class for this table */
	const OM_CLASS = 'AgentesFolhas';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.AgentesFolhas';

	/** the related TableMap class for this table */
	const TM_CLASS = 'AgentesFolhasTableMap';
	
	/** The total number of columns. */
	const NUM_COLUMNS = 14;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the CD_MUNICIPIO field */
	const CD_MUNICIPIO = 'AGENTES_FOLHAS.CD_MUNICIPIO';

	/** the column name for the DT_VERSAO_ORC field */
	const DT_VERSAO_ORC = 'AGENTES_FOLHAS.DT_VERSAO_ORC';

	/** the column name for the CD_ORGAO field */
	const CD_ORGAO = 'AGENTES_FOLHAS.CD_ORGAO';

	/** the column name for the CD_UNID_ORC field */
	const CD_UNID_ORC = 'AGENTES_FOLHAS.CD_UNID_ORC';

	/** the column name for the DT_COMPET_FL field */
	const DT_COMPET_FL = 'AGENTES_FOLHAS.DT_COMPET_FL';

	/** the column name for the TP_FOLHA field */
	const TP_FOLHA = 'AGENTES_FOLHAS.TP_FOLHA';

	/** the column name for the DT_EMISSAO_FL field */
	const DT_EMISSAO_FL = 'AGENTES_FOLHAS.DT_EMISSAO_FL';

	/** the column name for the CD_CPF_SERV_MUNI field */
	const CD_CPF_SERV_MUNI = 'AGENTES_FOLHAS.CD_CPF_SERV_MUNI';

	/** the column name for the CD_INGRESSO field */
	const CD_INGRESSO = 'AGENTES_FOLHAS.CD_INGRESSO';

	/** the column name for the CD_VINCULO field */
	const CD_VINCULO = 'AGENTES_FOLHAS.CD_VINCULO';

	/** the column name for the NU_EXPEDIENTE_NO field */
	const NU_EXPEDIENTE_NO = 'AGENTES_FOLHAS.NU_EXPEDIENTE_NO';

	/** the column name for the CD_ITEM_IR field */
	const CD_ITEM_IR = 'AGENTES_FOLHAS.CD_ITEM_IR';

	/** the column name for the VL_ITEM_AF field */
	const VL_ITEM_AF = 'AGENTES_FOLHAS.VL_ITEM_AF';

	/** the column name for the TP_CLASSIFICACAO_AF field */
	const TP_CLASSIFICACAO_AF = 'AGENTES_FOLHAS.TP_CLASSIFICACAO_AF';

	/**
	 * An identiy map to hold any loaded instances of AgentesFolhas objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array AgentesFolhas[]
	 */
	public static $instances = array();


	// symfony behavior
	
	/**
	 * Indicates whether the current model includes I18N.
	 */
	const IS_I18N = false;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('CdMunicipio', 'DtVersaoOrc', 'CdOrgao', 'CdUnidOrc', 'DtCompetFl', 'TpFolha', 'DtEmissaoFl', 'CdCpfServMuni', 'CdIngresso', 'CdVinculo', 'NuExpedienteNo', 'CdItemIr', 'VlItemAf', 'TpClassificacaoAf', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('cdMunicipio', 'dtVersaoOrc', 'cdOrgao', 'cdUnidOrc', 'dtCompetFl', 'tpFolha', 'dtEmissaoFl', 'cdCpfServMuni', 'cdIngresso', 'cdVinculo', 'nuExpedienteNo', 'cdItemIr', 'vlItemAf', 'tpClassificacaoAf', ),
		BasePeer::TYPE_COLNAME => array (self::CD_MUNICIPIO, self::DT_VERSAO_ORC, self::CD_ORGAO, self::CD_UNID_ORC, self::DT_COMPET_FL, self::TP_FOLHA, self::DT_EMISSAO_FL, self::CD_CPF_SERV_MUNI, self::CD_INGRESSO, self::CD_VINCULO, self::NU_EXPEDIENTE_NO, self::CD_ITEM_IR, self::VL_ITEM_AF, self::TP_CLASSIFICACAO_AF, ),
		BasePeer::TYPE_FIELDNAME => array ('cd_municipio', 'dt_versao_orc', 'cd_orgao', 'cd_unid_orc', 'dt_compet_fl', 'tp_folha', 'dt_emissao_fl', 'cd_cpf_serv_muni', 'cd_ingresso', 'cd_vinculo', 'nu_expediente_no', 'cd_item_ir', 'vl_item_af', 'tp_classificacao_af', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('CdMunicipio' => 0, 'DtVersaoOrc' => 1, 'CdOrgao' => 2, 'CdUnidOrc' => 3, 'DtCompetFl' => 4, 'TpFolha' => 5, 'DtEmissaoFl' => 6, 'CdCpfServMuni' => 7, 'CdIngresso' => 8, 'CdVinculo' => 9, 'NuExpedienteNo' => 10, 'CdItemIr' => 11, 'VlItemAf' => 12, 'TpClassificacaoAf' => 13, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('cdMunicipio' => 0, 'dtVersaoOrc' => 1, 'cdOrgao' => 2, 'cdUnidOrc' => 3, 'dtCompetFl' => 4, 'tpFolha' => 5, 'dtEmissaoFl' => 6, 'cdCpfServMuni' => 7, 'cdIngresso' => 8, 'cdVinculo' => 9, 'nuExpedienteNo' => 10, 'cdItemIr' => 11, 'vlItemAf' => 12, 'tpClassificacaoAf' => 13, ),
		BasePeer::TYPE_COLNAME => array (self::CD_MUNICIPIO => 0, self::DT_VERSAO_ORC => 1, self::CD_ORGAO => 2, self::CD_UNID_ORC => 3, self::DT_COMPET_FL => 4, self::TP_FOLHA => 5, self::DT_EMISSAO_FL => 6, self::CD_CPF_SERV_MUNI => 7, self::CD_INGRESSO => 8, self::CD_VINCULO => 9, self::NU_EXPEDIENTE_NO => 10, self::CD_ITEM_IR => 11, self::VL_ITEM_AF => 12, self::TP_CLASSIFICACAO_AF => 13, ),
		BasePeer::TYPE_FIELDNAME => array ('cd_municipio' => 0, 'dt_versao_orc' => 1, 'cd_orgao' => 2, 'cd_unid_orc' => 3, 'dt_compet_fl' => 4, 'tp_folha' => 5, 'dt_emissao_fl' => 6, 'cd_cpf_serv_muni' => 7, 'cd_ingresso' => 8, 'cd_vinculo' => 9, 'nu_expediente_no' => 10, 'cd_item_ir' => 11, 'vl_item_af' => 12, 'tp_classificacao_af' => 13, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, )
	);

	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. AgentesFolhasPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(AgentesFolhasPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{
		$criteria->addSelectColumn(AgentesFolhasPeer::CD_MUNICIPIO);
		$criteria->addSelectColumn(AgentesFolhasPeer::DT_VERSAO_ORC);
		$criteria->addSelectColumn(AgentesFolhasPeer::CD_ORGAO);
		$criteria->addSelectColumn(AgentesFolhasPeer::CD_UNID_ORC);
		$criteria->addSelectColumn(AgentesFolhasPeer::DT_COMPET_FL);
		$criteria->addSelectColumn(AgentesFolhasPeer::TP_FOLHA);
		$criteria->addSelectColumn(AgentesFolhasPeer::DT_EMISSAO_FL);
		$criteria->addSelectColumn(AgentesFolhasPeer::CD_CPF_SERV_MUNI);
		$criteria->addSelectColumn(AgentesFolhasPeer::CD_INGRESSO);
		$criteria->addSelectColumn(AgentesFolhasPeer::CD_VINCULO);
		$criteria->addSelectColumn(AgentesFolhasPeer::NU_EXPEDIENTE_NO);
		$criteria->addSelectColumn(AgentesFolhasPeer::CD_ITEM_IR);
		$criteria->addSelectColumn(AgentesFolhasPeer::VL_ITEM_AF);
		$criteria->addSelectColumn(AgentesFolhasPeer::TP_CLASSIFICACAO_AF);
	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AgentesFolhasPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AgentesFolhasPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(AgentesFolhasPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $criteria, $con);
		}

		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     AgentesFolhas
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = AgentesFolhasPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return AgentesFolhasPeer::populateObjects(AgentesFolhasPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(AgentesFolhasPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			AgentesFolhasPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      AgentesFolhas $value A AgentesFolhas object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(AgentesFolhas $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = serialize(array((string) $obj->getCdMunicipio(), (string) $obj->getDtVersaoOrc(), (string) $obj->getCdOrgao(), (string) $obj->getCdUnidOrc(), (string) $obj->getDtCompetFl(), (string) $obj->getTpFolha(), (string) $obj->getDtEmissaoFl(), (string) $obj->getCdCpfServMuni(), (string) $obj->getCdIngresso(), (string) $obj->getCdVinculo(), (string) $obj->getNuExpedienteNo(), (string) $obj->getCdItemIr()));
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A AgentesFolhas object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof AgentesFolhas) {
				$key = serialize(array((string) $value->getCdMunicipio(), (string) $value->getDtVersaoOrc(), (string) $value->getCdOrgao(), (string) $value->getCdUnidOrc(), (string) $value->getDtCompetFl(), (string) $value->getTpFolha(), (string) $value->getDtEmissaoFl(), (string) $value->getCdCpfServMuni(), (string) $value->getCdIngresso(), (string) $value->getCdVinculo(), (string) $value->getNuExpedienteNo(), (string) $value->getCdItemIr()));
			} elseif (is_array($value) && count($value) === 12) {
				// assume we've been passed a primary key
				$key = serialize(array((string) $value[0], (string) $value[1], (string) $value[2], (string) $value[3], (string) $value[4], (string) $value[5], (string) $value[6], (string) $value[7], (string) $value[8], (string) $value[9], (string) $value[10], (string) $value[11]));
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or AgentesFolhas object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     AgentesFolhas Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Method to invalidate the instance pool of all tables related to AGENTES_FOLHAS
	 * by a foreign key with ON DELETE CASCADE
	 */
	public static function clearRelatedInstancePool()
	{
	}

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol] === null && $row[$startcol + 1] === null && $row[$startcol + 2] === null && $row[$startcol + 3] === null && $row[$startcol + 4] === null && $row[$startcol + 5] === null && $row[$startcol + 6] === null && $row[$startcol + 7] === null && $row[$startcol + 8] === null && $row[$startcol + 9] === null && $row[$startcol + 10] === null && $row[$startcol + 11] === null) {
			return null;
		}
		return serialize(array((string) $row[$startcol], (string) $row[$startcol + 1], (string) $row[$startcol + 2], (string) $row[$startcol + 3], (string) $row[$startcol + 4], (string) $row[$startcol + 5], (string) $row[$startcol + 6], (string) $row[$startcol + 7], (string) $row[$startcol + 8], (string) $row[$startcol + 9], (string) $row[$startcol + 10], (string) $row[$startcol + 11]));
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = AgentesFolhasPeer::getOMClass(false);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = AgentesFolhasPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = AgentesFolhasPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				AgentesFolhasPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related FolhasPagamentos table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinFolhasPagamentos(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AgentesFolhasPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AgentesFolhasPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AgentesFolhasPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addMultipleJoin(array(
        array(AgentesFolhasPeer::CD_ORGAO, FolhasPagamentosPeer::CD_ORGAO),
        array(AgentesFolhasPeer::CD_UNID_ORC, FolhasPagamentosPeer::CD_UNID_ORC),
        array(AgentesFolhasPeer::DT_COMPET_FL, FolhasPagamentosPeer::DT_COMPET_FL),
        array(AgentesFolhasPeer::DT_EMISSAO_FL, FolhasPagamentosPeer::DT_EMISSAO_FL),
        array(AgentesFolhasPeer::DT_VERSAO_ORC, FolhasPagamentosPeer::DT_VERSAO_ORC),
        array(AgentesFolhasPeer::TP_FOLHA, FolhasPagamentosPeer::TP_FOLHA),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related ConcessoesItens table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinConcessoesItens(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AgentesFolhasPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AgentesFolhasPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AgentesFolhasPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addMultipleJoin(array(
        array(AgentesFolhasPeer::CD_CPF_SERV_MUNI, ConcessoesItensPeer::CD_CPF_SERV_MUNI),
        array(AgentesFolhasPeer::CD_INGRESSO, ConcessoesItensPeer::CD_INGRESSO),
        array(AgentesFolhasPeer::CD_ITEM_IR, ConcessoesItensPeer::CD_ITEM_IR),
        array(AgentesFolhasPeer::CD_MUNICIPIO, ConcessoesItensPeer::CD_MUNICIPIO),
        array(AgentesFolhasPeer::CD_ORGAO, ConcessoesItensPeer::CD_ORGAO),
        array(AgentesFolhasPeer::CD_UNID_ORC, ConcessoesItensPeer::CD_UNID_ORC),
        array(AgentesFolhasPeer::CD_VINCULO, ConcessoesItensPeer::CD_VINCULO),
        array(AgentesFolhasPeer::DT_VERSAO_ORC, ConcessoesItensPeer::DT_VERSAO_ORC),
        array(AgentesFolhasPeer::NU_EXPEDIENTE_NO, ConcessoesItensPeer::NU_EXPEDIENTE_NO),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of AgentesFolhas objects pre-filled with their FolhasPagamentos objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AgentesFolhas objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinFolhasPagamentos(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AgentesFolhasPeer::addSelectColumns($criteria);
		$startcol = (AgentesFolhasPeer::NUM_COLUMNS - AgentesFolhasPeer::NUM_LAZY_LOAD_COLUMNS);
		FolhasPagamentosPeer::addSelectColumns($criteria);

		$criteria->addMultipleJoin(array(
        array(AgentesFolhasPeer::CD_ORGAO, FolhasPagamentosPeer::CD_ORGAO),
        array(AgentesFolhasPeer::CD_UNID_ORC, FolhasPagamentosPeer::CD_UNID_ORC),
        array(AgentesFolhasPeer::DT_COMPET_FL, FolhasPagamentosPeer::DT_COMPET_FL),
        array(AgentesFolhasPeer::DT_EMISSAO_FL, FolhasPagamentosPeer::DT_EMISSAO_FL),
        array(AgentesFolhasPeer::DT_VERSAO_ORC, FolhasPagamentosPeer::DT_VERSAO_ORC),
        array(AgentesFolhasPeer::TP_FOLHA, FolhasPagamentosPeer::TP_FOLHA),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AgentesFolhasPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AgentesFolhasPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = AgentesFolhasPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AgentesFolhasPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = FolhasPagamentosPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = FolhasPagamentosPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = FolhasPagamentosPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					FolhasPagamentosPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (AgentesFolhas) to $obj2 (FolhasPagamentos)
				$obj2->addAgentesFolhas($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AgentesFolhas objects pre-filled with their ConcessoesItens objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AgentesFolhas objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinConcessoesItens(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AgentesFolhasPeer::addSelectColumns($criteria);
		$startcol = (AgentesFolhasPeer::NUM_COLUMNS - AgentesFolhasPeer::NUM_LAZY_LOAD_COLUMNS);
		ConcessoesItensPeer::addSelectColumns($criteria);

		$criteria->addMultipleJoin(array(
        array(AgentesFolhasPeer::CD_CPF_SERV_MUNI, ConcessoesItensPeer::CD_CPF_SERV_MUNI),
        array(AgentesFolhasPeer::CD_INGRESSO, ConcessoesItensPeer::CD_INGRESSO),
        array(AgentesFolhasPeer::CD_ITEM_IR, ConcessoesItensPeer::CD_ITEM_IR),
        array(AgentesFolhasPeer::CD_MUNICIPIO, ConcessoesItensPeer::CD_MUNICIPIO),
        array(AgentesFolhasPeer::CD_ORGAO, ConcessoesItensPeer::CD_ORGAO),
        array(AgentesFolhasPeer::CD_UNID_ORC, ConcessoesItensPeer::CD_UNID_ORC),
        array(AgentesFolhasPeer::CD_VINCULO, ConcessoesItensPeer::CD_VINCULO),
        array(AgentesFolhasPeer::DT_VERSAO_ORC, ConcessoesItensPeer::DT_VERSAO_ORC),
        array(AgentesFolhasPeer::NU_EXPEDIENTE_NO, ConcessoesItensPeer::NU_EXPEDIENTE_NO),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AgentesFolhasPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AgentesFolhasPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = AgentesFolhasPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AgentesFolhasPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ConcessoesItensPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ConcessoesItensPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = ConcessoesItensPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ConcessoesItensPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (AgentesFolhas) to $obj2 (ConcessoesItens)
				$obj2->addAgentesFolhas($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AgentesFolhasPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AgentesFolhasPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AgentesFolhasPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addMultipleJoin(array(
        array(AgentesFolhasPeer::CD_ORGAO, FolhasPagamentosPeer::CD_ORGAO),
        array(AgentesFolhasPeer::CD_UNID_ORC, FolhasPagamentosPeer::CD_UNID_ORC),
        array(AgentesFolhasPeer::DT_COMPET_FL, FolhasPagamentosPeer::DT_COMPET_FL),
        array(AgentesFolhasPeer::DT_EMISSAO_FL, FolhasPagamentosPeer::DT_EMISSAO_FL),
        array(AgentesFolhasPeer::DT_VERSAO_ORC, FolhasPagamentosPeer::DT_VERSAO_ORC),
        array(AgentesFolhasPeer::TP_FOLHA, FolhasPagamentosPeer::TP_FOLHA),
      ), $join_behavior);

		$criteria->addMultipleJoin(array(
        array(AgentesFolhasPeer::CD_CPF_SERV_MUNI, ConcessoesItensPeer::CD_CPF_SERV_MUNI),
        array(AgentesFolhasPeer::CD_INGRESSO, ConcessoesItensPeer::CD_INGRESSO),
        array(AgentesFolhasPeer::CD_ITEM_IR, ConcessoesItensPeer::CD_ITEM_IR),
        array(AgentesFolhasPeer::CD_MUNICIPIO, ConcessoesItensPeer::CD_MUNICIPIO),
        array(AgentesFolhasPeer::CD_ORGAO, ConcessoesItensPeer::CD_ORGAO),
        array(AgentesFolhasPeer::CD_UNID_ORC, ConcessoesItensPeer::CD_UNID_ORC),
        array(AgentesFolhasPeer::CD_VINCULO, ConcessoesItensPeer::CD_VINCULO),
        array(AgentesFolhasPeer::DT_VERSAO_ORC, ConcessoesItensPeer::DT_VERSAO_ORC),
        array(AgentesFolhasPeer::NU_EXPEDIENTE_NO, ConcessoesItensPeer::NU_EXPEDIENTE_NO),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of AgentesFolhas objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AgentesFolhas objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AgentesFolhasPeer::addSelectColumns($criteria);
		$startcol2 = (AgentesFolhasPeer::NUM_COLUMNS - AgentesFolhasPeer::NUM_LAZY_LOAD_COLUMNS);

		FolhasPagamentosPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (FolhasPagamentosPeer::NUM_COLUMNS - FolhasPagamentosPeer::NUM_LAZY_LOAD_COLUMNS);

		ConcessoesItensPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (ConcessoesItensPeer::NUM_COLUMNS - ConcessoesItensPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addMultipleJoin(array(
        array(AgentesFolhasPeer::CD_ORGAO, FolhasPagamentosPeer::CD_ORGAO),
        array(AgentesFolhasPeer::CD_UNID_ORC, FolhasPagamentosPeer::CD_UNID_ORC),
        array(AgentesFolhasPeer::DT_COMPET_FL, FolhasPagamentosPeer::DT_COMPET_FL),
        array(AgentesFolhasPeer::DT_EMISSAO_FL, FolhasPagamentosPeer::DT_EMISSAO_FL),
        array(AgentesFolhasPeer::DT_VERSAO_ORC, FolhasPagamentosPeer::DT_VERSAO_ORC),
        array(AgentesFolhasPeer::TP_FOLHA, FolhasPagamentosPeer::TP_FOLHA),
      ), $join_behavior);

		$criteria->addMultipleJoin(array(
        array(AgentesFolhasPeer::CD_CPF_SERV_MUNI, ConcessoesItensPeer::CD_CPF_SERV_MUNI),
        array(AgentesFolhasPeer::CD_INGRESSO, ConcessoesItensPeer::CD_INGRESSO),
        array(AgentesFolhasPeer::CD_ITEM_IR, ConcessoesItensPeer::CD_ITEM_IR),
        array(AgentesFolhasPeer::CD_MUNICIPIO, ConcessoesItensPeer::CD_MUNICIPIO),
        array(AgentesFolhasPeer::CD_ORGAO, ConcessoesItensPeer::CD_ORGAO),
        array(AgentesFolhasPeer::CD_UNID_ORC, ConcessoesItensPeer::CD_UNID_ORC),
        array(AgentesFolhasPeer::CD_VINCULO, ConcessoesItensPeer::CD_VINCULO),
        array(AgentesFolhasPeer::DT_VERSAO_ORC, ConcessoesItensPeer::DT_VERSAO_ORC),
        array(AgentesFolhasPeer::NU_EXPEDIENTE_NO, ConcessoesItensPeer::NU_EXPEDIENTE_NO),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AgentesFolhasPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AgentesFolhasPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = AgentesFolhasPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AgentesFolhasPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined FolhasPagamentos rows

			$key2 = FolhasPagamentosPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = FolhasPagamentosPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = FolhasPagamentosPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					FolhasPagamentosPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (AgentesFolhas) to the collection in $obj2 (FolhasPagamentos)
				$obj2->addAgentesFolhas($obj1);
			} // if joined row not null

			// Add objects for joined ConcessoesItens rows

			$key3 = ConcessoesItensPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = ConcessoesItensPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = ConcessoesItensPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					ConcessoesItensPeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (AgentesFolhas) to the collection in $obj3 (ConcessoesItens)
				$obj3->addAgentesFolhas($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related FolhasPagamentos table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptFolhasPagamentos(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AgentesFolhasPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AgentesFolhasPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AgentesFolhasPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addMultipleJoin(array(
        array(AgentesFolhasPeer::CD_CPF_SERV_MUNI, ConcessoesItensPeer::CD_CPF_SERV_MUNI),
        array(AgentesFolhasPeer::CD_INGRESSO, ConcessoesItensPeer::CD_INGRESSO),
        array(AgentesFolhasPeer::CD_ITEM_IR, ConcessoesItensPeer::CD_ITEM_IR),
        array(AgentesFolhasPeer::CD_MUNICIPIO, ConcessoesItensPeer::CD_MUNICIPIO),
        array(AgentesFolhasPeer::CD_ORGAO, ConcessoesItensPeer::CD_ORGAO),
        array(AgentesFolhasPeer::CD_UNID_ORC, ConcessoesItensPeer::CD_UNID_ORC),
        array(AgentesFolhasPeer::CD_VINCULO, ConcessoesItensPeer::CD_VINCULO),
        array(AgentesFolhasPeer::DT_VERSAO_ORC, ConcessoesItensPeer::DT_VERSAO_ORC),
        array(AgentesFolhasPeer::NU_EXPEDIENTE_NO, ConcessoesItensPeer::NU_EXPEDIENTE_NO),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related ConcessoesItens table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptConcessoesItens(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AgentesFolhasPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AgentesFolhasPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AgentesFolhasPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addMultipleJoin(array(
        array(AgentesFolhasPeer::CD_ORGAO, FolhasPagamentosPeer::CD_ORGAO),
        array(AgentesFolhasPeer::CD_UNID_ORC, FolhasPagamentosPeer::CD_UNID_ORC),
        array(AgentesFolhasPeer::DT_COMPET_FL, FolhasPagamentosPeer::DT_COMPET_FL),
        array(AgentesFolhasPeer::DT_EMISSAO_FL, FolhasPagamentosPeer::DT_EMISSAO_FL),
        array(AgentesFolhasPeer::DT_VERSAO_ORC, FolhasPagamentosPeer::DT_VERSAO_ORC),
        array(AgentesFolhasPeer::TP_FOLHA, FolhasPagamentosPeer::TP_FOLHA),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of AgentesFolhas objects pre-filled with all related objects except FolhasPagamentos.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AgentesFolhas objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptFolhasPagamentos(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AgentesFolhasPeer::addSelectColumns($criteria);
		$startcol2 = (AgentesFolhasPeer::NUM_COLUMNS - AgentesFolhasPeer::NUM_LAZY_LOAD_COLUMNS);

		ConcessoesItensPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (ConcessoesItensPeer::NUM_COLUMNS - ConcessoesItensPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addMultipleJoin(array(
        array(AgentesFolhasPeer::CD_CPF_SERV_MUNI, ConcessoesItensPeer::CD_CPF_SERV_MUNI),
        array(AgentesFolhasPeer::CD_INGRESSO, ConcessoesItensPeer::CD_INGRESSO),
        array(AgentesFolhasPeer::CD_ITEM_IR, ConcessoesItensPeer::CD_ITEM_IR),
        array(AgentesFolhasPeer::CD_MUNICIPIO, ConcessoesItensPeer::CD_MUNICIPIO),
        array(AgentesFolhasPeer::CD_ORGAO, ConcessoesItensPeer::CD_ORGAO),
        array(AgentesFolhasPeer::CD_UNID_ORC, ConcessoesItensPeer::CD_UNID_ORC),
        array(AgentesFolhasPeer::CD_VINCULO, ConcessoesItensPeer::CD_VINCULO),
        array(AgentesFolhasPeer::DT_VERSAO_ORC, ConcessoesItensPeer::DT_VERSAO_ORC),
        array(AgentesFolhasPeer::NU_EXPEDIENTE_NO, ConcessoesItensPeer::NU_EXPEDIENTE_NO),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AgentesFolhasPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AgentesFolhasPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = AgentesFolhasPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AgentesFolhasPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined ConcessoesItens rows

				$key2 = ConcessoesItensPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ConcessoesItensPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = ConcessoesItensPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ConcessoesItensPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (AgentesFolhas) to the collection in $obj2 (ConcessoesItens)
				$obj2->addAgentesFolhas($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AgentesFolhas objects pre-filled with all related objects except ConcessoesItens.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AgentesFolhas objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptConcessoesItens(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AgentesFolhasPeer::addSelectColumns($criteria);
		$startcol2 = (AgentesFolhasPeer::NUM_COLUMNS - AgentesFolhasPeer::NUM_LAZY_LOAD_COLUMNS);

		FolhasPagamentosPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (FolhasPagamentosPeer::NUM_COLUMNS - FolhasPagamentosPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addMultipleJoin(array(
        array(AgentesFolhasPeer::CD_ORGAO, FolhasPagamentosPeer::CD_ORGAO),
        array(AgentesFolhasPeer::CD_UNID_ORC, FolhasPagamentosPeer::CD_UNID_ORC),
        array(AgentesFolhasPeer::DT_COMPET_FL, FolhasPagamentosPeer::DT_COMPET_FL),
        array(AgentesFolhasPeer::DT_EMISSAO_FL, FolhasPagamentosPeer::DT_EMISSAO_FL),
        array(AgentesFolhasPeer::DT_VERSAO_ORC, FolhasPagamentosPeer::DT_VERSAO_ORC),
        array(AgentesFolhasPeer::TP_FOLHA, FolhasPagamentosPeer::TP_FOLHA),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AgentesFolhasPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AgentesFolhasPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = AgentesFolhasPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AgentesFolhasPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined FolhasPagamentos rows

				$key2 = FolhasPagamentosPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = FolhasPagamentosPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = FolhasPagamentosPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					FolhasPagamentosPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (AgentesFolhas) to the collection in $obj2 (FolhasPagamentos)
				$obj2->addAgentesFolhas($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * Add a TableMap instance to the database for this peer class.
	 */
	public static function buildTableMap()
	{
	  $dbMap = Propel::getDatabaseMap(BaseAgentesFolhasPeer::DATABASE_NAME);
	  if (!$dbMap->hasTable(BaseAgentesFolhasPeer::TABLE_NAME))
	  {
	    $dbMap->addTableObject(new AgentesFolhasTableMap());
	  }
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * If $withPrefix is true, the returned path
	 * uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @param      boolean  Whether or not to return the path wit hthe class name 
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass($withPrefix = true)
	{
		return $withPrefix ? AgentesFolhasPeer::CLASS_DEFAULT : AgentesFolhasPeer::OM_CLASS;
	}

	/**
	 * Method perform an INSERT on the database, given a AgentesFolhas or Criteria object.
	 *
	 * @param      mixed $values Criteria or AgentesFolhas object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseAgentesFolhasPeer:doInsert:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(AgentesFolhasPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from AgentesFolhas object
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseAgentesFolhasPeer:doInsert:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $values, $con, $pk);
    }

		return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a AgentesFolhas or Criteria object.
	 *
	 * @param      mixed $values Criteria or AgentesFolhas object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseAgentesFolhasPeer:doUpdate:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(AgentesFolhasPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(AgentesFolhasPeer::CD_MUNICIPIO);
			$selectCriteria->add(AgentesFolhasPeer::CD_MUNICIPIO, $criteria->remove(AgentesFolhasPeer::CD_MUNICIPIO), $comparison);

			$comparison = $criteria->getComparison(AgentesFolhasPeer::DT_VERSAO_ORC);
			$selectCriteria->add(AgentesFolhasPeer::DT_VERSAO_ORC, $criteria->remove(AgentesFolhasPeer::DT_VERSAO_ORC), $comparison);

			$comparison = $criteria->getComparison(AgentesFolhasPeer::CD_ORGAO);
			$selectCriteria->add(AgentesFolhasPeer::CD_ORGAO, $criteria->remove(AgentesFolhasPeer::CD_ORGAO), $comparison);

			$comparison = $criteria->getComparison(AgentesFolhasPeer::CD_UNID_ORC);
			$selectCriteria->add(AgentesFolhasPeer::CD_UNID_ORC, $criteria->remove(AgentesFolhasPeer::CD_UNID_ORC), $comparison);

			$comparison = $criteria->getComparison(AgentesFolhasPeer::DT_COMPET_FL);
			$selectCriteria->add(AgentesFolhasPeer::DT_COMPET_FL, $criteria->remove(AgentesFolhasPeer::DT_COMPET_FL), $comparison);

			$comparison = $criteria->getComparison(AgentesFolhasPeer::TP_FOLHA);
			$selectCriteria->add(AgentesFolhasPeer::TP_FOLHA, $criteria->remove(AgentesFolhasPeer::TP_FOLHA), $comparison);

			$comparison = $criteria->getComparison(AgentesFolhasPeer::DT_EMISSAO_FL);
			$selectCriteria->add(AgentesFolhasPeer::DT_EMISSAO_FL, $criteria->remove(AgentesFolhasPeer::DT_EMISSAO_FL), $comparison);

			$comparison = $criteria->getComparison(AgentesFolhasPeer::CD_CPF_SERV_MUNI);
			$selectCriteria->add(AgentesFolhasPeer::CD_CPF_SERV_MUNI, $criteria->remove(AgentesFolhasPeer::CD_CPF_SERV_MUNI), $comparison);

			$comparison = $criteria->getComparison(AgentesFolhasPeer::CD_INGRESSO);
			$selectCriteria->add(AgentesFolhasPeer::CD_INGRESSO, $criteria->remove(AgentesFolhasPeer::CD_INGRESSO), $comparison);

			$comparison = $criteria->getComparison(AgentesFolhasPeer::CD_VINCULO);
			$selectCriteria->add(AgentesFolhasPeer::CD_VINCULO, $criteria->remove(AgentesFolhasPeer::CD_VINCULO), $comparison);

			$comparison = $criteria->getComparison(AgentesFolhasPeer::NU_EXPEDIENTE_NO);
			$selectCriteria->add(AgentesFolhasPeer::NU_EXPEDIENTE_NO, $criteria->remove(AgentesFolhasPeer::NU_EXPEDIENTE_NO), $comparison);

			$comparison = $criteria->getComparison(AgentesFolhasPeer::CD_ITEM_IR);
			$selectCriteria->add(AgentesFolhasPeer::CD_ITEM_IR, $criteria->remove(AgentesFolhasPeer::CD_ITEM_IR), $comparison);

		} else { // $values is AgentesFolhas object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseAgentesFolhasPeer:doUpdate:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseAgentesFolhasPeer', $values, $con, $ret);
    }

    return $ret;
	}

	/**
	 * Method to DELETE all rows from the AGENTES_FOLHAS table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(AgentesFolhasPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(AgentesFolhasPeer::TABLE_NAME, $con);
			// Because this db requires some delete cascade/set null emulation, we have to
			// clear the cached instance *after* the emulation has happened (since
			// instances get re-added by the select statement contained therein).
			AgentesFolhasPeer::clearInstancePool();
			AgentesFolhasPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a AgentesFolhas or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or AgentesFolhas object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(AgentesFolhasPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			AgentesFolhasPeer::clearInstancePool();
			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof AgentesFolhas) { // it's a model object
			// invalidate the cache for this single object
			AgentesFolhasPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else { // it's a primary key, or an array of pks
			$criteria = new Criteria(self::DATABASE_NAME);
			// primary key is composite; we therefore, expect
			// the primary key passed to be an array of pkey values
			if (count($values) == count($values, COUNT_RECURSIVE)) {
				// array is not multi-dimensional
				$values = array($values);
			}
			foreach ($values as $value) {
				$criterion = $criteria->getNewCriterion(AgentesFolhasPeer::CD_MUNICIPIO, $value[0]);
				$criterion->addAnd($criteria->getNewCriterion(AgentesFolhasPeer::DT_VERSAO_ORC, $value[1]));
				$criterion->addAnd($criteria->getNewCriterion(AgentesFolhasPeer::CD_ORGAO, $value[2]));
				$criterion->addAnd($criteria->getNewCriterion(AgentesFolhasPeer::CD_UNID_ORC, $value[3]));
				$criterion->addAnd($criteria->getNewCriterion(AgentesFolhasPeer::DT_COMPET_FL, $value[4]));
				$criterion->addAnd($criteria->getNewCriterion(AgentesFolhasPeer::TP_FOLHA, $value[5]));
				$criterion->addAnd($criteria->getNewCriterion(AgentesFolhasPeer::DT_EMISSAO_FL, $value[6]));
				$criterion->addAnd($criteria->getNewCriterion(AgentesFolhasPeer::CD_CPF_SERV_MUNI, $value[7]));
				$criterion->addAnd($criteria->getNewCriterion(AgentesFolhasPeer::CD_INGRESSO, $value[8]));
				$criterion->addAnd($criteria->getNewCriterion(AgentesFolhasPeer::CD_VINCULO, $value[9]));
				$criterion->addAnd($criteria->getNewCriterion(AgentesFolhasPeer::NU_EXPEDIENTE_NO, $value[10]));
				$criterion->addAnd($criteria->getNewCriterion(AgentesFolhasPeer::CD_ITEM_IR, $value[11]));
				$criteria->addOr($criterion);
				// we can invalidate the cache for this single PK
				AgentesFolhasPeer::removeInstanceFromPool($value);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);
			AgentesFolhasPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given AgentesFolhas object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      AgentesFolhas $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(AgentesFolhas $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(AgentesFolhasPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(AgentesFolhasPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		return BasePeer::doValidate(AgentesFolhasPeer::DATABASE_NAME, AgentesFolhasPeer::TABLE_NAME, $columns);
	}

	/**
	 * Retrieve object using using composite pkey values.
	 * @param      string $cd_municipio
	 * @param      int $dt_versao_orc
	 * @param      string $cd_orgao
	 * @param      string $cd_unid_orc
	 * @param      int $dt_compet_fl
	 * @param      string $tp_folha
	 * @param      string $dt_emissao_fl
	 * @param      string $cd_cpf_serv_muni
	 * @param      string $cd_ingresso
	 * @param      string $cd_vinculo
	 * @param      string $nu_expediente_no
	 * @param      int $cd_item_ir
	 * @param      PropelPDO $con
	 * @return     AgentesFolhas
	 */
	public static function retrieveByPK($cd_municipio, $dt_versao_orc, $cd_orgao, $cd_unid_orc, $dt_compet_fl, $tp_folha, $dt_emissao_fl, $cd_cpf_serv_muni, $cd_ingresso, $cd_vinculo, $nu_expediente_no, $cd_item_ir, PropelPDO $con = null) {
		$key = serialize(array((string) $cd_municipio, (string) $dt_versao_orc, (string) $cd_orgao, (string) $cd_unid_orc, (string) $dt_compet_fl, (string) $tp_folha, (string) $dt_emissao_fl, (string) $cd_cpf_serv_muni, (string) $cd_ingresso, (string) $cd_vinculo, (string) $nu_expediente_no, (string) $cd_item_ir));
 		if (null !== ($obj = AgentesFolhasPeer::getInstanceFromPool($key))) {
 			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(AgentesFolhasPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$criteria = new Criteria(AgentesFolhasPeer::DATABASE_NAME);
		$criteria->add(AgentesFolhasPeer::CD_MUNICIPIO, $cd_municipio);
		$criteria->add(AgentesFolhasPeer::DT_VERSAO_ORC, $dt_versao_orc);
		$criteria->add(AgentesFolhasPeer::CD_ORGAO, $cd_orgao);
		$criteria->add(AgentesFolhasPeer::CD_UNID_ORC, $cd_unid_orc);
		$criteria->add(AgentesFolhasPeer::DT_COMPET_FL, $dt_compet_fl);
		$criteria->add(AgentesFolhasPeer::TP_FOLHA, $tp_folha);
		$criteria->add(AgentesFolhasPeer::DT_EMISSAO_FL, $dt_emissao_fl);
		$criteria->add(AgentesFolhasPeer::CD_CPF_SERV_MUNI, $cd_cpf_serv_muni);
		$criteria->add(AgentesFolhasPeer::CD_INGRESSO, $cd_ingresso);
		$criteria->add(AgentesFolhasPeer::CD_VINCULO, $cd_vinculo);
		$criteria->add(AgentesFolhasPeer::NU_EXPEDIENTE_NO, $nu_expediente_no);
		$criteria->add(AgentesFolhasPeer::CD_ITEM_IR, $cd_item_ir);
		$v = AgentesFolhasPeer::doSelect($criteria, $con);

		return !empty($v) ? $v[0] : null;
	}
	// symfony behavior
	
	/**
	 * Returns an array of arrays that contain columns in each unique index.
	 *
	 * @return array
	 */
	static public function getUniqueColumnNames()
	{
	  return array();
	}

	// symfony_behaviors behavior
	
	/**
	 * Returns the name of the hook to call from inside the supplied method.
	 *
	 * @param string $method The calling method
	 *
	 * @return string A hook name for {@link sfMixer}
	 *
	 * @throws LogicException If the method name is not recognized
	 */
	static private function getMixerPreSelectHook($method)
	{
	  if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
	  {
	    return sprintf('BaseAgentesFolhasPeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
	  }
	
	  throw new LogicException(sprintf('Unrecognized function "%s"', $method));
	}

} // BaseAgentesFolhasPeer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BaseAgentesFolhasPeer::buildTableMap();

