<?php

/**
 * Base class that represents a row from the 'ORGAOS' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Thu Jul 15 18:23:07 2010
 *
 * @package    lib.model.om
 */
abstract class BaseOrgaos extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        OrgaosPeer
	 */
	protected static $peer;

	/**
	 * The value for the cd_municipio field.
	 * @var        string
	 */
	protected $cd_municipio;

	/**
	 * The value for the dt_versao_orc field.
	 * @var        int
	 */
	protected $dt_versao_orc;

	/**
	 * The value for the cd_orgao field.
	 * @var        string
	 */
	protected $cd_orgao;

	/**
	 * The value for the cd_tipo_unid_adm field.
	 * @var        string
	 */
	protected $cd_tipo_unid_adm;

	/**
	 * The value for the nm_orgao field.
	 * @var        string
	 */
	protected $nm_orgao;

	/**
	 * The value for the nu_cgc_orgao field.
	 * @var        string
	 */
	protected $nu_cgc_orgao;

	/**
	 * The value for the de_ender_orgao field.
	 * @var        string
	 */
	protected $de_ender_orgao;

	/**
	 * The value for the nu_cep_orgao field.
	 * @var        string
	 */
	protected $nu_cep_orgao;

	/**
	 * The value for the nu_fone_orgao field.
	 * @var        string
	 */
	protected $nu_fone_orgao;

	/**
	 * The value for the nu_fax_orgao field.
	 * @var        string
	 */
	protected $nu_fax_orgao;

	/**
	 * The value for the de_email_orgao field.
	 * @var        string
	 */
	protected $de_email_orgao;

	/**
	 * @var        Municipios
	 */
	protected $aMunicipios;

	/**
	 * @var        Orcamentos
	 */
	protected $aOrcamentos;

	/**
	 * @var        array UnidadesOrcamentarias[] Collection to store aggregation of UnidadesOrcamentarias objects.
	 */
	protected $collUnidadesOrcamentariass;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUnidadesOrcamentariass.
	 */
	private $lastUnidadesOrcamentariasCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'OrgaosPeer';

	/**
	 * Get the [cd_municipio] column value.
	 * 
	 * @return     string
	 */
	public function getCdMunicipio()
	{
		return $this->cd_municipio;
	}

	/**
	 * Get the [dt_versao_orc] column value.
	 * 
	 * @return     int
	 */
	public function getDtVersaoOrc()
	{
		return $this->dt_versao_orc;
	}

	/**
	 * Get the [cd_orgao] column value.
	 * 
	 * @return     string
	 */
	public function getCdOrgao()
	{
		return $this->cd_orgao;
	}

	/**
	 * Get the [cd_tipo_unid_adm] column value.
	 * 
	 * @return     string
	 */
	public function getCdTipoUnidAdm()
	{
		return $this->cd_tipo_unid_adm;
	}

	/**
	 * Get the [nm_orgao] column value.
	 * 
	 * @return     string
	 */
	public function getNmOrgao()
	{
		return $this->nm_orgao;
	}

	/**
	 * Get the [nu_cgc_orgao] column value.
	 * 
	 * @return     string
	 */
	public function getNuCgcOrgao()
	{
		return $this->nu_cgc_orgao;
	}

	/**
	 * Get the [de_ender_orgao] column value.
	 * 
	 * @return     string
	 */
	public function getDeEnderOrgao()
	{
		return $this->de_ender_orgao;
	}

	/**
	 * Get the [nu_cep_orgao] column value.
	 * 
	 * @return     string
	 */
	public function getNuCepOrgao()
	{
		return $this->nu_cep_orgao;
	}

	/**
	 * Get the [nu_fone_orgao] column value.
	 * 
	 * @return     string
	 */
	public function getNuFoneOrgao()
	{
		return $this->nu_fone_orgao;
	}

	/**
	 * Get the [nu_fax_orgao] column value.
	 * 
	 * @return     string
	 */
	public function getNuFaxOrgao()
	{
		return $this->nu_fax_orgao;
	}

	/**
	 * Get the [de_email_orgao] column value.
	 * 
	 * @return     string
	 */
	public function getDeEmailOrgao()
	{
		return $this->de_email_orgao;
	}

	/**
	 * Set the value of [cd_municipio] column.
	 * 
	 * @param      string $v new value
	 * @return     Orgaos The current object (for fluent API support)
	 */
	public function setCdMunicipio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_municipio !== $v) {
			$this->cd_municipio = $v;
			$this->modifiedColumns[] = OrgaosPeer::CD_MUNICIPIO;
		}

		if ($this->aMunicipios !== null && $this->aMunicipios->getCdMunicipio() !== $v) {
			$this->aMunicipios = null;
		}

		if ($this->aOrcamentos !== null && $this->aOrcamentos->getCdMunicipio() !== $v) {
			$this->aOrcamentos = null;
		}

		return $this;
	} // setCdMunicipio()

	/**
	 * Set the value of [dt_versao_orc] column.
	 * 
	 * @param      int $v new value
	 * @return     Orgaos The current object (for fluent API support)
	 */
	public function setDtVersaoOrc($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->dt_versao_orc !== $v) {
			$this->dt_versao_orc = $v;
			$this->modifiedColumns[] = OrgaosPeer::DT_VERSAO_ORC;
		}

		if ($this->aOrcamentos !== null && $this->aOrcamentos->getDtVersaoOrc() !== $v) {
			$this->aOrcamentos = null;
		}

		return $this;
	} // setDtVersaoOrc()

	/**
	 * Set the value of [cd_orgao] column.
	 * 
	 * @param      string $v new value
	 * @return     Orgaos The current object (for fluent API support)
	 */
	public function setCdOrgao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_orgao !== $v) {
			$this->cd_orgao = $v;
			$this->modifiedColumns[] = OrgaosPeer::CD_ORGAO;
		}

		return $this;
	} // setCdOrgao()

	/**
	 * Set the value of [cd_tipo_unid_adm] column.
	 * 
	 * @param      string $v new value
	 * @return     Orgaos The current object (for fluent API support)
	 */
	public function setCdTipoUnidAdm($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_tipo_unid_adm !== $v) {
			$this->cd_tipo_unid_adm = $v;
			$this->modifiedColumns[] = OrgaosPeer::CD_TIPO_UNID_ADM;
		}

		return $this;
	} // setCdTipoUnidAdm()

	/**
	 * Set the value of [nm_orgao] column.
	 * 
	 * @param      string $v new value
	 * @return     Orgaos The current object (for fluent API support)
	 */
	public function setNmOrgao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nm_orgao !== $v) {
			$this->nm_orgao = $v;
			$this->modifiedColumns[] = OrgaosPeer::NM_ORGAO;
		}

		return $this;
	} // setNmOrgao()

	/**
	 * Set the value of [nu_cgc_orgao] column.
	 * 
	 * @param      string $v new value
	 * @return     Orgaos The current object (for fluent API support)
	 */
	public function setNuCgcOrgao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_cgc_orgao !== $v) {
			$this->nu_cgc_orgao = $v;
			$this->modifiedColumns[] = OrgaosPeer::NU_CGC_ORGAO;
		}

		return $this;
	} // setNuCgcOrgao()

	/**
	 * Set the value of [de_ender_orgao] column.
	 * 
	 * @param      string $v new value
	 * @return     Orgaos The current object (for fluent API support)
	 */
	public function setDeEnderOrgao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->de_ender_orgao !== $v) {
			$this->de_ender_orgao = $v;
			$this->modifiedColumns[] = OrgaosPeer::DE_ENDER_ORGAO;
		}

		return $this;
	} // setDeEnderOrgao()

	/**
	 * Set the value of [nu_cep_orgao] column.
	 * 
	 * @param      string $v new value
	 * @return     Orgaos The current object (for fluent API support)
	 */
	public function setNuCepOrgao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_cep_orgao !== $v) {
			$this->nu_cep_orgao = $v;
			$this->modifiedColumns[] = OrgaosPeer::NU_CEP_ORGAO;
		}

		return $this;
	} // setNuCepOrgao()

	/**
	 * Set the value of [nu_fone_orgao] column.
	 * 
	 * @param      string $v new value
	 * @return     Orgaos The current object (for fluent API support)
	 */
	public function setNuFoneOrgao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_fone_orgao !== $v) {
			$this->nu_fone_orgao = $v;
			$this->modifiedColumns[] = OrgaosPeer::NU_FONE_ORGAO;
		}

		return $this;
	} // setNuFoneOrgao()

	/**
	 * Set the value of [nu_fax_orgao] column.
	 * 
	 * @param      string $v new value
	 * @return     Orgaos The current object (for fluent API support)
	 */
	public function setNuFaxOrgao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_fax_orgao !== $v) {
			$this->nu_fax_orgao = $v;
			$this->modifiedColumns[] = OrgaosPeer::NU_FAX_ORGAO;
		}

		return $this;
	} // setNuFaxOrgao()

	/**
	 * Set the value of [de_email_orgao] column.
	 * 
	 * @param      string $v new value
	 * @return     Orgaos The current object (for fluent API support)
	 */
	public function setDeEmailOrgao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->de_email_orgao !== $v) {
			$this->de_email_orgao = $v;
			$this->modifiedColumns[] = OrgaosPeer::DE_EMAIL_ORGAO;
		}

		return $this;
	} // setDeEmailOrgao()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->cd_municipio = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->dt_versao_orc = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->cd_orgao = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->cd_tipo_unid_adm = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->nm_orgao = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->nu_cgc_orgao = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->de_ender_orgao = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->nu_cep_orgao = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->nu_fone_orgao = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->nu_fax_orgao = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->de_email_orgao = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 11; // 11 = OrgaosPeer::NUM_COLUMNS - OrgaosPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Orgaos object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aMunicipios !== null && $this->cd_municipio !== $this->aMunicipios->getCdMunicipio()) {
			$this->aMunicipios = null;
		}
		if ($this->aOrcamentos !== null && $this->cd_municipio !== $this->aOrcamentos->getCdMunicipio()) {
			$this->aOrcamentos = null;
		}
		if ($this->aOrcamentos !== null && $this->dt_versao_orc !== $this->aOrcamentos->getDtVersaoOrc()) {
			$this->aOrcamentos = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(OrgaosPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = OrgaosPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aMunicipios = null;
			$this->aOrcamentos = null;
			$this->collUnidadesOrcamentariass = null;
			$this->lastUnidadesOrcamentariasCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(OrgaosPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseOrgaos:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				OrgaosPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseOrgaos:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(OrgaosPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseOrgaos:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseOrgaos:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				OrgaosPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMunicipios !== null) {
				if ($this->aMunicipios->isModified() || $this->aMunicipios->isNew()) {
					$affectedRows += $this->aMunicipios->save($con);
				}
				$this->setMunicipios($this->aMunicipios);
			}

			if ($this->aOrcamentos !== null) {
				if ($this->aOrcamentos->isModified() || $this->aOrcamentos->isNew()) {
					$affectedRows += $this->aOrcamentos->save($con);
				}
				$this->setOrcamentos($this->aOrcamentos);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = OrgaosPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += OrgaosPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collUnidadesOrcamentariass !== null) {
				foreach ($this->collUnidadesOrcamentariass as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMunicipios !== null) {
				if (!$this->aMunicipios->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMunicipios->getValidationFailures());
				}
			}

			if ($this->aOrcamentos !== null) {
				if (!$this->aOrcamentos->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aOrcamentos->getValidationFailures());
				}
			}


			if (($retval = OrgaosPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collUnidadesOrcamentariass !== null) {
					foreach ($this->collUnidadesOrcamentariass as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = OrgaosPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCdMunicipio();
				break;
			case 1:
				return $this->getDtVersaoOrc();
				break;
			case 2:
				return $this->getCdOrgao();
				break;
			case 3:
				return $this->getCdTipoUnidAdm();
				break;
			case 4:
				return $this->getNmOrgao();
				break;
			case 5:
				return $this->getNuCgcOrgao();
				break;
			case 6:
				return $this->getDeEnderOrgao();
				break;
			case 7:
				return $this->getNuCepOrgao();
				break;
			case 8:
				return $this->getNuFoneOrgao();
				break;
			case 9:
				return $this->getNuFaxOrgao();
				break;
			case 10:
				return $this->getDeEmailOrgao();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = OrgaosPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCdMunicipio(),
			$keys[1] => $this->getDtVersaoOrc(),
			$keys[2] => $this->getCdOrgao(),
			$keys[3] => $this->getCdTipoUnidAdm(),
			$keys[4] => $this->getNmOrgao(),
			$keys[5] => $this->getNuCgcOrgao(),
			$keys[6] => $this->getDeEnderOrgao(),
			$keys[7] => $this->getNuCepOrgao(),
			$keys[8] => $this->getNuFoneOrgao(),
			$keys[9] => $this->getNuFaxOrgao(),
			$keys[10] => $this->getDeEmailOrgao(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = OrgaosPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCdMunicipio($value);
				break;
			case 1:
				$this->setDtVersaoOrc($value);
				break;
			case 2:
				$this->setCdOrgao($value);
				break;
			case 3:
				$this->setCdTipoUnidAdm($value);
				break;
			case 4:
				$this->setNmOrgao($value);
				break;
			case 5:
				$this->setNuCgcOrgao($value);
				break;
			case 6:
				$this->setDeEnderOrgao($value);
				break;
			case 7:
				$this->setNuCepOrgao($value);
				break;
			case 8:
				$this->setNuFoneOrgao($value);
				break;
			case 9:
				$this->setNuFaxOrgao($value);
				break;
			case 10:
				$this->setDeEmailOrgao($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = OrgaosPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCdMunicipio($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDtVersaoOrc($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCdOrgao($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCdTipoUnidAdm($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNmOrgao($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setNuCgcOrgao($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setDeEnderOrgao($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setNuCepOrgao($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setNuFoneOrgao($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setNuFaxOrgao($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setDeEmailOrgao($arr[$keys[10]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(OrgaosPeer::DATABASE_NAME);

		if ($this->isColumnModified(OrgaosPeer::CD_MUNICIPIO)) $criteria->add(OrgaosPeer::CD_MUNICIPIO, $this->cd_municipio);
		if ($this->isColumnModified(OrgaosPeer::DT_VERSAO_ORC)) $criteria->add(OrgaosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
		if ($this->isColumnModified(OrgaosPeer::CD_ORGAO)) $criteria->add(OrgaosPeer::CD_ORGAO, $this->cd_orgao);
		if ($this->isColumnModified(OrgaosPeer::CD_TIPO_UNID_ADM)) $criteria->add(OrgaosPeer::CD_TIPO_UNID_ADM, $this->cd_tipo_unid_adm);
		if ($this->isColumnModified(OrgaosPeer::NM_ORGAO)) $criteria->add(OrgaosPeer::NM_ORGAO, $this->nm_orgao);
		if ($this->isColumnModified(OrgaosPeer::NU_CGC_ORGAO)) $criteria->add(OrgaosPeer::NU_CGC_ORGAO, $this->nu_cgc_orgao);
		if ($this->isColumnModified(OrgaosPeer::DE_ENDER_ORGAO)) $criteria->add(OrgaosPeer::DE_ENDER_ORGAO, $this->de_ender_orgao);
		if ($this->isColumnModified(OrgaosPeer::NU_CEP_ORGAO)) $criteria->add(OrgaosPeer::NU_CEP_ORGAO, $this->nu_cep_orgao);
		if ($this->isColumnModified(OrgaosPeer::NU_FONE_ORGAO)) $criteria->add(OrgaosPeer::NU_FONE_ORGAO, $this->nu_fone_orgao);
		if ($this->isColumnModified(OrgaosPeer::NU_FAX_ORGAO)) $criteria->add(OrgaosPeer::NU_FAX_ORGAO, $this->nu_fax_orgao);
		if ($this->isColumnModified(OrgaosPeer::DE_EMAIL_ORGAO)) $criteria->add(OrgaosPeer::DE_EMAIL_ORGAO, $this->de_email_orgao);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(OrgaosPeer::DATABASE_NAME);

		$criteria->add(OrgaosPeer::CD_MUNICIPIO, $this->cd_municipio);
		$criteria->add(OrgaosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
		$criteria->add(OrgaosPeer::CD_ORGAO, $this->cd_orgao);

		return $criteria;
	}

	/**
	 * Returns the composite primary key for this object.
	 * The array elements will be in same order as specified in XML.
	 * @return     array
	 */
	public function getPrimaryKey()
	{
		$pks = array();

		$pks[0] = $this->getCdMunicipio();

		$pks[1] = $this->getDtVersaoOrc();

		$pks[2] = $this->getCdOrgao();

		return $pks;
	}

	/**
	 * Set the [composite] primary key.
	 *
	 * @param      array $keys The elements of the composite key (order must match the order in XML file).
	 * @return     void
	 */
	public function setPrimaryKey($keys)
	{

		$this->setCdMunicipio($keys[0]);

		$this->setDtVersaoOrc($keys[1]);

		$this->setCdOrgao($keys[2]);

	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Orgaos (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCdMunicipio($this->cd_municipio);

		$copyObj->setDtVersaoOrc($this->dt_versao_orc);

		$copyObj->setCdOrgao($this->cd_orgao);

		$copyObj->setCdTipoUnidAdm($this->cd_tipo_unid_adm);

		$copyObj->setNmOrgao($this->nm_orgao);

		$copyObj->setNuCgcOrgao($this->nu_cgc_orgao);

		$copyObj->setDeEnderOrgao($this->de_ender_orgao);

		$copyObj->setNuCepOrgao($this->nu_cep_orgao);

		$copyObj->setNuFoneOrgao($this->nu_fone_orgao);

		$copyObj->setNuFaxOrgao($this->nu_fax_orgao);

		$copyObj->setDeEmailOrgao($this->de_email_orgao);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getUnidadesOrcamentariass() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUnidadesOrcamentarias($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Orgaos Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     OrgaosPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new OrgaosPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Municipios object.
	 *
	 * @param      Municipios $v
	 * @return     Orgaos The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMunicipios(Municipios $v = null)
	{
		if ($v === null) {
			$this->setCdMunicipio(NULL);
		} else {
			$this->setCdMunicipio($v->getCdMunicipio());
		}

		$this->aMunicipios = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Municipios object, it will not be re-added.
		if ($v !== null) {
			$v->addOrgaos($this);
		}

		return $this;
	}


	/**
	 * Get the associated Municipios object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Municipios The associated Municipios object.
	 * @throws     PropelException
	 */
	public function getMunicipios(PropelPDO $con = null)
	{
		if ($this->aMunicipios === null && (($this->cd_municipio !== "" && $this->cd_municipio !== null))) {
			$this->aMunicipios = MunicipiosPeer::retrieveByPk($this->cd_municipio);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMunicipios->addOrgaoss($this);
			 */
		}
		return $this->aMunicipios;
	}

	/**
	 * Declares an association between this object and a Orcamentos object.
	 *
	 * @param      Orcamentos $v
	 * @return     Orgaos The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setOrcamentos(Orcamentos $v = null)
	{
		if ($v === null) {
			$this->setCdMunicipio(NULL);
		} else {
			$this->setCdMunicipio($v->getCdMunicipio());
		}

		if ($v === null) {
			$this->setDtVersaoOrc(NULL);
		} else {
			$this->setDtVersaoOrc($v->getDtVersaoOrc());
		}

		$this->aOrcamentos = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Orcamentos object, it will not be re-added.
		if ($v !== null) {
			$v->addOrgaos($this);
		}

		return $this;
	}


	/**
	 * Get the associated Orcamentos object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Orcamentos The associated Orcamentos object.
	 * @throws     PropelException
	 */
	public function getOrcamentos(PropelPDO $con = null)
	{
		if ($this->aOrcamentos === null && (($this->cd_municipio !== "" && $this->cd_municipio !== null) && $this->dt_versao_orc !== null)) {
			$c = new Criteria(OrcamentosPeer::DATABASE_NAME);
			$c->add(OrcamentosPeer::CD_MUNICIPIO, $this->cd_municipio);
			$c->add(OrcamentosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
			$this->aOrcamentos = OrcamentosPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aOrcamentos->addOrgaoss($this);
			 */
		}
		return $this->aOrcamentos;
	}

	/**
	 * Clears out the collUnidadesOrcamentariass collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUnidadesOrcamentariass()
	 */
	public function clearUnidadesOrcamentariass()
	{
		$this->collUnidadesOrcamentariass = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUnidadesOrcamentariass collection (array).
	 *
	 * By default this just sets the collUnidadesOrcamentariass collection to an empty array (like clearcollUnidadesOrcamentariass());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUnidadesOrcamentariass()
	{
		$this->collUnidadesOrcamentariass = array();
	}

	/**
	 * Gets an array of UnidadesOrcamentarias objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Orgaos has previously been saved, it will retrieve
	 * related UnidadesOrcamentariass from storage. If this Orgaos is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UnidadesOrcamentarias[]
	 * @throws     PropelException
	 */
	public function getUnidadesOrcamentariass($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(OrgaosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUnidadesOrcamentariass === null) {
			if ($this->isNew()) {
			   $this->collUnidadesOrcamentariass = array();
			} else {

				$criteria->add(UnidadesOrcamentariasPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(UnidadesOrcamentariasPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(UnidadesOrcamentariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				UnidadesOrcamentariasPeer::addSelectColumns($criteria);
				$this->collUnidadesOrcamentariass = UnidadesOrcamentariasPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UnidadesOrcamentariasPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(UnidadesOrcamentariasPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(UnidadesOrcamentariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				UnidadesOrcamentariasPeer::addSelectColumns($criteria);
				if (!isset($this->lastUnidadesOrcamentariasCriteria) || !$this->lastUnidadesOrcamentariasCriteria->equals($criteria)) {
					$this->collUnidadesOrcamentariass = UnidadesOrcamentariasPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUnidadesOrcamentariasCriteria = $criteria;
		return $this->collUnidadesOrcamentariass;
	}

	/**
	 * Returns the number of related UnidadesOrcamentarias objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UnidadesOrcamentarias objects.
	 * @throws     PropelException
	 */
	public function countUnidadesOrcamentariass(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(OrgaosPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUnidadesOrcamentariass === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UnidadesOrcamentariasPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(UnidadesOrcamentariasPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(UnidadesOrcamentariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$count = UnidadesOrcamentariasPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UnidadesOrcamentariasPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(UnidadesOrcamentariasPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(UnidadesOrcamentariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				if (!isset($this->lastUnidadesOrcamentariasCriteria) || !$this->lastUnidadesOrcamentariasCriteria->equals($criteria)) {
					$count = UnidadesOrcamentariasPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUnidadesOrcamentariass);
				}
			} else {
				$count = count($this->collUnidadesOrcamentariass);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UnidadesOrcamentarias object to this object
	 * through the UnidadesOrcamentarias foreign key attribute.
	 *
	 * @param      UnidadesOrcamentarias $l UnidadesOrcamentarias
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUnidadesOrcamentarias(UnidadesOrcamentarias $l)
	{
		if ($this->collUnidadesOrcamentariass === null) {
			$this->initUnidadesOrcamentariass();
		}
		if (!in_array($l, $this->collUnidadesOrcamentariass, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUnidadesOrcamentariass, $l);
			$l->setOrgaos($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collUnidadesOrcamentariass) {
				foreach ((array) $this->collUnidadesOrcamentariass as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collUnidadesOrcamentariass = null;
			$this->aMunicipios = null;
			$this->aOrcamentos = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseOrgaos:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseOrgaos::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseOrgaos
