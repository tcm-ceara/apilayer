<?php

/**
 * Base class that represents a row from the 'LICITACOES' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Thu Jul 15 18:22:58 2010
 *
 * @package    lib.model.om
 */
abstract class BaseLicitacoes extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        LicitacoesPeer
	 */
	protected static $peer;

	/**
	 * The value for the cd_municipio field.
	 * @var        string
	 */
	protected $cd_municipio;

	/**
	 * The value for the dt_realizacao_licit_li field.
	 * @var        string
	 */
	protected $dt_realizacao_licit_li;

	/**
	 * The value for the nu_licitacao_li field.
	 * @var        string
	 */
	protected $nu_licitacao_li;

	/**
	 * The value for the hr_realizacao_li field.
	 * Note: this column has a database default value of: '(\' \')'
	 * @var        string
	 */
	protected $hr_realizacao_li;

	/**
	 * The value for the dt_emissao_edital_li field.
	 * @var        string
	 */
	protected $dt_emissao_edital_li;

	/**
	 * The value for the md_licitacao_li field.
	 * @var        string
	 */
	protected $md_licitacao_li;

	/**
	 * The value for the tp_licitacao_li field.
	 * @var        string
	 */
	protected $tp_licitacao_li;

	/**
	 * The value for the de_objeto_licitacao_li1 field.
	 * @var        string
	 */
	protected $de_objeto_licitacao_li1;

	/**
	 * The value for the de_objeto_licitacao_li2 field.
	 * @var        string
	 */
	protected $de_objeto_licitacao_li2;

	/**
	 * The value for the vl_orc_estimado_obj_li field.
	 * @var        string
	 */
	protected $vl_orc_estimado_obj_li;

	/**
	 * The value for the vl_limite_superior_obj_li field.
	 * @var        string
	 */
	protected $vl_limite_superior_obj_li;

	/**
	 * The value for the cd_cpf_gestor field.
	 * @var        string
	 */
	protected $cd_cpf_gestor;

	/**
	 * The value for the dt_criac_comissao_cl field.
	 * @var        string
	 */
	protected $dt_criac_comissao_cl;

	/**
	 * The value for the nu_comissao_licit_cl field.
	 * @var        string
	 */
	protected $nu_comissao_licit_cl;

	/**
	 * The value for the cd_cpf_resp_homolog_li field.
	 * @var        string
	 */
	protected $cd_cpf_resp_homolog_li;

	/**
	 * The value for the nm_resp_homolog_li field.
	 * @var        string
	 */
	protected $nm_resp_homolog_li;

	/**
	 * The value for the dt_realizacao_licit_pa field.
	 * @var        string
	 */
	protected $dt_realizacao_licit_pa;

	/**
	 * The value for the md_processo_adm_pa field.
	 * @var        string
	 */
	protected $md_processo_adm_pa;

	/**
	 * The value for the cd_cpf_resp_juridico_pa field.
	 * @var        string
	 */
	protected $cd_cpf_resp_juridico_pa;

	/**
	 * The value for the nm_resp_juridico_pa field.
	 * @var        string
	 */
	protected $nm_resp_juridico_pa;

	/**
	 * The value for the dt_homologacao_pa field.
	 * @var        string
	 */
	protected $dt_homologacao_pa;

	/**
	 * The value for the de_justifica_preco_pa1 field.
	 * @var        string
	 */
	protected $de_justifica_preco_pa1;

	/**
	 * The value for the de_justifica_preco_pa2 field.
	 * @var        string
	 */
	protected $de_justifica_preco_pa2;

	/**
	 * The value for the de_motivo_fornec_pa1 field.
	 * @var        string
	 */
	protected $de_motivo_fornec_pa1;

	/**
	 * The value for the de_motivo_fornec_pa2 field.
	 * @var        string
	 */
	protected $de_motivo_fornec_pa2;

	/**
	 * The value for the de_fund_legal_pa field.
	 * @var        string
	 */
	protected $de_fund_legal_pa;

	/**
	 * The value for the nm_orgao_ata_pa field.
	 * @var        string
	 */
	protected $nm_orgao_ata_pa;

	/**
	 * @var        DadosPessoais
	 */
	protected $aDadosPessoais;

	/**
	 * @var        ComissoesLicitacoes
	 */
	protected $aComissoesLicitacoes;

	/**
	 * @var        array DadosEmpenhos[] Collection to store aggregation of DadosEmpenhos objects.
	 */
	protected $collDadosEmpenhoss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDadosEmpenhoss.
	 */
	private $lastDadosEmpenhosCriteria = null;

	/**
	 * @var        array DotacoesLicitacoes[] Collection to store aggregation of DotacoesLicitacoes objects.
	 */
	protected $collDotacoesLicitacoess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDotacoesLicitacoess.
	 */
	private $lastDotacoesLicitacoesCriteria = null;

	/**
	 * @var        array ItensLicitacoes[] Collection to store aggregation of ItensLicitacoes objects.
	 */
	protected $collItensLicitacoess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collItensLicitacoess.
	 */
	private $lastItensLicitacoesCriteria = null;

	/**
	 * @var        array Licitantes[] Collection to store aggregation of Licitantes objects.
	 */
	protected $collLicitantess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLicitantess.
	 */
	private $lastLicitantesCriteria = null;

	/**
	 * @var        array PublicEditaisLicitacoes[] Collection to store aggregation of PublicEditaisLicitacoes objects.
	 */
	protected $collPublicEditaisLicitacoess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPublicEditaisLicitacoess.
	 */
	private $lastPublicEditaisLicitacoesCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'LicitacoesPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->hr_realizacao_li = '(\' \')';
	}

	/**
	 * Initializes internal state of BaseLicitacoes object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [cd_municipio] column value.
	 * 
	 * @return     string
	 */
	public function getCdMunicipio()
	{
		return $this->cd_municipio;
	}

	/**
	 * Get the [optionally formatted] temporal [dt_realizacao_licit_li] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or MssqlDateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtRealizacaoLicitLi($format = 'Y-m-d H:i:s')
	{
		if ($this->dt_realizacao_licit_li === null) {
			return null;
		}



		try {
			$dt = new MssqlDateTime($this->dt_realizacao_licit_li);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to MssqlDateTime: " . var_export($this->dt_realizacao_licit_li, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a MssqlDateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [nu_licitacao_li] column value.
	 * 
	 * @return     string
	 */
	public function getNuLicitacaoLi()
	{
		return $this->nu_licitacao_li;
	}

	/**
	 * Get the [hr_realizacao_li] column value.
	 * 
	 * @return     string
	 */
	public function getHrRealizacaoLi()
	{
		return $this->hr_realizacao_li;
	}

	/**
	 * Get the [optionally formatted] temporal [dt_emissao_edital_li] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or MssqlDateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtEmissaoEditalLi($format = 'Y-m-d H:i:s')
	{
		if ($this->dt_emissao_edital_li === null) {
			return null;
		}



		try {
			$dt = new MssqlDateTime($this->dt_emissao_edital_li);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to MssqlDateTime: " . var_export($this->dt_emissao_edital_li, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a MssqlDateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [md_licitacao_li] column value.
	 * 
	 * @return     string
	 */
	public function getMdLicitacaoLi()
	{
		return $this->md_licitacao_li;
	}

	/**
	 * Get the [tp_licitacao_li] column value.
	 * 
	 * @return     string
	 */
	public function getTpLicitacaoLi()
	{
		return $this->tp_licitacao_li;
	}

	/**
	 * Get the [de_objeto_licitacao_li1] column value.
	 * 
	 * @return     string
	 */
	public function getDeObjetoLicitacaoLi1()
	{
		return $this->de_objeto_licitacao_li1;
	}

	/**
	 * Get the [de_objeto_licitacao_li2] column value.
	 * 
	 * @return     string
	 */
	public function getDeObjetoLicitacaoLi2()
	{
		return $this->de_objeto_licitacao_li2;
	}

	/**
	 * Get the [vl_orc_estimado_obj_li] column value.
	 * 
	 * @return     string
	 */
	public function getVlOrcEstimadoObjLi()
	{
		return $this->vl_orc_estimado_obj_li;
	}

	/**
	 * Get the [vl_limite_superior_obj_li] column value.
	 * 
	 * @return     string
	 */
	public function getVlLimiteSuperiorObjLi()
	{
		return $this->vl_limite_superior_obj_li;
	}

	/**
	 * Get the [cd_cpf_gestor] column value.
	 * 
	 * @return     string
	 */
	public function getCdCpfGestor()
	{
		return $this->cd_cpf_gestor;
	}

	/**
	 * Get the [optionally formatted] temporal [dt_criac_comissao_cl] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or MssqlDateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtCriacComissaoCl($format = 'Y-m-d H:i:s')
	{
		if ($this->dt_criac_comissao_cl === null) {
			return null;
		}



		try {
			$dt = new MssqlDateTime($this->dt_criac_comissao_cl);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to MssqlDateTime: " . var_export($this->dt_criac_comissao_cl, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a MssqlDateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [nu_comissao_licit_cl] column value.
	 * 
	 * @return     string
	 */
	public function getNuComissaoLicitCl()
	{
		return $this->nu_comissao_licit_cl;
	}

	/**
	 * Get the [cd_cpf_resp_homolog_li] column value.
	 * 
	 * @return     string
	 */
	public function getCdCpfRespHomologLi()
	{
		return $this->cd_cpf_resp_homolog_li;
	}

	/**
	 * Get the [nm_resp_homolog_li] column value.
	 * 
	 * @return     string
	 */
	public function getNmRespHomologLi()
	{
		return $this->nm_resp_homolog_li;
	}

	/**
	 * Get the [optionally formatted] temporal [dt_realizacao_licit_pa] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or MssqlDateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtRealizacaoLicitPa($format = 'Y-m-d H:i:s')
	{
		if ($this->dt_realizacao_licit_pa === null) {
			return null;
		}



		try {
			$dt = new MssqlDateTime($this->dt_realizacao_licit_pa);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to MssqlDateTime: " . var_export($this->dt_realizacao_licit_pa, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a MssqlDateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [md_processo_adm_pa] column value.
	 * 
	 * @return     string
	 */
	public function getMdProcessoAdmPa()
	{
		return $this->md_processo_adm_pa;
	}

	/**
	 * Get the [cd_cpf_resp_juridico_pa] column value.
	 * 
	 * @return     string
	 */
	public function getCdCpfRespJuridicoPa()
	{
		return $this->cd_cpf_resp_juridico_pa;
	}

	/**
	 * Get the [nm_resp_juridico_pa] column value.
	 * 
	 * @return     string
	 */
	public function getNmRespJuridicoPa()
	{
		return $this->nm_resp_juridico_pa;
	}

	/**
	 * Get the [optionally formatted] temporal [dt_homologacao_pa] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or MssqlDateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtHomologacaoPa($format = 'Y-m-d H:i:s')
	{
		if ($this->dt_homologacao_pa === null) {
			return null;
		}



		try {
			$dt = new MssqlDateTime($this->dt_homologacao_pa);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to MssqlDateTime: " . var_export($this->dt_homologacao_pa, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a MssqlDateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [de_justifica_preco_pa1] column value.
	 * 
	 * @return     string
	 */
	public function getDeJustificaPrecoPa1()
	{
		return $this->de_justifica_preco_pa1;
	}

	/**
	 * Get the [de_justifica_preco_pa2] column value.
	 * 
	 * @return     string
	 */
	public function getDeJustificaPrecoPa2()
	{
		return $this->de_justifica_preco_pa2;
	}

	/**
	 * Get the [de_motivo_fornec_pa1] column value.
	 * 
	 * @return     string
	 */
	public function getDeMotivoFornecPa1()
	{
		return $this->de_motivo_fornec_pa1;
	}

	/**
	 * Get the [de_motivo_fornec_pa2] column value.
	 * 
	 * @return     string
	 */
	public function getDeMotivoFornecPa2()
	{
		return $this->de_motivo_fornec_pa2;
	}

	/**
	 * Get the [de_fund_legal_pa] column value.
	 * 
	 * @return     string
	 */
	public function getDeFundLegalPa()
	{
		return $this->de_fund_legal_pa;
	}

	/**
	 * Get the [nm_orgao_ata_pa] column value.
	 * 
	 * @return     string
	 */
	public function getNmOrgaoAtaPa()
	{
		return $this->nm_orgao_ata_pa;
	}

	/**
	 * Set the value of [cd_municipio] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setCdMunicipio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_municipio !== $v) {
			$this->cd_municipio = $v;
			$this->modifiedColumns[] = LicitacoesPeer::CD_MUNICIPIO;
		}

		if ($this->aComissoesLicitacoes !== null && $this->aComissoesLicitacoes->getCdMunicipio() !== $v) {
			$this->aComissoesLicitacoes = null;
		}

		return $this;
	} // setCdMunicipio()

	/**
	 * Sets the value of [dt_realizacao_licit_li] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setDtRealizacaoLicitLi($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new MssqlDateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new MssqlDateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_realizacao_licit_li !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_realizacao_licit_li !== null && $tmpDt = new MssqlDateTime($this->dt_realizacao_licit_li)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_realizacao_licit_li = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = LicitacoesPeer::DT_REALIZACAO_LICIT_LI;
			}
		} // if either are not null

		return $this;
	} // setDtRealizacaoLicitLi()

	/**
	 * Set the value of [nu_licitacao_li] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setNuLicitacaoLi($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_licitacao_li !== $v) {
			$this->nu_licitacao_li = $v;
			$this->modifiedColumns[] = LicitacoesPeer::NU_LICITACAO_LI;
		}

		return $this;
	} // setNuLicitacaoLi()

	/**
	 * Set the value of [hr_realizacao_li] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setHrRealizacaoLi($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->hr_realizacao_li !== $v || $this->isNew()) {
			$this->hr_realizacao_li = $v;
			$this->modifiedColumns[] = LicitacoesPeer::HR_REALIZACAO_LI;
		}

		return $this;
	} // setHrRealizacaoLi()

	/**
	 * Sets the value of [dt_emissao_edital_li] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setDtEmissaoEditalLi($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new MssqlDateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new MssqlDateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_emissao_edital_li !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_emissao_edital_li !== null && $tmpDt = new MssqlDateTime($this->dt_emissao_edital_li)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_emissao_edital_li = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = LicitacoesPeer::DT_EMISSAO_EDITAL_LI;
			}
		} // if either are not null

		return $this;
	} // setDtEmissaoEditalLi()

	/**
	 * Set the value of [md_licitacao_li] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setMdLicitacaoLi($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->md_licitacao_li !== $v) {
			$this->md_licitacao_li = $v;
			$this->modifiedColumns[] = LicitacoesPeer::MD_LICITACAO_LI;
		}

		return $this;
	} // setMdLicitacaoLi()

	/**
	 * Set the value of [tp_licitacao_li] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setTpLicitacaoLi($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tp_licitacao_li !== $v) {
			$this->tp_licitacao_li = $v;
			$this->modifiedColumns[] = LicitacoesPeer::TP_LICITACAO_LI;
		}

		return $this;
	} // setTpLicitacaoLi()

	/**
	 * Set the value of [de_objeto_licitacao_li1] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setDeObjetoLicitacaoLi1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->de_objeto_licitacao_li1 !== $v) {
			$this->de_objeto_licitacao_li1 = $v;
			$this->modifiedColumns[] = LicitacoesPeer::DE_OBJETO_LICITACAO_LI1;
		}

		return $this;
	} // setDeObjetoLicitacaoLi1()

	/**
	 * Set the value of [de_objeto_licitacao_li2] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setDeObjetoLicitacaoLi2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->de_objeto_licitacao_li2 !== $v) {
			$this->de_objeto_licitacao_li2 = $v;
			$this->modifiedColumns[] = LicitacoesPeer::DE_OBJETO_LICITACAO_LI2;
		}

		return $this;
	} // setDeObjetoLicitacaoLi2()

	/**
	 * Set the value of [vl_orc_estimado_obj_li] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setVlOrcEstimadoObjLi($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vl_orc_estimado_obj_li !== $v) {
			$this->vl_orc_estimado_obj_li = $v;
			$this->modifiedColumns[] = LicitacoesPeer::VL_ORC_ESTIMADO_OBJ_LI;
		}

		return $this;
	} // setVlOrcEstimadoObjLi()

	/**
	 * Set the value of [vl_limite_superior_obj_li] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setVlLimiteSuperiorObjLi($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vl_limite_superior_obj_li !== $v) {
			$this->vl_limite_superior_obj_li = $v;
			$this->modifiedColumns[] = LicitacoesPeer::VL_LIMITE_SUPERIOR_OBJ_LI;
		}

		return $this;
	} // setVlLimiteSuperiorObjLi()

	/**
	 * Set the value of [cd_cpf_gestor] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setCdCpfGestor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_cpf_gestor !== $v) {
			$this->cd_cpf_gestor = $v;
			$this->modifiedColumns[] = LicitacoesPeer::CD_CPF_GESTOR;
		}

		if ($this->aComissoesLicitacoes !== null && $this->aComissoesLicitacoes->getCdCpfGestor() !== $v) {
			$this->aComissoesLicitacoes = null;
		}

		return $this;
	} // setCdCpfGestor()

	/**
	 * Sets the value of [dt_criac_comissao_cl] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setDtCriacComissaoCl($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new MssqlDateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new MssqlDateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_criac_comissao_cl !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_criac_comissao_cl !== null && $tmpDt = new MssqlDateTime($this->dt_criac_comissao_cl)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_criac_comissao_cl = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = LicitacoesPeer::DT_CRIAC_COMISSAO_CL;
			}
		} // if either are not null

		if ($this->aComissoesLicitacoes !== null && $this->aComissoesLicitacoes->getDtCriacComissaoCl() !== $v) {
			$this->aComissoesLicitacoes = null;
		}

		return $this;
	} // setDtCriacComissaoCl()

	/**
	 * Set the value of [nu_comissao_licit_cl] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setNuComissaoLicitCl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_comissao_licit_cl !== $v) {
			$this->nu_comissao_licit_cl = $v;
			$this->modifiedColumns[] = LicitacoesPeer::NU_COMISSAO_LICIT_CL;
		}

		if ($this->aComissoesLicitacoes !== null && $this->aComissoesLicitacoes->getNuComissaoLicitCl() !== $v) {
			$this->aComissoesLicitacoes = null;
		}

		return $this;
	} // setNuComissaoLicitCl()

	/**
	 * Set the value of [cd_cpf_resp_homolog_li] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setCdCpfRespHomologLi($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_cpf_resp_homolog_li !== $v) {
			$this->cd_cpf_resp_homolog_li = $v;
			$this->modifiedColumns[] = LicitacoesPeer::CD_CPF_RESP_HOMOLOG_LI;
		}

		if ($this->aDadosPessoais !== null && $this->aDadosPessoais->getCdCpfServMuni() !== $v) {
			$this->aDadosPessoais = null;
		}

		return $this;
	} // setCdCpfRespHomologLi()

	/**
	 * Set the value of [nm_resp_homolog_li] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setNmRespHomologLi($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nm_resp_homolog_li !== $v) {
			$this->nm_resp_homolog_li = $v;
			$this->modifiedColumns[] = LicitacoesPeer::NM_RESP_HOMOLOG_LI;
		}

		return $this;
	} // setNmRespHomologLi()

	/**
	 * Sets the value of [dt_realizacao_licit_pa] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setDtRealizacaoLicitPa($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new MssqlDateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new MssqlDateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_realizacao_licit_pa !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_realizacao_licit_pa !== null && $tmpDt = new MssqlDateTime($this->dt_realizacao_licit_pa)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_realizacao_licit_pa = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = LicitacoesPeer::DT_REALIZACAO_LICIT_PA;
			}
		} // if either are not null

		return $this;
	} // setDtRealizacaoLicitPa()

	/**
	 * Set the value of [md_processo_adm_pa] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setMdProcessoAdmPa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->md_processo_adm_pa !== $v) {
			$this->md_processo_adm_pa = $v;
			$this->modifiedColumns[] = LicitacoesPeer::MD_PROCESSO_ADM_PA;
		}

		return $this;
	} // setMdProcessoAdmPa()

	/**
	 * Set the value of [cd_cpf_resp_juridico_pa] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setCdCpfRespJuridicoPa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_cpf_resp_juridico_pa !== $v) {
			$this->cd_cpf_resp_juridico_pa = $v;
			$this->modifiedColumns[] = LicitacoesPeer::CD_CPF_RESP_JURIDICO_PA;
		}

		return $this;
	} // setCdCpfRespJuridicoPa()

	/**
	 * Set the value of [nm_resp_juridico_pa] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setNmRespJuridicoPa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nm_resp_juridico_pa !== $v) {
			$this->nm_resp_juridico_pa = $v;
			$this->modifiedColumns[] = LicitacoesPeer::NM_RESP_JURIDICO_PA;
		}

		return $this;
	} // setNmRespJuridicoPa()

	/**
	 * Sets the value of [dt_homologacao_pa] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setDtHomologacaoPa($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new MssqlDateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new MssqlDateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_homologacao_pa !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_homologacao_pa !== null && $tmpDt = new MssqlDateTime($this->dt_homologacao_pa)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_homologacao_pa = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = LicitacoesPeer::DT_HOMOLOGACAO_PA;
			}
		} // if either are not null

		return $this;
	} // setDtHomologacaoPa()

	/**
	 * Set the value of [de_justifica_preco_pa1] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setDeJustificaPrecoPa1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->de_justifica_preco_pa1 !== $v) {
			$this->de_justifica_preco_pa1 = $v;
			$this->modifiedColumns[] = LicitacoesPeer::DE_JUSTIFICA_PRECO_PA1;
		}

		return $this;
	} // setDeJustificaPrecoPa1()

	/**
	 * Set the value of [de_justifica_preco_pa2] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setDeJustificaPrecoPa2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->de_justifica_preco_pa2 !== $v) {
			$this->de_justifica_preco_pa2 = $v;
			$this->modifiedColumns[] = LicitacoesPeer::DE_JUSTIFICA_PRECO_PA2;
		}

		return $this;
	} // setDeJustificaPrecoPa2()

	/**
	 * Set the value of [de_motivo_fornec_pa1] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setDeMotivoFornecPa1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->de_motivo_fornec_pa1 !== $v) {
			$this->de_motivo_fornec_pa1 = $v;
			$this->modifiedColumns[] = LicitacoesPeer::DE_MOTIVO_FORNEC_PA1;
		}

		return $this;
	} // setDeMotivoFornecPa1()

	/**
	 * Set the value of [de_motivo_fornec_pa2] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setDeMotivoFornecPa2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->de_motivo_fornec_pa2 !== $v) {
			$this->de_motivo_fornec_pa2 = $v;
			$this->modifiedColumns[] = LicitacoesPeer::DE_MOTIVO_FORNEC_PA2;
		}

		return $this;
	} // setDeMotivoFornecPa2()

	/**
	 * Set the value of [de_fund_legal_pa] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setDeFundLegalPa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->de_fund_legal_pa !== $v) {
			$this->de_fund_legal_pa = $v;
			$this->modifiedColumns[] = LicitacoesPeer::DE_FUND_LEGAL_PA;
		}

		return $this;
	} // setDeFundLegalPa()

	/**
	 * Set the value of [nm_orgao_ata_pa] column.
	 * 
	 * @param      string $v new value
	 * @return     Licitacoes The current object (for fluent API support)
	 */
	public function setNmOrgaoAtaPa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nm_orgao_ata_pa !== $v) {
			$this->nm_orgao_ata_pa = $v;
			$this->modifiedColumns[] = LicitacoesPeer::NM_ORGAO_ATA_PA;
		}

		return $this;
	} // setNmOrgaoAtaPa()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->hr_realizacao_li !== '(\' \')') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->cd_municipio = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->dt_realizacao_licit_li = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->nu_licitacao_li = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->hr_realizacao_li = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->dt_emissao_edital_li = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->md_licitacao_li = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->tp_licitacao_li = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->de_objeto_licitacao_li1 = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->de_objeto_licitacao_li2 = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->vl_orc_estimado_obj_li = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->vl_limite_superior_obj_li = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->cd_cpf_gestor = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->dt_criac_comissao_cl = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->nu_comissao_licit_cl = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->cd_cpf_resp_homolog_li = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->nm_resp_homolog_li = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->dt_realizacao_licit_pa = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->md_processo_adm_pa = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->cd_cpf_resp_juridico_pa = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->nm_resp_juridico_pa = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->dt_homologacao_pa = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->de_justifica_preco_pa1 = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->de_justifica_preco_pa2 = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->de_motivo_fornec_pa1 = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->de_motivo_fornec_pa2 = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->de_fund_legal_pa = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->nm_orgao_ata_pa = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 27; // 27 = LicitacoesPeer::NUM_COLUMNS - LicitacoesPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Licitacoes object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aComissoesLicitacoes !== null && $this->cd_municipio !== $this->aComissoesLicitacoes->getCdMunicipio()) {
			$this->aComissoesLicitacoes = null;
		}
		if ($this->aComissoesLicitacoes !== null && $this->cd_cpf_gestor !== $this->aComissoesLicitacoes->getCdCpfGestor()) {
			$this->aComissoesLicitacoes = null;
		}
		if ($this->aComissoesLicitacoes !== null && $this->dt_criac_comissao_cl !== $this->aComissoesLicitacoes->getDtCriacComissaoCl()) {
			$this->aComissoesLicitacoes = null;
		}
		if ($this->aComissoesLicitacoes !== null && $this->nu_comissao_licit_cl !== $this->aComissoesLicitacoes->getNuComissaoLicitCl()) {
			$this->aComissoesLicitacoes = null;
		}
		if ($this->aDadosPessoais !== null && $this->cd_cpf_resp_homolog_li !== $this->aDadosPessoais->getCdCpfServMuni()) {
			$this->aDadosPessoais = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LicitacoesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = LicitacoesPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aDadosPessoais = null;
			$this->aComissoesLicitacoes = null;
			$this->collDadosEmpenhoss = null;
			$this->lastDadosEmpenhosCriteria = null;

			$this->collDotacoesLicitacoess = null;
			$this->lastDotacoesLicitacoesCriteria = null;

			$this->collItensLicitacoess = null;
			$this->lastItensLicitacoesCriteria = null;

			$this->collLicitantess = null;
			$this->lastLicitantesCriteria = null;

			$this->collPublicEditaisLicitacoess = null;
			$this->lastPublicEditaisLicitacoesCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LicitacoesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseLicitacoes:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				LicitacoesPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseLicitacoes:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LicitacoesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseLicitacoes:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseLicitacoes:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				LicitacoesPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aDadosPessoais !== null) {
				if ($this->aDadosPessoais->isModified() || $this->aDadosPessoais->isNew()) {
					$affectedRows += $this->aDadosPessoais->save($con);
				}
				$this->setDadosPessoais($this->aDadosPessoais);
			}

			if ($this->aComissoesLicitacoes !== null) {
				if ($this->aComissoesLicitacoes->isModified() || $this->aComissoesLicitacoes->isNew()) {
					$affectedRows += $this->aComissoesLicitacoes->save($con);
				}
				$this->setComissoesLicitacoes($this->aComissoesLicitacoes);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = LicitacoesPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += LicitacoesPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collDadosEmpenhoss !== null) {
				foreach ($this->collDadosEmpenhoss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDotacoesLicitacoess !== null) {
				foreach ($this->collDotacoesLicitacoess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collItensLicitacoess !== null) {
				foreach ($this->collItensLicitacoess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLicitantess !== null) {
				foreach ($this->collLicitantess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPublicEditaisLicitacoess !== null) {
				foreach ($this->collPublicEditaisLicitacoess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aDadosPessoais !== null) {
				if (!$this->aDadosPessoais->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aDadosPessoais->getValidationFailures());
				}
			}

			if ($this->aComissoesLicitacoes !== null) {
				if (!$this->aComissoesLicitacoes->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aComissoesLicitacoes->getValidationFailures());
				}
			}


			if (($retval = LicitacoesPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collDadosEmpenhoss !== null) {
					foreach ($this->collDadosEmpenhoss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDotacoesLicitacoess !== null) {
					foreach ($this->collDotacoesLicitacoess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collItensLicitacoess !== null) {
					foreach ($this->collItensLicitacoess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLicitantess !== null) {
					foreach ($this->collLicitantess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPublicEditaisLicitacoess !== null) {
					foreach ($this->collPublicEditaisLicitacoess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = LicitacoesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCdMunicipio();
				break;
			case 1:
				return $this->getDtRealizacaoLicitLi();
				break;
			case 2:
				return $this->getNuLicitacaoLi();
				break;
			case 3:
				return $this->getHrRealizacaoLi();
				break;
			case 4:
				return $this->getDtEmissaoEditalLi();
				break;
			case 5:
				return $this->getMdLicitacaoLi();
				break;
			case 6:
				return $this->getTpLicitacaoLi();
				break;
			case 7:
				return $this->getDeObjetoLicitacaoLi1();
				break;
			case 8:
				return $this->getDeObjetoLicitacaoLi2();
				break;
			case 9:
				return $this->getVlOrcEstimadoObjLi();
				break;
			case 10:
				return $this->getVlLimiteSuperiorObjLi();
				break;
			case 11:
				return $this->getCdCpfGestor();
				break;
			case 12:
				return $this->getDtCriacComissaoCl();
				break;
			case 13:
				return $this->getNuComissaoLicitCl();
				break;
			case 14:
				return $this->getCdCpfRespHomologLi();
				break;
			case 15:
				return $this->getNmRespHomologLi();
				break;
			case 16:
				return $this->getDtRealizacaoLicitPa();
				break;
			case 17:
				return $this->getMdProcessoAdmPa();
				break;
			case 18:
				return $this->getCdCpfRespJuridicoPa();
				break;
			case 19:
				return $this->getNmRespJuridicoPa();
				break;
			case 20:
				return $this->getDtHomologacaoPa();
				break;
			case 21:
				return $this->getDeJustificaPrecoPa1();
				break;
			case 22:
				return $this->getDeJustificaPrecoPa2();
				break;
			case 23:
				return $this->getDeMotivoFornecPa1();
				break;
			case 24:
				return $this->getDeMotivoFornecPa2();
				break;
			case 25:
				return $this->getDeFundLegalPa();
				break;
			case 26:
				return $this->getNmOrgaoAtaPa();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = LicitacoesPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCdMunicipio(),
			$keys[1] => $this->getDtRealizacaoLicitLi(),
			$keys[2] => $this->getNuLicitacaoLi(),
			$keys[3] => $this->getHrRealizacaoLi(),
			$keys[4] => $this->getDtEmissaoEditalLi(),
			$keys[5] => $this->getMdLicitacaoLi(),
			$keys[6] => $this->getTpLicitacaoLi(),
			$keys[7] => $this->getDeObjetoLicitacaoLi1(),
			$keys[8] => $this->getDeObjetoLicitacaoLi2(),
			$keys[9] => $this->getVlOrcEstimadoObjLi(),
			$keys[10] => $this->getVlLimiteSuperiorObjLi(),
			$keys[11] => $this->getCdCpfGestor(),
			$keys[12] => $this->getDtCriacComissaoCl(),
			$keys[13] => $this->getNuComissaoLicitCl(),
			$keys[14] => $this->getCdCpfRespHomologLi(),
			$keys[15] => $this->getNmRespHomologLi(),
			$keys[16] => $this->getDtRealizacaoLicitPa(),
			$keys[17] => $this->getMdProcessoAdmPa(),
			$keys[18] => $this->getCdCpfRespJuridicoPa(),
			$keys[19] => $this->getNmRespJuridicoPa(),
			$keys[20] => $this->getDtHomologacaoPa(),
			$keys[21] => $this->getDeJustificaPrecoPa1(),
			$keys[22] => $this->getDeJustificaPrecoPa2(),
			$keys[23] => $this->getDeMotivoFornecPa1(),
			$keys[24] => $this->getDeMotivoFornecPa2(),
			$keys[25] => $this->getDeFundLegalPa(),
			$keys[26] => $this->getNmOrgaoAtaPa(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = LicitacoesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCdMunicipio($value);
				break;
			case 1:
				$this->setDtRealizacaoLicitLi($value);
				break;
			case 2:
				$this->setNuLicitacaoLi($value);
				break;
			case 3:
				$this->setHrRealizacaoLi($value);
				break;
			case 4:
				$this->setDtEmissaoEditalLi($value);
				break;
			case 5:
				$this->setMdLicitacaoLi($value);
				break;
			case 6:
				$this->setTpLicitacaoLi($value);
				break;
			case 7:
				$this->setDeObjetoLicitacaoLi1($value);
				break;
			case 8:
				$this->setDeObjetoLicitacaoLi2($value);
				break;
			case 9:
				$this->setVlOrcEstimadoObjLi($value);
				break;
			case 10:
				$this->setVlLimiteSuperiorObjLi($value);
				break;
			case 11:
				$this->setCdCpfGestor($value);
				break;
			case 12:
				$this->setDtCriacComissaoCl($value);
				break;
			case 13:
				$this->setNuComissaoLicitCl($value);
				break;
			case 14:
				$this->setCdCpfRespHomologLi($value);
				break;
			case 15:
				$this->setNmRespHomologLi($value);
				break;
			case 16:
				$this->setDtRealizacaoLicitPa($value);
				break;
			case 17:
				$this->setMdProcessoAdmPa($value);
				break;
			case 18:
				$this->setCdCpfRespJuridicoPa($value);
				break;
			case 19:
				$this->setNmRespJuridicoPa($value);
				break;
			case 20:
				$this->setDtHomologacaoPa($value);
				break;
			case 21:
				$this->setDeJustificaPrecoPa1($value);
				break;
			case 22:
				$this->setDeJustificaPrecoPa2($value);
				break;
			case 23:
				$this->setDeMotivoFornecPa1($value);
				break;
			case 24:
				$this->setDeMotivoFornecPa2($value);
				break;
			case 25:
				$this->setDeFundLegalPa($value);
				break;
			case 26:
				$this->setNmOrgaoAtaPa($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = LicitacoesPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCdMunicipio($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDtRealizacaoLicitLi($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setNuLicitacaoLi($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setHrRealizacaoLi($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setDtEmissaoEditalLi($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setMdLicitacaoLi($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setTpLicitacaoLi($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setDeObjetoLicitacaoLi1($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDeObjetoLicitacaoLi2($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setVlOrcEstimadoObjLi($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setVlLimiteSuperiorObjLi($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCdCpfGestor($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setDtCriacComissaoCl($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setNuComissaoLicitCl($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCdCpfRespHomologLi($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setNmRespHomologLi($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setDtRealizacaoLicitPa($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setMdProcessoAdmPa($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCdCpfRespJuridicoPa($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setNmRespJuridicoPa($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setDtHomologacaoPa($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setDeJustificaPrecoPa1($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setDeJustificaPrecoPa2($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setDeMotivoFornecPa1($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setDeMotivoFornecPa2($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setDeFundLegalPa($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setNmOrgaoAtaPa($arr[$keys[26]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);

		if ($this->isColumnModified(LicitacoesPeer::CD_MUNICIPIO)) $criteria->add(LicitacoesPeer::CD_MUNICIPIO, $this->cd_municipio);
		if ($this->isColumnModified(LicitacoesPeer::DT_REALIZACAO_LICIT_LI)) $criteria->add(LicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);
		if ($this->isColumnModified(LicitacoesPeer::NU_LICITACAO_LI)) $criteria->add(LicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);
		if ($this->isColumnModified(LicitacoesPeer::HR_REALIZACAO_LI)) $criteria->add(LicitacoesPeer::HR_REALIZACAO_LI, $this->hr_realizacao_li);
		if ($this->isColumnModified(LicitacoesPeer::DT_EMISSAO_EDITAL_LI)) $criteria->add(LicitacoesPeer::DT_EMISSAO_EDITAL_LI, $this->dt_emissao_edital_li);
		if ($this->isColumnModified(LicitacoesPeer::MD_LICITACAO_LI)) $criteria->add(LicitacoesPeer::MD_LICITACAO_LI, $this->md_licitacao_li);
		if ($this->isColumnModified(LicitacoesPeer::TP_LICITACAO_LI)) $criteria->add(LicitacoesPeer::TP_LICITACAO_LI, $this->tp_licitacao_li);
		if ($this->isColumnModified(LicitacoesPeer::DE_OBJETO_LICITACAO_LI1)) $criteria->add(LicitacoesPeer::DE_OBJETO_LICITACAO_LI1, $this->de_objeto_licitacao_li1);
		if ($this->isColumnModified(LicitacoesPeer::DE_OBJETO_LICITACAO_LI2)) $criteria->add(LicitacoesPeer::DE_OBJETO_LICITACAO_LI2, $this->de_objeto_licitacao_li2);
		if ($this->isColumnModified(LicitacoesPeer::VL_ORC_ESTIMADO_OBJ_LI)) $criteria->add(LicitacoesPeer::VL_ORC_ESTIMADO_OBJ_LI, $this->vl_orc_estimado_obj_li);
		if ($this->isColumnModified(LicitacoesPeer::VL_LIMITE_SUPERIOR_OBJ_LI)) $criteria->add(LicitacoesPeer::VL_LIMITE_SUPERIOR_OBJ_LI, $this->vl_limite_superior_obj_li);
		if ($this->isColumnModified(LicitacoesPeer::CD_CPF_GESTOR)) $criteria->add(LicitacoesPeer::CD_CPF_GESTOR, $this->cd_cpf_gestor);
		if ($this->isColumnModified(LicitacoesPeer::DT_CRIAC_COMISSAO_CL)) $criteria->add(LicitacoesPeer::DT_CRIAC_COMISSAO_CL, $this->dt_criac_comissao_cl);
		if ($this->isColumnModified(LicitacoesPeer::NU_COMISSAO_LICIT_CL)) $criteria->add(LicitacoesPeer::NU_COMISSAO_LICIT_CL, $this->nu_comissao_licit_cl);
		if ($this->isColumnModified(LicitacoesPeer::CD_CPF_RESP_HOMOLOG_LI)) $criteria->add(LicitacoesPeer::CD_CPF_RESP_HOMOLOG_LI, $this->cd_cpf_resp_homolog_li);
		if ($this->isColumnModified(LicitacoesPeer::NM_RESP_HOMOLOG_LI)) $criteria->add(LicitacoesPeer::NM_RESP_HOMOLOG_LI, $this->nm_resp_homolog_li);
		if ($this->isColumnModified(LicitacoesPeer::DT_REALIZACAO_LICIT_PA)) $criteria->add(LicitacoesPeer::DT_REALIZACAO_LICIT_PA, $this->dt_realizacao_licit_pa);
		if ($this->isColumnModified(LicitacoesPeer::MD_PROCESSO_ADM_PA)) $criteria->add(LicitacoesPeer::MD_PROCESSO_ADM_PA, $this->md_processo_adm_pa);
		if ($this->isColumnModified(LicitacoesPeer::CD_CPF_RESP_JURIDICO_PA)) $criteria->add(LicitacoesPeer::CD_CPF_RESP_JURIDICO_PA, $this->cd_cpf_resp_juridico_pa);
		if ($this->isColumnModified(LicitacoesPeer::NM_RESP_JURIDICO_PA)) $criteria->add(LicitacoesPeer::NM_RESP_JURIDICO_PA, $this->nm_resp_juridico_pa);
		if ($this->isColumnModified(LicitacoesPeer::DT_HOMOLOGACAO_PA)) $criteria->add(LicitacoesPeer::DT_HOMOLOGACAO_PA, $this->dt_homologacao_pa);
		if ($this->isColumnModified(LicitacoesPeer::DE_JUSTIFICA_PRECO_PA1)) $criteria->add(LicitacoesPeer::DE_JUSTIFICA_PRECO_PA1, $this->de_justifica_preco_pa1);
		if ($this->isColumnModified(LicitacoesPeer::DE_JUSTIFICA_PRECO_PA2)) $criteria->add(LicitacoesPeer::DE_JUSTIFICA_PRECO_PA2, $this->de_justifica_preco_pa2);
		if ($this->isColumnModified(LicitacoesPeer::DE_MOTIVO_FORNEC_PA1)) $criteria->add(LicitacoesPeer::DE_MOTIVO_FORNEC_PA1, $this->de_motivo_fornec_pa1);
		if ($this->isColumnModified(LicitacoesPeer::DE_MOTIVO_FORNEC_PA2)) $criteria->add(LicitacoesPeer::DE_MOTIVO_FORNEC_PA2, $this->de_motivo_fornec_pa2);
		if ($this->isColumnModified(LicitacoesPeer::DE_FUND_LEGAL_PA)) $criteria->add(LicitacoesPeer::DE_FUND_LEGAL_PA, $this->de_fund_legal_pa);
		if ($this->isColumnModified(LicitacoesPeer::NM_ORGAO_ATA_PA)) $criteria->add(LicitacoesPeer::NM_ORGAO_ATA_PA, $this->nm_orgao_ata_pa);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);

		$criteria->add(LicitacoesPeer::CD_MUNICIPIO, $this->cd_municipio);
		$criteria->add(LicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);
		$criteria->add(LicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

		return $criteria;
	}

	/**
	 * Returns the composite primary key for this object.
	 * The array elements will be in same order as specified in XML.
	 * @return     array
	 */
	public function getPrimaryKey()
	{
		$pks = array();

		$pks[0] = $this->getCdMunicipio();

		$pks[1] = $this->getDtRealizacaoLicitLi();

		$pks[2] = $this->getNuLicitacaoLi();

		return $pks;
	}

	/**
	 * Set the [composite] primary key.
	 *
	 * @param      array $keys The elements of the composite key (order must match the order in XML file).
	 * @return     void
	 */
	public function setPrimaryKey($keys)
	{

		$this->setCdMunicipio($keys[0]);

		$this->setDtRealizacaoLicitLi($keys[1]);

		$this->setNuLicitacaoLi($keys[2]);

	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Licitacoes (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCdMunicipio($this->cd_municipio);

		$copyObj->setDtRealizacaoLicitLi($this->dt_realizacao_licit_li);

		$copyObj->setNuLicitacaoLi($this->nu_licitacao_li);

		$copyObj->setHrRealizacaoLi($this->hr_realizacao_li);

		$copyObj->setDtEmissaoEditalLi($this->dt_emissao_edital_li);

		$copyObj->setMdLicitacaoLi($this->md_licitacao_li);

		$copyObj->setTpLicitacaoLi($this->tp_licitacao_li);

		$copyObj->setDeObjetoLicitacaoLi1($this->de_objeto_licitacao_li1);

		$copyObj->setDeObjetoLicitacaoLi2($this->de_objeto_licitacao_li2);

		$copyObj->setVlOrcEstimadoObjLi($this->vl_orc_estimado_obj_li);

		$copyObj->setVlLimiteSuperiorObjLi($this->vl_limite_superior_obj_li);

		$copyObj->setCdCpfGestor($this->cd_cpf_gestor);

		$copyObj->setDtCriacComissaoCl($this->dt_criac_comissao_cl);

		$copyObj->setNuComissaoLicitCl($this->nu_comissao_licit_cl);

		$copyObj->setCdCpfRespHomologLi($this->cd_cpf_resp_homolog_li);

		$copyObj->setNmRespHomologLi($this->nm_resp_homolog_li);

		$copyObj->setDtRealizacaoLicitPa($this->dt_realizacao_licit_pa);

		$copyObj->setMdProcessoAdmPa($this->md_processo_adm_pa);

		$copyObj->setCdCpfRespJuridicoPa($this->cd_cpf_resp_juridico_pa);

		$copyObj->setNmRespJuridicoPa($this->nm_resp_juridico_pa);

		$copyObj->setDtHomologacaoPa($this->dt_homologacao_pa);

		$copyObj->setDeJustificaPrecoPa1($this->de_justifica_preco_pa1);

		$copyObj->setDeJustificaPrecoPa2($this->de_justifica_preco_pa2);

		$copyObj->setDeMotivoFornecPa1($this->de_motivo_fornec_pa1);

		$copyObj->setDeMotivoFornecPa2($this->de_motivo_fornec_pa2);

		$copyObj->setDeFundLegalPa($this->de_fund_legal_pa);

		$copyObj->setNmOrgaoAtaPa($this->nm_orgao_ata_pa);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getDadosEmpenhoss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDadosEmpenhos($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDotacoesLicitacoess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDotacoesLicitacoes($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getItensLicitacoess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addItensLicitacoes($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLicitantess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLicitantes($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPublicEditaisLicitacoess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPublicEditaisLicitacoes($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Licitacoes Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     LicitacoesPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new LicitacoesPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a DadosPessoais object.
	 *
	 * @param      DadosPessoais $v
	 * @return     Licitacoes The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setDadosPessoais(DadosPessoais $v = null)
	{
		if ($v === null) {
			$this->setCdCpfRespHomologLi(NULL);
		} else {
			$this->setCdCpfRespHomologLi($v->getCdCpfServMuni());
		}

		$this->aDadosPessoais = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the DadosPessoais object, it will not be re-added.
		if ($v !== null) {
			$v->addLicitacoes($this);
		}

		return $this;
	}


	/**
	 * Get the associated DadosPessoais object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     DadosPessoais The associated DadosPessoais object.
	 * @throws     PropelException
	 */
	public function getDadosPessoais(PropelPDO $con = null)
	{
		if ($this->aDadosPessoais === null && (($this->cd_cpf_resp_homolog_li !== "" && $this->cd_cpf_resp_homolog_li !== null))) {
			$this->aDadosPessoais = DadosPessoaisPeer::retrieveByPk($this->cd_cpf_resp_homolog_li);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aDadosPessoais->addLicitacoess($this);
			 */
		}
		return $this->aDadosPessoais;
	}

	/**
	 * Declares an association between this object and a ComissoesLicitacoes object.
	 *
	 * @param      ComissoesLicitacoes $v
	 * @return     Licitacoes The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setComissoesLicitacoes(ComissoesLicitacoes $v = null)
	{
		if ($v === null) {
			$this->setCdCpfGestor(NULL);
		} else {
			$this->setCdCpfGestor($v->getCdCpfGestor());
		}

		if ($v === null) {
			$this->setCdMunicipio(NULL);
		} else {
			$this->setCdMunicipio($v->getCdMunicipio());
		}

		if ($v === null) {
			$this->setDtCriacComissaoCl(NULL);
		} else {
			$this->setDtCriacComissaoCl($v->getDtCriacComissaoCl());
		}

		if ($v === null) {
			$this->setNuComissaoLicitCl(NULL);
		} else {
			$this->setNuComissaoLicitCl($v->getNuComissaoLicitCl());
		}

		$this->aComissoesLicitacoes = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the ComissoesLicitacoes object, it will not be re-added.
		if ($v !== null) {
			$v->addLicitacoes($this);
		}

		return $this;
	}


	/**
	 * Get the associated ComissoesLicitacoes object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     ComissoesLicitacoes The associated ComissoesLicitacoes object.
	 * @throws     PropelException
	 */
	public function getComissoesLicitacoes(PropelPDO $con = null)
	{
		if ($this->aComissoesLicitacoes === null && (($this->cd_cpf_gestor !== "" && $this->cd_cpf_gestor !== null) && ($this->cd_municipio !== "" && $this->cd_municipio !== null) && ($this->dt_criac_comissao_cl !== "" && $this->dt_criac_comissao_cl !== null) && ($this->nu_comissao_licit_cl !== "" && $this->nu_comissao_licit_cl !== null))) {
			$c = new Criteria(ComissoesLicitacoesPeer::DATABASE_NAME);
			$c->add(ComissoesLicitacoesPeer::CD_CPF_GESTOR, $this->cd_cpf_gestor);
			$c->add(ComissoesLicitacoesPeer::CD_MUNICIPIO, $this->cd_municipio);
			$c->add(ComissoesLicitacoesPeer::DT_CRIAC_COMISSAO_CL, $this->dt_criac_comissao_cl);
			$c->add(ComissoesLicitacoesPeer::NU_COMISSAO_LICIT_CL, $this->nu_comissao_licit_cl);
			$this->aComissoesLicitacoes = ComissoesLicitacoesPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aComissoesLicitacoes->addLicitacoess($this);
			 */
		}
		return $this->aComissoesLicitacoes;
	}

	/**
	 * Clears out the collDadosEmpenhoss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDadosEmpenhoss()
	 */
	public function clearDadosEmpenhoss()
	{
		$this->collDadosEmpenhoss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDadosEmpenhoss collection (array).
	 *
	 * By default this just sets the collDadosEmpenhoss collection to an empty array (like clearcollDadosEmpenhoss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDadosEmpenhoss()
	{
		$this->collDadosEmpenhoss = array();
	}

	/**
	 * Gets an array of DadosEmpenhos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Licitacoes has previously been saved, it will retrieve
	 * related DadosEmpenhoss from storage. If this Licitacoes is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DadosEmpenhos[]
	 * @throws     PropelException
	 */
	public function getDadosEmpenhoss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDadosEmpenhoss === null) {
			if ($this->isNew()) {
			   $this->collDadosEmpenhoss = array();
			} else {

				$criteria->add(DadosEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(DadosEmpenhosPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(DadosEmpenhosPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				DadosEmpenhosPeer::addSelectColumns($criteria);
				$this->collDadosEmpenhoss = DadosEmpenhosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DadosEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(DadosEmpenhosPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);


				$criteria->add(DadosEmpenhosPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				DadosEmpenhosPeer::addSelectColumns($criteria);
				if (!isset($this->lastDadosEmpenhosCriteria) || !$this->lastDadosEmpenhosCriteria->equals($criteria)) {
					$this->collDadosEmpenhoss = DadosEmpenhosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDadosEmpenhosCriteria = $criteria;
		return $this->collDadosEmpenhoss;
	}

	/**
	 * Returns the number of related DadosEmpenhos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DadosEmpenhos objects.
	 * @throws     PropelException
	 */
	public function countDadosEmpenhoss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDadosEmpenhoss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DadosEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(DadosEmpenhosPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(DadosEmpenhosPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				$count = DadosEmpenhosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DadosEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(DadosEmpenhosPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);


				$criteria->add(DadosEmpenhosPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				if (!isset($this->lastDadosEmpenhosCriteria) || !$this->lastDadosEmpenhosCriteria->equals($criteria)) {
					$count = DadosEmpenhosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDadosEmpenhoss);
				}
			} else {
				$count = count($this->collDadosEmpenhoss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DadosEmpenhos object to this object
	 * through the DadosEmpenhos foreign key attribute.
	 *
	 * @param      DadosEmpenhos $l DadosEmpenhos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDadosEmpenhos(DadosEmpenhos $l)
	{
		if ($this->collDadosEmpenhoss === null) {
			$this->initDadosEmpenhoss();
		}
		if (!in_array($l, $this->collDadosEmpenhoss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDadosEmpenhoss, $l);
			$l->setLicitacoes($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Licitacoes is new, it will return
	 * an empty collection; or if this Licitacoes has previously
	 * been saved, it will retrieve related DadosEmpenhoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Licitacoes.
	 */
	public function getDadosEmpenhossJoinNotasEmpenhos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDadosEmpenhoss === null) {
			if ($this->isNew()) {
				$this->collDadosEmpenhoss = array();
			} else {

				$criteria->add(DadosEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(DadosEmpenhosPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(DadosEmpenhosPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				$this->collDadosEmpenhoss = DadosEmpenhosPeer::doSelectJoinNotasEmpenhos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DadosEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(DadosEmpenhosPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

			$criteria->add(DadosEmpenhosPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

			if (!isset($this->lastDadosEmpenhosCriteria) || !$this->lastDadosEmpenhosCriteria->equals($criteria)) {
				$this->collDadosEmpenhoss = DadosEmpenhosPeer::doSelectJoinNotasEmpenhos($criteria, $con, $join_behavior);
			}
		}
		$this->lastDadosEmpenhosCriteria = $criteria;

		return $this->collDadosEmpenhoss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Licitacoes is new, it will return
	 * an empty collection; or if this Licitacoes has previously
	 * been saved, it will retrieve related DadosEmpenhoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Licitacoes.
	 */
	public function getDadosEmpenhossJoinContratos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDadosEmpenhoss === null) {
			if ($this->isNew()) {
				$this->collDadosEmpenhoss = array();
			} else {

				$criteria->add(DadosEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(DadosEmpenhosPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(DadosEmpenhosPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				$this->collDadosEmpenhoss = DadosEmpenhosPeer::doSelectJoinContratos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DadosEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(DadosEmpenhosPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

			$criteria->add(DadosEmpenhosPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

			if (!isset($this->lastDadosEmpenhosCriteria) || !$this->lastDadosEmpenhosCriteria->equals($criteria)) {
				$this->collDadosEmpenhoss = DadosEmpenhosPeer::doSelectJoinContratos($criteria, $con, $join_behavior);
			}
		}
		$this->lastDadosEmpenhosCriteria = $criteria;

		return $this->collDadosEmpenhoss;
	}

	/**
	 * Clears out the collDotacoesLicitacoess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDotacoesLicitacoess()
	 */
	public function clearDotacoesLicitacoess()
	{
		$this->collDotacoesLicitacoess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDotacoesLicitacoess collection (array).
	 *
	 * By default this just sets the collDotacoesLicitacoess collection to an empty array (like clearcollDotacoesLicitacoess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDotacoesLicitacoess()
	{
		$this->collDotacoesLicitacoess = array();
	}

	/**
	 * Gets an array of DotacoesLicitacoes objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Licitacoes has previously been saved, it will retrieve
	 * related DotacoesLicitacoess from storage. If this Licitacoes is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DotacoesLicitacoes[]
	 * @throws     PropelException
	 */
	public function getDotacoesLicitacoess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDotacoesLicitacoess === null) {
			if ($this->isNew()) {
			   $this->collDotacoesLicitacoess = array();
			} else {

				$criteria->add(DotacoesLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(DotacoesLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				DotacoesLicitacoesPeer::addSelectColumns($criteria);
				$this->collDotacoesLicitacoess = DotacoesLicitacoesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DotacoesLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);


				$criteria->add(DotacoesLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				DotacoesLicitacoesPeer::addSelectColumns($criteria);
				if (!isset($this->lastDotacoesLicitacoesCriteria) || !$this->lastDotacoesLicitacoesCriteria->equals($criteria)) {
					$this->collDotacoesLicitacoess = DotacoesLicitacoesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDotacoesLicitacoesCriteria = $criteria;
		return $this->collDotacoesLicitacoess;
	}

	/**
	 * Returns the number of related DotacoesLicitacoes objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DotacoesLicitacoes objects.
	 * @throws     PropelException
	 */
	public function countDotacoesLicitacoess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDotacoesLicitacoess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DotacoesLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(DotacoesLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				$count = DotacoesLicitacoesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DotacoesLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);


				$criteria->add(DotacoesLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				if (!isset($this->lastDotacoesLicitacoesCriteria) || !$this->lastDotacoesLicitacoesCriteria->equals($criteria)) {
					$count = DotacoesLicitacoesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDotacoesLicitacoess);
				}
			} else {
				$count = count($this->collDotacoesLicitacoess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DotacoesLicitacoes object to this object
	 * through the DotacoesLicitacoes foreign key attribute.
	 *
	 * @param      DotacoesLicitacoes $l DotacoesLicitacoes
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDotacoesLicitacoes(DotacoesLicitacoes $l)
	{
		if ($this->collDotacoesLicitacoess === null) {
			$this->initDotacoesLicitacoess();
		}
		if (!in_array($l, $this->collDotacoesLicitacoess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDotacoesLicitacoess, $l);
			$l->setLicitacoes($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Licitacoes is new, it will return
	 * an empty collection; or if this Licitacoes has previously
	 * been saved, it will retrieve related DotacoesLicitacoess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Licitacoes.
	 */
	public function getDotacoesLicitacoessJoinCatEcoProjAtiv($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDotacoesLicitacoess === null) {
			if ($this->isNew()) {
				$this->collDotacoesLicitacoess = array();
			} else {

				$criteria->add(DotacoesLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(DotacoesLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				$this->collDotacoesLicitacoess = DotacoesLicitacoesPeer::doSelectJoinCatEcoProjAtiv($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DotacoesLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

			$criteria->add(DotacoesLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

			if (!isset($this->lastDotacoesLicitacoesCriteria) || !$this->lastDotacoesLicitacoesCriteria->equals($criteria)) {
				$this->collDotacoesLicitacoess = DotacoesLicitacoesPeer::doSelectJoinCatEcoProjAtiv($criteria, $con, $join_behavior);
			}
		}
		$this->lastDotacoesLicitacoesCriteria = $criteria;

		return $this->collDotacoesLicitacoess;
	}

	/**
	 * Clears out the collItensLicitacoess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addItensLicitacoess()
	 */
	public function clearItensLicitacoess()
	{
		$this->collItensLicitacoess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collItensLicitacoess collection (array).
	 *
	 * By default this just sets the collItensLicitacoess collection to an empty array (like clearcollItensLicitacoess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initItensLicitacoess()
	{
		$this->collItensLicitacoess = array();
	}

	/**
	 * Gets an array of ItensLicitacoes objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Licitacoes has previously been saved, it will retrieve
	 * related ItensLicitacoess from storage. If this Licitacoes is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ItensLicitacoes[]
	 * @throws     PropelException
	 */
	public function getItensLicitacoess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collItensLicitacoess === null) {
			if ($this->isNew()) {
			   $this->collItensLicitacoess = array();
			} else {

				$criteria->add(ItensLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(ItensLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				ItensLicitacoesPeer::addSelectColumns($criteria);
				$this->collItensLicitacoess = ItensLicitacoesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ItensLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);


				$criteria->add(ItensLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				ItensLicitacoesPeer::addSelectColumns($criteria);
				if (!isset($this->lastItensLicitacoesCriteria) || !$this->lastItensLicitacoesCriteria->equals($criteria)) {
					$this->collItensLicitacoess = ItensLicitacoesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastItensLicitacoesCriteria = $criteria;
		return $this->collItensLicitacoess;
	}

	/**
	 * Returns the number of related ItensLicitacoes objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ItensLicitacoes objects.
	 * @throws     PropelException
	 */
	public function countItensLicitacoess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collItensLicitacoess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ItensLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(ItensLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				$count = ItensLicitacoesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ItensLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);


				$criteria->add(ItensLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				if (!isset($this->lastItensLicitacoesCriteria) || !$this->lastItensLicitacoesCriteria->equals($criteria)) {
					$count = ItensLicitacoesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collItensLicitacoess);
				}
			} else {
				$count = count($this->collItensLicitacoess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ItensLicitacoes object to this object
	 * through the ItensLicitacoes foreign key attribute.
	 *
	 * @param      ItensLicitacoes $l ItensLicitacoes
	 * @return     void
	 * @throws     PropelException
	 */
	public function addItensLicitacoes(ItensLicitacoes $l)
	{
		if ($this->collItensLicitacoess === null) {
			$this->initItensLicitacoess();
		}
		if (!in_array($l, $this->collItensLicitacoess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collItensLicitacoess, $l);
			$l->setLicitacoes($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Licitacoes is new, it will return
	 * an empty collection; or if this Licitacoes has previously
	 * been saved, it will retrieve related ItensLicitacoess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Licitacoes.
	 */
	public function getItensLicitacoessJoinLicitantes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collItensLicitacoess === null) {
			if ($this->isNew()) {
				$this->collItensLicitacoess = array();
			} else {

				$criteria->add(ItensLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(ItensLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				$this->collItensLicitacoess = ItensLicitacoesPeer::doSelectJoinLicitantes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ItensLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

			$criteria->add(ItensLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

			if (!isset($this->lastItensLicitacoesCriteria) || !$this->lastItensLicitacoesCriteria->equals($criteria)) {
				$this->collItensLicitacoess = ItensLicitacoesPeer::doSelectJoinLicitantes($criteria, $con, $join_behavior);
			}
		}
		$this->lastItensLicitacoesCriteria = $criteria;

		return $this->collItensLicitacoess;
	}

	/**
	 * Clears out the collLicitantess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLicitantess()
	 */
	public function clearLicitantess()
	{
		$this->collLicitantess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLicitantess collection (array).
	 *
	 * By default this just sets the collLicitantess collection to an empty array (like clearcollLicitantess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLicitantess()
	{
		$this->collLicitantess = array();
	}

	/**
	 * Gets an array of Licitantes objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Licitacoes has previously been saved, it will retrieve
	 * related Licitantess from storage. If this Licitacoes is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Licitantes[]
	 * @throws     PropelException
	 */
	public function getLicitantess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLicitantess === null) {
			if ($this->isNew()) {
			   $this->collLicitantess = array();
			} else {

				$criteria->add(LicitantesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(LicitantesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				LicitantesPeer::addSelectColumns($criteria);
				$this->collLicitantess = LicitantesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LicitantesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);


				$criteria->add(LicitantesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				LicitantesPeer::addSelectColumns($criteria);
				if (!isset($this->lastLicitantesCriteria) || !$this->lastLicitantesCriteria->equals($criteria)) {
					$this->collLicitantess = LicitantesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLicitantesCriteria = $criteria;
		return $this->collLicitantess;
	}

	/**
	 * Returns the number of related Licitantes objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Licitantes objects.
	 * @throws     PropelException
	 */
	public function countLicitantess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLicitantess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LicitantesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(LicitantesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				$count = LicitantesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LicitantesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);


				$criteria->add(LicitantesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				if (!isset($this->lastLicitantesCriteria) || !$this->lastLicitantesCriteria->equals($criteria)) {
					$count = LicitantesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collLicitantess);
				}
			} else {
				$count = count($this->collLicitantess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Licitantes object to this object
	 * through the Licitantes foreign key attribute.
	 *
	 * @param      Licitantes $l Licitantes
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLicitantes(Licitantes $l)
	{
		if ($this->collLicitantess === null) {
			$this->initLicitantess();
		}
		if (!in_array($l, $this->collLicitantess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLicitantess, $l);
			$l->setLicitacoes($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Licitacoes is new, it will return
	 * an empty collection; or if this Licitacoes has previously
	 * been saved, it will retrieve related Licitantess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Licitacoes.
	 */
	public function getLicitantessJoinNegociantes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLicitantess === null) {
			if ($this->isNew()) {
				$this->collLicitantess = array();
			} else {

				$criteria->add(LicitantesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(LicitantesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				$this->collLicitantess = LicitantesPeer::doSelectJoinNegociantes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(LicitantesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

			$criteria->add(LicitantesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

			if (!isset($this->lastLicitantesCriteria) || !$this->lastLicitantesCriteria->equals($criteria)) {
				$this->collLicitantess = LicitantesPeer::doSelectJoinNegociantes($criteria, $con, $join_behavior);
			}
		}
		$this->lastLicitantesCriteria = $criteria;

		return $this->collLicitantess;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Licitacoes is new, it will return
	 * an empty collection; or if this Licitacoes has previously
	 * been saved, it will retrieve related Licitantess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Licitacoes.
	 */
	public function getLicitantessJoinUnidadesFederacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLicitantess === null) {
			if ($this->isNew()) {
				$this->collLicitantess = array();
			} else {

				$criteria->add(LicitantesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(LicitantesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				$this->collLicitantess = LicitantesPeer::doSelectJoinUnidadesFederacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(LicitantesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

			$criteria->add(LicitantesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

			if (!isset($this->lastLicitantesCriteria) || !$this->lastLicitantesCriteria->equals($criteria)) {
				$this->collLicitantess = LicitantesPeer::doSelectJoinUnidadesFederacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastLicitantesCriteria = $criteria;

		return $this->collLicitantess;
	}

	/**
	 * Clears out the collPublicEditaisLicitacoess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPublicEditaisLicitacoess()
	 */
	public function clearPublicEditaisLicitacoess()
	{
		$this->collPublicEditaisLicitacoess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPublicEditaisLicitacoess collection (array).
	 *
	 * By default this just sets the collPublicEditaisLicitacoess collection to an empty array (like clearcollPublicEditaisLicitacoess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPublicEditaisLicitacoess()
	{
		$this->collPublicEditaisLicitacoess = array();
	}

	/**
	 * Gets an array of PublicEditaisLicitacoes objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Licitacoes has previously been saved, it will retrieve
	 * related PublicEditaisLicitacoess from storage. If this Licitacoes is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PublicEditaisLicitacoes[]
	 * @throws     PropelException
	 */
	public function getPublicEditaisLicitacoess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPublicEditaisLicitacoess === null) {
			if ($this->isNew()) {
			   $this->collPublicEditaisLicitacoess = array();
			} else {

				$criteria->add(PublicEditaisLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(PublicEditaisLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				PublicEditaisLicitacoesPeer::addSelectColumns($criteria);
				$this->collPublicEditaisLicitacoess = PublicEditaisLicitacoesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PublicEditaisLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);


				$criteria->add(PublicEditaisLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				PublicEditaisLicitacoesPeer::addSelectColumns($criteria);
				if (!isset($this->lastPublicEditaisLicitacoesCriteria) || !$this->lastPublicEditaisLicitacoesCriteria->equals($criteria)) {
					$this->collPublicEditaisLicitacoess = PublicEditaisLicitacoesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPublicEditaisLicitacoesCriteria = $criteria;
		return $this->collPublicEditaisLicitacoess;
	}

	/**
	 * Returns the number of related PublicEditaisLicitacoes objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PublicEditaisLicitacoes objects.
	 * @throws     PropelException
	 */
	public function countPublicEditaisLicitacoess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LicitacoesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPublicEditaisLicitacoess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PublicEditaisLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);

				$criteria->add(PublicEditaisLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				$count = PublicEditaisLicitacoesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PublicEditaisLicitacoesPeer::DT_REALIZACAO_LICIT_LI, $this->dt_realizacao_licit_li);


				$criteria->add(PublicEditaisLicitacoesPeer::NU_LICITACAO_LI, $this->nu_licitacao_li);

				if (!isset($this->lastPublicEditaisLicitacoesCriteria) || !$this->lastPublicEditaisLicitacoesCriteria->equals($criteria)) {
					$count = PublicEditaisLicitacoesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPublicEditaisLicitacoess);
				}
			} else {
				$count = count($this->collPublicEditaisLicitacoess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PublicEditaisLicitacoes object to this object
	 * through the PublicEditaisLicitacoes foreign key attribute.
	 *
	 * @param      PublicEditaisLicitacoes $l PublicEditaisLicitacoes
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPublicEditaisLicitacoes(PublicEditaisLicitacoes $l)
	{
		if ($this->collPublicEditaisLicitacoess === null) {
			$this->initPublicEditaisLicitacoess();
		}
		if (!in_array($l, $this->collPublicEditaisLicitacoess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPublicEditaisLicitacoess, $l);
			$l->setLicitacoes($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collDadosEmpenhoss) {
				foreach ((array) $this->collDadosEmpenhoss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDotacoesLicitacoess) {
				foreach ((array) $this->collDotacoesLicitacoess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collItensLicitacoess) {
				foreach ((array) $this->collItensLicitacoess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLicitantess) {
				foreach ((array) $this->collLicitantess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPublicEditaisLicitacoess) {
				foreach ((array) $this->collPublicEditaisLicitacoess as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collDadosEmpenhoss = null;
		$this->collDotacoesLicitacoess = null;
		$this->collItensLicitacoess = null;
		$this->collLicitantess = null;
		$this->collPublicEditaisLicitacoess = null;
			$this->aDadosPessoais = null;
			$this->aComissoesLicitacoes = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseLicitacoes:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseLicitacoes::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseLicitacoes
