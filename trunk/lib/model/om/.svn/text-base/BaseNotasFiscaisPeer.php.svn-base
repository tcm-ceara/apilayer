<?php

/**
 * Base static class for performing query and update operations on the 'NOTAS_FISCAIS' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Thu Jul 15 18:23:02 2010
 *
 * @package    lib.model.om
 */
abstract class BaseNotasFiscaisPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'NOTAS_FISCAIS';

	/** the related Propel class for this table */
	const OM_CLASS = 'NotasFiscais';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.NotasFiscais';

	/** the related TableMap class for this table */
	const TM_CLASS = 'NotasFiscaisTableMap';
	
	/** The total number of columns. */
	const NUM_COLUMNS = 27;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the CD_MUNICIPIO field */
	const CD_MUNICIPIO = 'NOTAS_FISCAIS.CD_MUNICIPIO';

	/** the column name for the DT_VERSAO_ORC field */
	const DT_VERSAO_ORC = 'NOTAS_FISCAIS.DT_VERSAO_ORC';

	/** the column name for the CD_ORGAO field */
	const CD_ORGAO = 'NOTAS_FISCAIS.CD_ORGAO';

	/** the column name for the CD_UNID_ORC field */
	const CD_UNID_ORC = 'NOTAS_FISCAIS.CD_UNID_ORC';

	/** the column name for the DT_EMISSAO_NE field */
	const DT_EMISSAO_NE = 'NOTAS_FISCAIS.DT_EMISSAO_NE';

	/** the column name for the NU_NOTA_EMPENHO field */
	const NU_NOTA_EMPENHO = 'NOTAS_FISCAIS.NU_NOTA_EMPENHO';

	/** the column name for the DT_LIQUID_LIQ field */
	const DT_LIQUID_LIQ = 'NOTAS_FISCAIS.DT_LIQUID_LIQ';

	/** the column name for the TP_NF field */
	const TP_NF = 'NOTAS_FISCAIS.TP_NF';

	/** the column name for the NU_NF field */
	const NU_NF = 'NOTAS_FISCAIS.NU_NF';

	/** the column name for the DT_REF_NF field */
	const DT_REF_NF = 'NOTAS_FISCAIS.DT_REF_NF';

	/** the column name for the NU_SERIE_TRANS_NF field */
	const NU_SERIE_TRANS_NF = 'NOTAS_FISCAIS.NU_SERIE_TRANS_NF';

	/** the column name for the NU_SELO_TRANS_NF field */
	const NU_SELO_TRANS_NF = 'NOTAS_FISCAIS.NU_SELO_TRANS_NF';

	/** the column name for the NU_SERIE_NF field */
	const NU_SERIE_NF = 'NOTAS_FISCAIS.NU_SERIE_NF';

	/** the column name for the NU_FORMULARIO_NF field */
	const NU_FORMULARIO_NF = 'NOTAS_FISCAIS.NU_FORMULARIO_NF';

	/** the column name for the DT_LIMITE_NF field */
	const DT_LIMITE_NF = 'NOTAS_FISCAIS.DT_LIMITE_NF';

	/** the column name for the NU_CGF_EMITENTE_NF field */
	const NU_CGF_EMITENTE_NF = 'NOTAS_FISCAIS.NU_CGF_EMITENTE_NF';

	/** the column name for the CD_UF_EMITENTE_NF field */
	const CD_UF_EMITENTE_NF = 'NOTAS_FISCAIS.CD_UF_EMITENTE_NF';

	/** the column name for the DT_EMISSAO_NF field */
	const DT_EMISSAO_NF = 'NOTAS_FISCAIS.DT_EMISSAO_NF';

	/** the column name for the VL_LIQ_NF field */
	const VL_LIQ_NF = 'NOTAS_FISCAIS.VL_LIQ_NF';

	/** the column name for the VL_DESC_NF field */
	const VL_DESC_NF = 'NOTAS_FISCAIS.VL_DESC_NF';

	/** the column name for the VL_BRUTO_NF field */
	const VL_BRUTO_NF = 'NOTAS_FISCAIS.VL_BRUTO_NF';

	/** the column name for the VL_ALIQUOTA_ISS_NF field */
	const VL_ALIQUOTA_ISS_NF = 'NOTAS_FISCAIS.VL_ALIQUOTA_ISS_NF';

	/** the column name for the VL_BASECALC_ISS_NF field */
	const VL_BASECALC_ISS_NF = 'NOTAS_FISCAIS.VL_BASECALC_ISS_NF';

	/** the column name for the TP_EMISSAO_NF field */
	const TP_EMISSAO_NF = 'NOTAS_FISCAIS.TP_EMISSAO_NF';

	/** the column name for the NU_PROTOC_AUTEN_NFE_NF field */
	const NU_PROTOC_AUTEN_NFE_NF = 'NOTAS_FISCAIS.NU_PROTOC_AUTEN_NFE_NF';

	/** the column name for the NU_CHAVE_ACESSO_NFE_NF field */
	const NU_CHAVE_ACESSO_NFE_NF = 'NOTAS_FISCAIS.NU_CHAVE_ACESSO_NFE_NF';

	/** the column name for the CD_VERIFICA_NFE_FPN_NF field */
	const CD_VERIFICA_NFE_FPN_NF = 'NOTAS_FISCAIS.CD_VERIFICA_NFE_FPN_NF';

	/**
	 * An identiy map to hold any loaded instances of NotasFiscais objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array NotasFiscais[]
	 */
	public static $instances = array();


	// symfony behavior
	
	/**
	 * Indicates whether the current model includes I18N.
	 */
	const IS_I18N = false;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('CdMunicipio', 'DtVersaoOrc', 'CdOrgao', 'CdUnidOrc', 'DtEmissaoNe', 'NuNotaEmpenho', 'DtLiquidLiq', 'TpNf', 'NuNf', 'DtRefNf', 'NuSerieTransNf', 'NuSeloTransNf', 'NuSerieNf', 'NuFormularioNf', 'DtLimiteNf', 'NuCgfEmitenteNf', 'CdUfEmitenteNf', 'DtEmissaoNf', 'VlLiqNf', 'VlDescNf', 'VlBrutoNf', 'VlAliquotaIssNf', 'VlBasecalcIssNf', 'TpEmissaoNf', 'NuProtocAutenNfeNf', 'NuChaveAcessoNfeNf', 'CdVerificaNfeFpnNf', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('cdMunicipio', 'dtVersaoOrc', 'cdOrgao', 'cdUnidOrc', 'dtEmissaoNe', 'nuNotaEmpenho', 'dtLiquidLiq', 'tpNf', 'nuNf', 'dtRefNf', 'nuSerieTransNf', 'nuSeloTransNf', 'nuSerieNf', 'nuFormularioNf', 'dtLimiteNf', 'nuCgfEmitenteNf', 'cdUfEmitenteNf', 'dtEmissaoNf', 'vlLiqNf', 'vlDescNf', 'vlBrutoNf', 'vlAliquotaIssNf', 'vlBasecalcIssNf', 'tpEmissaoNf', 'nuProtocAutenNfeNf', 'nuChaveAcessoNfeNf', 'cdVerificaNfeFpnNf', ),
		BasePeer::TYPE_COLNAME => array (self::CD_MUNICIPIO, self::DT_VERSAO_ORC, self::CD_ORGAO, self::CD_UNID_ORC, self::DT_EMISSAO_NE, self::NU_NOTA_EMPENHO, self::DT_LIQUID_LIQ, self::TP_NF, self::NU_NF, self::DT_REF_NF, self::NU_SERIE_TRANS_NF, self::NU_SELO_TRANS_NF, self::NU_SERIE_NF, self::NU_FORMULARIO_NF, self::DT_LIMITE_NF, self::NU_CGF_EMITENTE_NF, self::CD_UF_EMITENTE_NF, self::DT_EMISSAO_NF, self::VL_LIQ_NF, self::VL_DESC_NF, self::VL_BRUTO_NF, self::VL_ALIQUOTA_ISS_NF, self::VL_BASECALC_ISS_NF, self::TP_EMISSAO_NF, self::NU_PROTOC_AUTEN_NFE_NF, self::NU_CHAVE_ACESSO_NFE_NF, self::CD_VERIFICA_NFE_FPN_NF, ),
		BasePeer::TYPE_FIELDNAME => array ('cd_municipio', 'dt_versao_orc', 'cd_orgao', 'cd_unid_orc', 'dt_emissao_ne', 'nu_nota_empenho', 'dt_liquid_liq', 'tp_nf', 'nu_nf', 'dt_ref_nf', 'nu_serie_trans_nf', 'nu_selo_trans_nf', 'nu_serie_nf', 'nu_formulario_nf', 'dt_limite_nf', 'nu_cgf_emitente_nf', 'cd_uf_emitente_nf', 'dt_emissao_nf', 'vl_liq_nf', 'vl_desc_nf', 'vl_bruto_nf', 'vl_aliquota_iss_nf', 'vl_basecalc_iss_nf', 'tp_emissao_nf', 'nu_protoc_auten_nfe_nf', 'nu_chave_acesso_nfe_nf', 'cd_verifica_nfe_fpn_nf', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('CdMunicipio' => 0, 'DtVersaoOrc' => 1, 'CdOrgao' => 2, 'CdUnidOrc' => 3, 'DtEmissaoNe' => 4, 'NuNotaEmpenho' => 5, 'DtLiquidLiq' => 6, 'TpNf' => 7, 'NuNf' => 8, 'DtRefNf' => 9, 'NuSerieTransNf' => 10, 'NuSeloTransNf' => 11, 'NuSerieNf' => 12, 'NuFormularioNf' => 13, 'DtLimiteNf' => 14, 'NuCgfEmitenteNf' => 15, 'CdUfEmitenteNf' => 16, 'DtEmissaoNf' => 17, 'VlLiqNf' => 18, 'VlDescNf' => 19, 'VlBrutoNf' => 20, 'VlAliquotaIssNf' => 21, 'VlBasecalcIssNf' => 22, 'TpEmissaoNf' => 23, 'NuProtocAutenNfeNf' => 24, 'NuChaveAcessoNfeNf' => 25, 'CdVerificaNfeFpnNf' => 26, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('cdMunicipio' => 0, 'dtVersaoOrc' => 1, 'cdOrgao' => 2, 'cdUnidOrc' => 3, 'dtEmissaoNe' => 4, 'nuNotaEmpenho' => 5, 'dtLiquidLiq' => 6, 'tpNf' => 7, 'nuNf' => 8, 'dtRefNf' => 9, 'nuSerieTransNf' => 10, 'nuSeloTransNf' => 11, 'nuSerieNf' => 12, 'nuFormularioNf' => 13, 'dtLimiteNf' => 14, 'nuCgfEmitenteNf' => 15, 'cdUfEmitenteNf' => 16, 'dtEmissaoNf' => 17, 'vlLiqNf' => 18, 'vlDescNf' => 19, 'vlBrutoNf' => 20, 'vlAliquotaIssNf' => 21, 'vlBasecalcIssNf' => 22, 'tpEmissaoNf' => 23, 'nuProtocAutenNfeNf' => 24, 'nuChaveAcessoNfeNf' => 25, 'cdVerificaNfeFpnNf' => 26, ),
		BasePeer::TYPE_COLNAME => array (self::CD_MUNICIPIO => 0, self::DT_VERSAO_ORC => 1, self::CD_ORGAO => 2, self::CD_UNID_ORC => 3, self::DT_EMISSAO_NE => 4, self::NU_NOTA_EMPENHO => 5, self::DT_LIQUID_LIQ => 6, self::TP_NF => 7, self::NU_NF => 8, self::DT_REF_NF => 9, self::NU_SERIE_TRANS_NF => 10, self::NU_SELO_TRANS_NF => 11, self::NU_SERIE_NF => 12, self::NU_FORMULARIO_NF => 13, self::DT_LIMITE_NF => 14, self::NU_CGF_EMITENTE_NF => 15, self::CD_UF_EMITENTE_NF => 16, self::DT_EMISSAO_NF => 17, self::VL_LIQ_NF => 18, self::VL_DESC_NF => 19, self::VL_BRUTO_NF => 20, self::VL_ALIQUOTA_ISS_NF => 21, self::VL_BASECALC_ISS_NF => 22, self::TP_EMISSAO_NF => 23, self::NU_PROTOC_AUTEN_NFE_NF => 24, self::NU_CHAVE_ACESSO_NFE_NF => 25, self::CD_VERIFICA_NFE_FPN_NF => 26, ),
		BasePeer::TYPE_FIELDNAME => array ('cd_municipio' => 0, 'dt_versao_orc' => 1, 'cd_orgao' => 2, 'cd_unid_orc' => 3, 'dt_emissao_ne' => 4, 'nu_nota_empenho' => 5, 'dt_liquid_liq' => 6, 'tp_nf' => 7, 'nu_nf' => 8, 'dt_ref_nf' => 9, 'nu_serie_trans_nf' => 10, 'nu_selo_trans_nf' => 11, 'nu_serie_nf' => 12, 'nu_formulario_nf' => 13, 'dt_limite_nf' => 14, 'nu_cgf_emitente_nf' => 15, 'cd_uf_emitente_nf' => 16, 'dt_emissao_nf' => 17, 'vl_liq_nf' => 18, 'vl_desc_nf' => 19, 'vl_bruto_nf' => 20, 'vl_aliquota_iss_nf' => 21, 'vl_basecalc_iss_nf' => 22, 'tp_emissao_nf' => 23, 'nu_protoc_auten_nfe_nf' => 24, 'nu_chave_acesso_nfe_nf' => 25, 'cd_verifica_nfe_fpn_nf' => 26, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, )
	);

	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. NotasFiscaisPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(NotasFiscaisPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{
		$criteria->addSelectColumn(NotasFiscaisPeer::CD_MUNICIPIO);
		$criteria->addSelectColumn(NotasFiscaisPeer::DT_VERSAO_ORC);
		$criteria->addSelectColumn(NotasFiscaisPeer::CD_ORGAO);
		$criteria->addSelectColumn(NotasFiscaisPeer::CD_UNID_ORC);
		$criteria->addSelectColumn(NotasFiscaisPeer::DT_EMISSAO_NE);
		$criteria->addSelectColumn(NotasFiscaisPeer::NU_NOTA_EMPENHO);
		$criteria->addSelectColumn(NotasFiscaisPeer::DT_LIQUID_LIQ);
		$criteria->addSelectColumn(NotasFiscaisPeer::TP_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::NU_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::DT_REF_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::NU_SERIE_TRANS_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::NU_SELO_TRANS_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::NU_SERIE_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::NU_FORMULARIO_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::DT_LIMITE_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::NU_CGF_EMITENTE_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::CD_UF_EMITENTE_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::DT_EMISSAO_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::VL_LIQ_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::VL_DESC_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::VL_BRUTO_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::VL_ALIQUOTA_ISS_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::VL_BASECALC_ISS_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::TP_EMISSAO_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::NU_PROTOC_AUTEN_NFE_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::NU_CHAVE_ACESSO_NFE_NF);
		$criteria->addSelectColumn(NotasFiscaisPeer::CD_VERIFICA_NFE_FPN_NF);
	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(NotasFiscaisPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			NotasFiscaisPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(NotasFiscaisPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $criteria, $con);
		}

		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     NotasFiscais
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = NotasFiscaisPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return NotasFiscaisPeer::populateObjects(NotasFiscaisPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(NotasFiscaisPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			NotasFiscaisPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      NotasFiscais $value A NotasFiscais object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(NotasFiscais $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = serialize(array((string) $obj->getCdMunicipio(), (string) $obj->getDtVersaoOrc(), (string) $obj->getCdOrgao(), (string) $obj->getCdUnidOrc(), (string) $obj->getDtEmissaoNe(), (string) $obj->getNuNotaEmpenho(), (string) $obj->getDtLiquidLiq(), (string) $obj->getTpNf(), (string) $obj->getNuNf()));
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A NotasFiscais object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof NotasFiscais) {
				$key = serialize(array((string) $value->getCdMunicipio(), (string) $value->getDtVersaoOrc(), (string) $value->getCdOrgao(), (string) $value->getCdUnidOrc(), (string) $value->getDtEmissaoNe(), (string) $value->getNuNotaEmpenho(), (string) $value->getDtLiquidLiq(), (string) $value->getTpNf(), (string) $value->getNuNf()));
			} elseif (is_array($value) && count($value) === 9) {
				// assume we've been passed a primary key
				$key = serialize(array((string) $value[0], (string) $value[1], (string) $value[2], (string) $value[3], (string) $value[4], (string) $value[5], (string) $value[6], (string) $value[7], (string) $value[8]));
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or NotasFiscais object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     NotasFiscais Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Method to invalidate the instance pool of all tables related to NOTAS_FISCAIS
	 * by a foreign key with ON DELETE CASCADE
	 */
	public static function clearRelatedInstancePool()
	{
	}

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol] === null && $row[$startcol + 1] === null && $row[$startcol + 2] === null && $row[$startcol + 3] === null && $row[$startcol + 4] === null && $row[$startcol + 5] === null && $row[$startcol + 6] === null && $row[$startcol + 7] === null && $row[$startcol + 8] === null) {
			return null;
		}
		return serialize(array((string) $row[$startcol], (string) $row[$startcol + 1], (string) $row[$startcol + 2], (string) $row[$startcol + 3], (string) $row[$startcol + 4], (string) $row[$startcol + 5], (string) $row[$startcol + 6], (string) $row[$startcol + 7], (string) $row[$startcol + 8]));
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = NotasFiscaisPeer::getOMClass(false);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = NotasFiscaisPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = NotasFiscaisPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				NotasFiscaisPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related UnidadesFederacao table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinUnidadesFederacao(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(NotasFiscaisPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			NotasFiscaisPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(NotasFiscaisPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(NotasFiscaisPeer::CD_UF_EMITENTE_NF, UnidadesFederacaoPeer::CD_SIGLA_UF, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Liquidacoes table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinLiquidacoes(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(NotasFiscaisPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			NotasFiscaisPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(NotasFiscaisPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addMultipleJoin(array(
        array(NotasFiscaisPeer::CD_ORGAO, LiquidacoesPeer::CD_ORGAO),
        array(NotasFiscaisPeer::CD_UNID_ORC, LiquidacoesPeer::CD_UNID_ORC),
        array(NotasFiscaisPeer::DT_EMISSAO_NE, LiquidacoesPeer::DT_EMISSAO_NE),
        array(NotasFiscaisPeer::DT_LIQUID_LIQ, LiquidacoesPeer::DT_LIQUID_LIQ),
        array(NotasFiscaisPeer::DT_VERSAO_ORC, LiquidacoesPeer::DT_VERSAO_ORC),
        array(NotasFiscaisPeer::NU_NOTA_EMPENHO, LiquidacoesPeer::NU_NOTA_EMPENHO),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of NotasFiscais objects pre-filled with their UnidadesFederacao objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of NotasFiscais objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinUnidadesFederacao(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		NotasFiscaisPeer::addSelectColumns($criteria);
		$startcol = (NotasFiscaisPeer::NUM_COLUMNS - NotasFiscaisPeer::NUM_LAZY_LOAD_COLUMNS);
		UnidadesFederacaoPeer::addSelectColumns($criteria);

		$criteria->addJoin(NotasFiscaisPeer::CD_UF_EMITENTE_NF, UnidadesFederacaoPeer::CD_SIGLA_UF, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = NotasFiscaisPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = NotasFiscaisPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = NotasFiscaisPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				NotasFiscaisPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = UnidadesFederacaoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = UnidadesFederacaoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = UnidadesFederacaoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					UnidadesFederacaoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (NotasFiscais) to $obj2 (UnidadesFederacao)
				$obj2->addNotasFiscais($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of NotasFiscais objects pre-filled with their Liquidacoes objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of NotasFiscais objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinLiquidacoes(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		NotasFiscaisPeer::addSelectColumns($criteria);
		$startcol = (NotasFiscaisPeer::NUM_COLUMNS - NotasFiscaisPeer::NUM_LAZY_LOAD_COLUMNS);
		LiquidacoesPeer::addSelectColumns($criteria);

		$criteria->addMultipleJoin(array(
        array(NotasFiscaisPeer::CD_ORGAO, LiquidacoesPeer::CD_ORGAO),
        array(NotasFiscaisPeer::CD_UNID_ORC, LiquidacoesPeer::CD_UNID_ORC),
        array(NotasFiscaisPeer::DT_EMISSAO_NE, LiquidacoesPeer::DT_EMISSAO_NE),
        array(NotasFiscaisPeer::DT_LIQUID_LIQ, LiquidacoesPeer::DT_LIQUID_LIQ),
        array(NotasFiscaisPeer::DT_VERSAO_ORC, LiquidacoesPeer::DT_VERSAO_ORC),
        array(NotasFiscaisPeer::NU_NOTA_EMPENHO, LiquidacoesPeer::NU_NOTA_EMPENHO),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = NotasFiscaisPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = NotasFiscaisPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = NotasFiscaisPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				NotasFiscaisPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = LiquidacoesPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = LiquidacoesPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = LiquidacoesPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					LiquidacoesPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (NotasFiscais) to $obj2 (Liquidacoes)
				$obj2->addNotasFiscais($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(NotasFiscaisPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			NotasFiscaisPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(NotasFiscaisPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(NotasFiscaisPeer::CD_UF_EMITENTE_NF, UnidadesFederacaoPeer::CD_SIGLA_UF, $join_behavior);

		$criteria->addMultipleJoin(array(
        array(NotasFiscaisPeer::CD_ORGAO, LiquidacoesPeer::CD_ORGAO),
        array(NotasFiscaisPeer::CD_UNID_ORC, LiquidacoesPeer::CD_UNID_ORC),
        array(NotasFiscaisPeer::DT_EMISSAO_NE, LiquidacoesPeer::DT_EMISSAO_NE),
        array(NotasFiscaisPeer::DT_LIQUID_LIQ, LiquidacoesPeer::DT_LIQUID_LIQ),
        array(NotasFiscaisPeer::DT_VERSAO_ORC, LiquidacoesPeer::DT_VERSAO_ORC),
        array(NotasFiscaisPeer::NU_NOTA_EMPENHO, LiquidacoesPeer::NU_NOTA_EMPENHO),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of NotasFiscais objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of NotasFiscais objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		NotasFiscaisPeer::addSelectColumns($criteria);
		$startcol2 = (NotasFiscaisPeer::NUM_COLUMNS - NotasFiscaisPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesFederacaoPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (UnidadesFederacaoPeer::NUM_COLUMNS - UnidadesFederacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		LiquidacoesPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (LiquidacoesPeer::NUM_COLUMNS - LiquidacoesPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(NotasFiscaisPeer::CD_UF_EMITENTE_NF, UnidadesFederacaoPeer::CD_SIGLA_UF, $join_behavior);

		$criteria->addMultipleJoin(array(
        array(NotasFiscaisPeer::CD_ORGAO, LiquidacoesPeer::CD_ORGAO),
        array(NotasFiscaisPeer::CD_UNID_ORC, LiquidacoesPeer::CD_UNID_ORC),
        array(NotasFiscaisPeer::DT_EMISSAO_NE, LiquidacoesPeer::DT_EMISSAO_NE),
        array(NotasFiscaisPeer::DT_LIQUID_LIQ, LiquidacoesPeer::DT_LIQUID_LIQ),
        array(NotasFiscaisPeer::DT_VERSAO_ORC, LiquidacoesPeer::DT_VERSAO_ORC),
        array(NotasFiscaisPeer::NU_NOTA_EMPENHO, LiquidacoesPeer::NU_NOTA_EMPENHO),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = NotasFiscaisPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = NotasFiscaisPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = NotasFiscaisPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				NotasFiscaisPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined UnidadesFederacao rows

			$key2 = UnidadesFederacaoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = UnidadesFederacaoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = UnidadesFederacaoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					UnidadesFederacaoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (NotasFiscais) to the collection in $obj2 (UnidadesFederacao)
				$obj2->addNotasFiscais($obj1);
			} // if joined row not null

			// Add objects for joined Liquidacoes rows

			$key3 = LiquidacoesPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = LiquidacoesPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = LiquidacoesPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					LiquidacoesPeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (NotasFiscais) to the collection in $obj3 (Liquidacoes)
				$obj3->addNotasFiscais($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related UnidadesFederacao table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptUnidadesFederacao(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(NotasFiscaisPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			NotasFiscaisPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(NotasFiscaisPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addMultipleJoin(array(
        array(NotasFiscaisPeer::CD_ORGAO, LiquidacoesPeer::CD_ORGAO),
        array(NotasFiscaisPeer::CD_UNID_ORC, LiquidacoesPeer::CD_UNID_ORC),
        array(NotasFiscaisPeer::DT_EMISSAO_NE, LiquidacoesPeer::DT_EMISSAO_NE),
        array(NotasFiscaisPeer::DT_LIQUID_LIQ, LiquidacoesPeer::DT_LIQUID_LIQ),
        array(NotasFiscaisPeer::DT_VERSAO_ORC, LiquidacoesPeer::DT_VERSAO_ORC),
        array(NotasFiscaisPeer::NU_NOTA_EMPENHO, LiquidacoesPeer::NU_NOTA_EMPENHO),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Liquidacoes table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptLiquidacoes(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(NotasFiscaisPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			NotasFiscaisPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(NotasFiscaisPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(NotasFiscaisPeer::CD_UF_EMITENTE_NF, UnidadesFederacaoPeer::CD_SIGLA_UF, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of NotasFiscais objects pre-filled with all related objects except UnidadesFederacao.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of NotasFiscais objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptUnidadesFederacao(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		NotasFiscaisPeer::addSelectColumns($criteria);
		$startcol2 = (NotasFiscaisPeer::NUM_COLUMNS - NotasFiscaisPeer::NUM_LAZY_LOAD_COLUMNS);

		LiquidacoesPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (LiquidacoesPeer::NUM_COLUMNS - LiquidacoesPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addMultipleJoin(array(
        array(NotasFiscaisPeer::CD_ORGAO, LiquidacoesPeer::CD_ORGAO),
        array(NotasFiscaisPeer::CD_UNID_ORC, LiquidacoesPeer::CD_UNID_ORC),
        array(NotasFiscaisPeer::DT_EMISSAO_NE, LiquidacoesPeer::DT_EMISSAO_NE),
        array(NotasFiscaisPeer::DT_LIQUID_LIQ, LiquidacoesPeer::DT_LIQUID_LIQ),
        array(NotasFiscaisPeer::DT_VERSAO_ORC, LiquidacoesPeer::DT_VERSAO_ORC),
        array(NotasFiscaisPeer::NU_NOTA_EMPENHO, LiquidacoesPeer::NU_NOTA_EMPENHO),
      ), $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = NotasFiscaisPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = NotasFiscaisPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = NotasFiscaisPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				NotasFiscaisPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Liquidacoes rows

				$key2 = LiquidacoesPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = LiquidacoesPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = LiquidacoesPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					LiquidacoesPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (NotasFiscais) to the collection in $obj2 (Liquidacoes)
				$obj2->addNotasFiscais($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of NotasFiscais objects pre-filled with all related objects except Liquidacoes.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of NotasFiscais objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptLiquidacoes(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		NotasFiscaisPeer::addSelectColumns($criteria);
		$startcol2 = (NotasFiscaisPeer::NUM_COLUMNS - NotasFiscaisPeer::NUM_LAZY_LOAD_COLUMNS);

		UnidadesFederacaoPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (UnidadesFederacaoPeer::NUM_COLUMNS - UnidadesFederacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(NotasFiscaisPeer::CD_UF_EMITENTE_NF, UnidadesFederacaoPeer::CD_SIGLA_UF, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = NotasFiscaisPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = NotasFiscaisPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = NotasFiscaisPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				NotasFiscaisPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined UnidadesFederacao rows

				$key2 = UnidadesFederacaoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = UnidadesFederacaoPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = UnidadesFederacaoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					UnidadesFederacaoPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (NotasFiscais) to the collection in $obj2 (UnidadesFederacao)
				$obj2->addNotasFiscais($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * Add a TableMap instance to the database for this peer class.
	 */
	public static function buildTableMap()
	{
	  $dbMap = Propel::getDatabaseMap(BaseNotasFiscaisPeer::DATABASE_NAME);
	  if (!$dbMap->hasTable(BaseNotasFiscaisPeer::TABLE_NAME))
	  {
	    $dbMap->addTableObject(new NotasFiscaisTableMap());
	  }
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * If $withPrefix is true, the returned path
	 * uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @param      boolean  Whether or not to return the path wit hthe class name 
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass($withPrefix = true)
	{
		return $withPrefix ? NotasFiscaisPeer::CLASS_DEFAULT : NotasFiscaisPeer::OM_CLASS;
	}

	/**
	 * Method perform an INSERT on the database, given a NotasFiscais or Criteria object.
	 *
	 * @param      mixed $values Criteria or NotasFiscais object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseNotasFiscaisPeer:doInsert:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(NotasFiscaisPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from NotasFiscais object
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseNotasFiscaisPeer:doInsert:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $values, $con, $pk);
    }

		return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a NotasFiscais or Criteria object.
	 *
	 * @param      mixed $values Criteria or NotasFiscais object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseNotasFiscaisPeer:doUpdate:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(NotasFiscaisPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(NotasFiscaisPeer::CD_MUNICIPIO);
			$selectCriteria->add(NotasFiscaisPeer::CD_MUNICIPIO, $criteria->remove(NotasFiscaisPeer::CD_MUNICIPIO), $comparison);

			$comparison = $criteria->getComparison(NotasFiscaisPeer::DT_VERSAO_ORC);
			$selectCriteria->add(NotasFiscaisPeer::DT_VERSAO_ORC, $criteria->remove(NotasFiscaisPeer::DT_VERSAO_ORC), $comparison);

			$comparison = $criteria->getComparison(NotasFiscaisPeer::CD_ORGAO);
			$selectCriteria->add(NotasFiscaisPeer::CD_ORGAO, $criteria->remove(NotasFiscaisPeer::CD_ORGAO), $comparison);

			$comparison = $criteria->getComparison(NotasFiscaisPeer::CD_UNID_ORC);
			$selectCriteria->add(NotasFiscaisPeer::CD_UNID_ORC, $criteria->remove(NotasFiscaisPeer::CD_UNID_ORC), $comparison);

			$comparison = $criteria->getComparison(NotasFiscaisPeer::DT_EMISSAO_NE);
			$selectCriteria->add(NotasFiscaisPeer::DT_EMISSAO_NE, $criteria->remove(NotasFiscaisPeer::DT_EMISSAO_NE), $comparison);

			$comparison = $criteria->getComparison(NotasFiscaisPeer::NU_NOTA_EMPENHO);
			$selectCriteria->add(NotasFiscaisPeer::NU_NOTA_EMPENHO, $criteria->remove(NotasFiscaisPeer::NU_NOTA_EMPENHO), $comparison);

			$comparison = $criteria->getComparison(NotasFiscaisPeer::DT_LIQUID_LIQ);
			$selectCriteria->add(NotasFiscaisPeer::DT_LIQUID_LIQ, $criteria->remove(NotasFiscaisPeer::DT_LIQUID_LIQ), $comparison);

			$comparison = $criteria->getComparison(NotasFiscaisPeer::TP_NF);
			$selectCriteria->add(NotasFiscaisPeer::TP_NF, $criteria->remove(NotasFiscaisPeer::TP_NF), $comparison);

			$comparison = $criteria->getComparison(NotasFiscaisPeer::NU_NF);
			$selectCriteria->add(NotasFiscaisPeer::NU_NF, $criteria->remove(NotasFiscaisPeer::NU_NF), $comparison);

		} else { // $values is NotasFiscais object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseNotasFiscaisPeer:doUpdate:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseNotasFiscaisPeer', $values, $con, $ret);
    }

    return $ret;
	}

	/**
	 * Method to DELETE all rows from the NOTAS_FISCAIS table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(NotasFiscaisPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(NotasFiscaisPeer::TABLE_NAME, $con);
			// Because this db requires some delete cascade/set null emulation, we have to
			// clear the cached instance *after* the emulation has happened (since
			// instances get re-added by the select statement contained therein).
			NotasFiscaisPeer::clearInstancePool();
			NotasFiscaisPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a NotasFiscais or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or NotasFiscais object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(NotasFiscaisPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			NotasFiscaisPeer::clearInstancePool();
			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof NotasFiscais) { // it's a model object
			// invalidate the cache for this single object
			NotasFiscaisPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else { // it's a primary key, or an array of pks
			$criteria = new Criteria(self::DATABASE_NAME);
			// primary key is composite; we therefore, expect
			// the primary key passed to be an array of pkey values
			if (count($values) == count($values, COUNT_RECURSIVE)) {
				// array is not multi-dimensional
				$values = array($values);
			}
			foreach ($values as $value) {
				$criterion = $criteria->getNewCriterion(NotasFiscaisPeer::CD_MUNICIPIO, $value[0]);
				$criterion->addAnd($criteria->getNewCriterion(NotasFiscaisPeer::DT_VERSAO_ORC, $value[1]));
				$criterion->addAnd($criteria->getNewCriterion(NotasFiscaisPeer::CD_ORGAO, $value[2]));
				$criterion->addAnd($criteria->getNewCriterion(NotasFiscaisPeer::CD_UNID_ORC, $value[3]));
				$criterion->addAnd($criteria->getNewCriterion(NotasFiscaisPeer::DT_EMISSAO_NE, $value[4]));
				$criterion->addAnd($criteria->getNewCriterion(NotasFiscaisPeer::NU_NOTA_EMPENHO, $value[5]));
				$criterion->addAnd($criteria->getNewCriterion(NotasFiscaisPeer::DT_LIQUID_LIQ, $value[6]));
				$criterion->addAnd($criteria->getNewCriterion(NotasFiscaisPeer::TP_NF, $value[7]));
				$criterion->addAnd($criteria->getNewCriterion(NotasFiscaisPeer::NU_NF, $value[8]));
				$criteria->addOr($criterion);
				// we can invalidate the cache for this single PK
				NotasFiscaisPeer::removeInstanceFromPool($value);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);
			NotasFiscaisPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given NotasFiscais object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      NotasFiscais $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(NotasFiscais $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(NotasFiscaisPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(NotasFiscaisPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		return BasePeer::doValidate(NotasFiscaisPeer::DATABASE_NAME, NotasFiscaisPeer::TABLE_NAME, $columns);
	}

	/**
	 * Retrieve object using using composite pkey values.
	 * @param      string $cd_municipio
	 * @param      int $dt_versao_orc
	 * @param      string $cd_orgao
	 * @param      string $cd_unid_orc
	 * @param      string $dt_emissao_ne
	 * @param      string $nu_nota_empenho
	 * @param      string $dt_liquid_liq
	 * @param      string $tp_nf
	 * @param      string $nu_nf
	 * @param      PropelPDO $con
	 * @return     NotasFiscais
	 */
	public static function retrieveByPK($cd_municipio, $dt_versao_orc, $cd_orgao, $cd_unid_orc, $dt_emissao_ne, $nu_nota_empenho, $dt_liquid_liq, $tp_nf, $nu_nf, PropelPDO $con = null) {
		$key = serialize(array((string) $cd_municipio, (string) $dt_versao_orc, (string) $cd_orgao, (string) $cd_unid_orc, (string) $dt_emissao_ne, (string) $nu_nota_empenho, (string) $dt_liquid_liq, (string) $tp_nf, (string) $nu_nf));
 		if (null !== ($obj = NotasFiscaisPeer::getInstanceFromPool($key))) {
 			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(NotasFiscaisPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$criteria = new Criteria(NotasFiscaisPeer::DATABASE_NAME);
		$criteria->add(NotasFiscaisPeer::CD_MUNICIPIO, $cd_municipio);
		$criteria->add(NotasFiscaisPeer::DT_VERSAO_ORC, $dt_versao_orc);
		$criteria->add(NotasFiscaisPeer::CD_ORGAO, $cd_orgao);
		$criteria->add(NotasFiscaisPeer::CD_UNID_ORC, $cd_unid_orc);
		$criteria->add(NotasFiscaisPeer::DT_EMISSAO_NE, $dt_emissao_ne);
		$criteria->add(NotasFiscaisPeer::NU_NOTA_EMPENHO, $nu_nota_empenho);
		$criteria->add(NotasFiscaisPeer::DT_LIQUID_LIQ, $dt_liquid_liq);
		$criteria->add(NotasFiscaisPeer::TP_NF, $tp_nf);
		$criteria->add(NotasFiscaisPeer::NU_NF, $nu_nf);
		$v = NotasFiscaisPeer::doSelect($criteria, $con);

		return !empty($v) ? $v[0] : null;
	}
	// symfony behavior
	
	/**
	 * Returns an array of arrays that contain columns in each unique index.
	 *
	 * @return array
	 */
	static public function getUniqueColumnNames()
	{
	  return array();
	}

	// symfony_behaviors behavior
	
	/**
	 * Returns the name of the hook to call from inside the supplied method.
	 *
	 * @param string $method The calling method
	 *
	 * @return string A hook name for {@link sfMixer}
	 *
	 * @throws LogicException If the method name is not recognized
	 */
	static private function getMixerPreSelectHook($method)
	{
	  if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
	  {
	    return sprintf('BaseNotasFiscaisPeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
	  }
	
	  throw new LogicException(sprintf('Unrecognized function "%s"', $method));
	}

} // BaseNotasFiscaisPeer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BaseNotasFiscaisPeer::buildTableMap();

