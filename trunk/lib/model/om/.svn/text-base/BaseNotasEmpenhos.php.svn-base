<?php

/**
 * Base class that represents a row from the 'NOTAS_EMPENHOS' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Thu Jul 15 18:23:01 2010
 *
 * @package    lib.model.om
 */
abstract class BaseNotasEmpenhos extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        NotasEmpenhosPeer
	 */
	protected static $peer;

	/**
	 * The value for the cd_municipio field.
	 * @var        string
	 */
	protected $cd_municipio;

	/**
	 * The value for the dt_versao_orc field.
	 * @var        int
	 */
	protected $dt_versao_orc;

	/**
	 * The value for the cd_orgao field.
	 * @var        string
	 */
	protected $cd_orgao;

	/**
	 * The value for the cd_unid_orc field.
	 * @var        string
	 */
	protected $cd_unid_orc;

	/**
	 * The value for the dt_emissao_ne field.
	 * @var        string
	 */
	protected $dt_emissao_ne;

	/**
	 * The value for the nu_nota_empenho field.
	 * @var        string
	 */
	protected $nu_nota_empenho;

	/**
	 * The value for the dt_ref_ne field.
	 * @var        int
	 */
	protected $dt_ref_ne;

	/**
	 * The value for the cd_funcao field.
	 * @var        string
	 */
	protected $cd_funcao;

	/**
	 * The value for the cd_subfuncao field.
	 * @var        string
	 */
	protected $cd_subfuncao;

	/**
	 * The value for the cd_programa field.
	 * @var        string
	 */
	protected $cd_programa;

	/**
	 * The value for the cd_proj_ativ field.
	 * @var        string
	 */
	protected $cd_proj_ativ;

	/**
	 * The value for the nu_proj_ativ field.
	 * @var        string
	 */
	protected $nu_proj_ativ;

	/**
	 * The value for the nu_sub_proj_ativ field.
	 * @var        string
	 */
	protected $nu_sub_proj_ativ;

	/**
	 * The value for the cd_elemento_od field.
	 * @var        string
	 */
	protected $cd_elemento_od;

	/**
	 * The value for the md_nota_empenho field.
	 * @var        string
	 */
	protected $md_nota_empenho;

	/**
	 * The value for the de_historico_ne1 field.
	 * @var        string
	 */
	protected $de_historico_ne1;

	/**
	 * The value for the de_historico_ne2 field.
	 * @var        string
	 */
	protected $de_historico_ne2;

	/**
	 * The value for the vl_ant_saldo_dot_ne field.
	 * @var        string
	 */
	protected $vl_ant_saldo_dot_ne;

	/**
	 * The value for the vl_empenhado_ne field.
	 * @var        string
	 */
	protected $vl_empenhado_ne;

	/**
	 * The value for the vl_atual_saldo_dot_ne field.
	 * @var        string
	 */
	protected $vl_atual_saldo_dot_ne;

	/**
	 * The value for the tp_proc_licit_ne field.
	 * @var        string
	 */
	protected $tp_proc_licit_ne;

	/**
	 * The value for the nu_doc_ng field.
	 * @var        string
	 */
	protected $nu_doc_ng;

	/**
	 * The value for the st_empenho_ne field.
	 * @var        string
	 */
	protected $st_empenho_ne;

	/**
	 * The value for the nu_nota_anulacao_ne field.
	 * @var        string
	 */
	protected $nu_nota_anulacao_ne;

	/**
	 * The value for the dt_emiss_emp_subst_ne field.
	 * @var        string
	 */
	protected $dt_emiss_emp_subst_ne;

	/**
	 * The value for the nu_emp_subst_ne field.
	 * @var        string
	 */
	protected $nu_emp_subst_ne;

	/**
	 * The value for the cd_tipo_ng field.
	 * Note: this column has a database default value of: '(\' \')'
	 * @var        string
	 */
	protected $cd_tipo_ng;

	/**
	 * The value for the nm_negociante_ng field.
	 * Note: this column has a database default value of: '(\' \')'
	 * @var        string
	 */
	protected $nm_negociante_ng;

	/**
	 * The value for the de_endereco_ng field.
	 * Note: this column has a database default value of: '(\' \')'
	 * @var        string
	 */
	protected $de_endereco_ng;

	/**
	 * The value for the nu_fone_ng field.
	 * Note: this column has a database default value of: '(\' \')'
	 * @var        string
	 */
	protected $nu_fone_ng;

	/**
	 * The value for the nu_cep_ng field.
	 * Note: this column has a database default value of: '(\' \')'
	 * @var        string
	 */
	protected $nu_cep_ng;

	/**
	 * The value for the nm_municipio_ng field.
	 * Note: this column has a database default value of: '(\' \')'
	 * @var        string
	 */
	protected $nm_municipio_ng;

	/**
	 * The value for the cd_uf_nf field.
	 * Note: this column has a database default value of: '(\' \')'
	 * @var        string
	 */
	protected $cd_uf_nf;

	/**
	 * The value for the cd_cpf_gestor field.
	 * @var        string
	 */
	protected $cd_cpf_gestor;

	/**
	 * @var        UnidadesFederacao
	 */
	protected $aUnidadesFederacao;

	/**
	 * @var        UnidadesOrcamentarias
	 */
	protected $aUnidadesOrcamentarias;

	/**
	 * @var        CatEcoProjAtiv
	 */
	protected $aCatEcoProjAtiv;

	/**
	 * @var        array NeCorrecao[] Collection to store aggregation of NeCorrecao objects.
	 */
	protected $collNeCorrecaos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNeCorrecaos.
	 */
	private $lastNeCorrecaoCriteria = null;

	/**
	 * @var        array AnulacoesEmpenhos[] Collection to store aggregation of AnulacoesEmpenhos objects.
	 */
	protected $collAnulacoesEmpenhoss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAnulacoesEmpenhoss.
	 */
	private $lastAnulacoesEmpenhosCriteria = null;

	/**
	 * @var        array DadosEmpenhos[] Collection to store aggregation of DadosEmpenhos objects.
	 */
	protected $collDadosEmpenhoss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDadosEmpenhoss.
	 */
	private $lastDadosEmpenhosCriteria = null;

	/**
	 * @var        array EmpenhosBens[] Collection to store aggregation of EmpenhosBens objects.
	 */
	protected $collEmpenhosBenss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmpenhosBenss.
	 */
	private $lastEmpenhosBensCriteria = null;

	/**
	 * @var        array EmpenhosObras[] Collection to store aggregation of EmpenhosObras objects.
	 */
	protected $collEmpenhosObrass;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmpenhosObrass.
	 */
	private $lastEmpenhosObrasCriteria = null;

	/**
	 * @var        array Liquidacoes[] Collection to store aggregation of Liquidacoes objects.
	 */
	protected $collLiquidacoess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLiquidacoess.
	 */
	private $lastLiquidacoesCriteria = null;

	/**
	 * @var        array NotasFiscaisLiquid[] Collection to store aggregation of NotasFiscaisLiquid objects.
	 */
	protected $collNotasFiscaisLiquids;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotasFiscaisLiquids.
	 */
	private $lastNotasFiscaisLiquidCriteria = null;

	/**
	 * @var        array NotasPagamentos[] Collection to store aggregation of NotasPagamentos objects.
	 */
	protected $collNotasPagamentoss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotasPagamentoss.
	 */
	private $lastNotasPagamentosCriteria = null;

	/**
	 * @var        array RecursosEmpenhos[] Collection to store aggregation of RecursosEmpenhos objects.
	 */
	protected $collRecursosEmpenhoss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRecursosEmpenhoss.
	 */
	private $lastRecursosEmpenhosCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'NotasEmpenhosPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->cd_tipo_ng = '(\' \')';
		$this->nm_negociante_ng = '(\' \')';
		$this->de_endereco_ng = '(\' \')';
		$this->nu_fone_ng = '(\' \')';
		$this->nu_cep_ng = '(\' \')';
		$this->nm_municipio_ng = '(\' \')';
		$this->cd_uf_nf = '(\' \')';
	}

	/**
	 * Initializes internal state of BaseNotasEmpenhos object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [cd_municipio] column value.
	 * 
	 * @return     string
	 */
	public function getCdMunicipio()
	{
		return $this->cd_municipio;
	}

	/**
	 * Get the [dt_versao_orc] column value.
	 * 
	 * @return     int
	 */
	public function getDtVersaoOrc()
	{
		return $this->dt_versao_orc;
	}

	/**
	 * Get the [cd_orgao] column value.
	 * 
	 * @return     string
	 */
	public function getCdOrgao()
	{
		return $this->cd_orgao;
	}

	/**
	 * Get the [cd_unid_orc] column value.
	 * 
	 * @return     string
	 */
	public function getCdUnidOrc()
	{
		return $this->cd_unid_orc;
	}

	/**
	 * Get the [optionally formatted] temporal [dt_emissao_ne] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or MssqlDateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtEmissaoNe($format = 'Y-m-d H:i:s')
	{
		if ($this->dt_emissao_ne === null) {
			return null;
		}



		try {
			$dt = new MssqlDateTime($this->dt_emissao_ne);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to MssqlDateTime: " . var_export($this->dt_emissao_ne, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a MssqlDateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [nu_nota_empenho] column value.
	 * 
	 * @return     string
	 */
	public function getNuNotaEmpenho()
	{
		return $this->nu_nota_empenho;
	}

	/**
	 * Get the [dt_ref_ne] column value.
	 * 
	 * @return     int
	 */
	public function getDtRefNe()
	{
		return $this->dt_ref_ne;
	}

	/**
	 * Get the [cd_funcao] column value.
	 * 
	 * @return     string
	 */
	public function getCdFuncao()
	{
		return $this->cd_funcao;
	}

	/**
	 * Get the [cd_subfuncao] column value.
	 * 
	 * @return     string
	 */
	public function getCdSubfuncao()
	{
		return $this->cd_subfuncao;
	}

	/**
	 * Get the [cd_programa] column value.
	 * 
	 * @return     string
	 */
	public function getCdPrograma()
	{
		return $this->cd_programa;
	}

	/**
	 * Get the [cd_proj_ativ] column value.
	 * 
	 * @return     string
	 */
	public function getCdProjAtiv()
	{
		return $this->cd_proj_ativ;
	}

	/**
	 * Get the [nu_proj_ativ] column value.
	 * 
	 * @return     string
	 */
	public function getNuProjAtiv()
	{
		return $this->nu_proj_ativ;
	}

	/**
	 * Get the [nu_sub_proj_ativ] column value.
	 * 
	 * @return     string
	 */
	public function getNuSubProjAtiv()
	{
		return $this->nu_sub_proj_ativ;
	}

	/**
	 * Get the [cd_elemento_od] column value.
	 * 
	 * @return     string
	 */
	public function getCdElementoOd()
	{
		return $this->cd_elemento_od;
	}

	/**
	 * Get the [md_nota_empenho] column value.
	 * 
	 * @return     string
	 */
	public function getMdNotaEmpenho()
	{
		return $this->md_nota_empenho;
	}

	/**
	 * Get the [de_historico_ne1] column value.
	 * 
	 * @return     string
	 */
	public function getDeHistoricoNe1()
	{
		return $this->de_historico_ne1;
	}

	/**
	 * Get the [de_historico_ne2] column value.
	 * 
	 * @return     string
	 */
	public function getDeHistoricoNe2()
	{
		return $this->de_historico_ne2;
	}

	/**
	 * Get the [vl_ant_saldo_dot_ne] column value.
	 * 
	 * @return     string
	 */
	public function getVlAntSaldoDotNe()
	{
		return $this->vl_ant_saldo_dot_ne;
	}

	/**
	 * Get the [vl_empenhado_ne] column value.
	 * 
	 * @return     string
	 */
	public function getVlEmpenhadoNe()
	{
		return $this->vl_empenhado_ne;
	}

	/**
	 * Get the [vl_atual_saldo_dot_ne] column value.
	 * 
	 * @return     string
	 */
	public function getVlAtualSaldoDotNe()
	{
		return $this->vl_atual_saldo_dot_ne;
	}

	/**
	 * Get the [tp_proc_licit_ne] column value.
	 * 
	 * @return     string
	 */
	public function getTpProcLicitNe()
	{
		return $this->tp_proc_licit_ne;
	}

	/**
	 * Get the [nu_doc_ng] column value.
	 * 
	 * @return     string
	 */
	public function getNuDocNg()
	{
		return $this->nu_doc_ng;
	}

	/**
	 * Get the [st_empenho_ne] column value.
	 * 
	 * @return     string
	 */
	public function getStEmpenhoNe()
	{
		return $this->st_empenho_ne;
	}

	/**
	 * Get the [nu_nota_anulacao_ne] column value.
	 * 
	 * @return     string
	 */
	public function getNuNotaAnulacaoNe()
	{
		return $this->nu_nota_anulacao_ne;
	}

	/**
	 * Get the [optionally formatted] temporal [dt_emiss_emp_subst_ne] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or MssqlDateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtEmissEmpSubstNe($format = 'Y-m-d H:i:s')
	{
		if ($this->dt_emiss_emp_subst_ne === null) {
			return null;
		}



		try {
			$dt = new MssqlDateTime($this->dt_emiss_emp_subst_ne);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to MssqlDateTime: " . var_export($this->dt_emiss_emp_subst_ne, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a MssqlDateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [nu_emp_subst_ne] column value.
	 * 
	 * @return     string
	 */
	public function getNuEmpSubstNe()
	{
		return $this->nu_emp_subst_ne;
	}

	/**
	 * Get the [cd_tipo_ng] column value.
	 * 
	 * @return     string
	 */
	public function getCdTipoNg()
	{
		return $this->cd_tipo_ng;
	}

	/**
	 * Get the [nm_negociante_ng] column value.
	 * 
	 * @return     string
	 */
	public function getNmNegocianteNg()
	{
		return $this->nm_negociante_ng;
	}

	/**
	 * Get the [de_endereco_ng] column value.
	 * 
	 * @return     string
	 */
	public function getDeEnderecoNg()
	{
		return $this->de_endereco_ng;
	}

	/**
	 * Get the [nu_fone_ng] column value.
	 * 
	 * @return     string
	 */
	public function getNuFoneNg()
	{
		return $this->nu_fone_ng;
	}

	/**
	 * Get the [nu_cep_ng] column value.
	 * 
	 * @return     string
	 */
	public function getNuCepNg()
	{
		return $this->nu_cep_ng;
	}

	/**
	 * Get the [nm_municipio_ng] column value.
	 * 
	 * @return     string
	 */
	public function getNmMunicipioNg()
	{
		return $this->nm_municipio_ng;
	}

	/**
	 * Get the [cd_uf_nf] column value.
	 * 
	 * @return     string
	 */
	public function getCdUfNf()
	{
		return $this->cd_uf_nf;
	}

	/**
	 * Get the [cd_cpf_gestor] column value.
	 * 
	 * @return     string
	 */
	public function getCdCpfGestor()
	{
		return $this->cd_cpf_gestor;
	}

	/**
	 * Set the value of [cd_municipio] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setCdMunicipio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_municipio !== $v) {
			$this->cd_municipio = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::CD_MUNICIPIO;
		}

		if ($this->aCatEcoProjAtiv !== null && $this->aCatEcoProjAtiv->getCdMunicipio() !== $v) {
			$this->aCatEcoProjAtiv = null;
		}

		return $this;
	} // setCdMunicipio()

	/**
	 * Set the value of [dt_versao_orc] column.
	 * 
	 * @param      int $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setDtVersaoOrc($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->dt_versao_orc !== $v) {
			$this->dt_versao_orc = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::DT_VERSAO_ORC;
		}

		if ($this->aUnidadesOrcamentarias !== null && $this->aUnidadesOrcamentarias->getDtVersaoOrc() !== $v) {
			$this->aUnidadesOrcamentarias = null;
		}

		if ($this->aCatEcoProjAtiv !== null && $this->aCatEcoProjAtiv->getDtVersaoOrc() !== $v) {
			$this->aCatEcoProjAtiv = null;
		}

		return $this;
	} // setDtVersaoOrc()

	/**
	 * Set the value of [cd_orgao] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setCdOrgao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_orgao !== $v) {
			$this->cd_orgao = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::CD_ORGAO;
		}

		if ($this->aUnidadesOrcamentarias !== null && $this->aUnidadesOrcamentarias->getCdOrgao() !== $v) {
			$this->aUnidadesOrcamentarias = null;
		}

		if ($this->aCatEcoProjAtiv !== null && $this->aCatEcoProjAtiv->getCdOrgao() !== $v) {
			$this->aCatEcoProjAtiv = null;
		}

		return $this;
	} // setCdOrgao()

	/**
	 * Set the value of [cd_unid_orc] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setCdUnidOrc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_unid_orc !== $v) {
			$this->cd_unid_orc = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::CD_UNID_ORC;
		}

		if ($this->aUnidadesOrcamentarias !== null && $this->aUnidadesOrcamentarias->getCdUnidOrc() !== $v) {
			$this->aUnidadesOrcamentarias = null;
		}

		if ($this->aCatEcoProjAtiv !== null && $this->aCatEcoProjAtiv->getCdUnidOrc() !== $v) {
			$this->aCatEcoProjAtiv = null;
		}

		return $this;
	} // setCdUnidOrc()

	/**
	 * Sets the value of [dt_emissao_ne] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setDtEmissaoNe($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new MssqlDateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new MssqlDateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_emissao_ne !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_emissao_ne !== null && $tmpDt = new MssqlDateTime($this->dt_emissao_ne)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_emissao_ne = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = NotasEmpenhosPeer::DT_EMISSAO_NE;
			}
		} // if either are not null

		return $this;
	} // setDtEmissaoNe()

	/**
	 * Set the value of [nu_nota_empenho] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setNuNotaEmpenho($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_nota_empenho !== $v) {
			$this->nu_nota_empenho = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::NU_NOTA_EMPENHO;
		}

		return $this;
	} // setNuNotaEmpenho()

	/**
	 * Set the value of [dt_ref_ne] column.
	 * 
	 * @param      int $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setDtRefNe($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->dt_ref_ne !== $v) {
			$this->dt_ref_ne = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::DT_REF_NE;
		}

		return $this;
	} // setDtRefNe()

	/**
	 * Set the value of [cd_funcao] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setCdFuncao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_funcao !== $v) {
			$this->cd_funcao = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::CD_FUNCAO;
		}

		if ($this->aCatEcoProjAtiv !== null && $this->aCatEcoProjAtiv->getCdFuncao() !== $v) {
			$this->aCatEcoProjAtiv = null;
		}

		return $this;
	} // setCdFuncao()

	/**
	 * Set the value of [cd_subfuncao] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setCdSubfuncao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_subfuncao !== $v) {
			$this->cd_subfuncao = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::CD_SUBFUNCAO;
		}

		if ($this->aCatEcoProjAtiv !== null && $this->aCatEcoProjAtiv->getCdSubfuncao() !== $v) {
			$this->aCatEcoProjAtiv = null;
		}

		return $this;
	} // setCdSubfuncao()

	/**
	 * Set the value of [cd_programa] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setCdPrograma($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_programa !== $v) {
			$this->cd_programa = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::CD_PROGRAMA;
		}

		if ($this->aCatEcoProjAtiv !== null && $this->aCatEcoProjAtiv->getCdPrograma() !== $v) {
			$this->aCatEcoProjAtiv = null;
		}

		return $this;
	} // setCdPrograma()

	/**
	 * Set the value of [cd_proj_ativ] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setCdProjAtiv($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_proj_ativ !== $v) {
			$this->cd_proj_ativ = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::CD_PROJ_ATIV;
		}

		if ($this->aCatEcoProjAtiv !== null && $this->aCatEcoProjAtiv->getCdProjAtiv() !== $v) {
			$this->aCatEcoProjAtiv = null;
		}

		return $this;
	} // setCdProjAtiv()

	/**
	 * Set the value of [nu_proj_ativ] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setNuProjAtiv($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_proj_ativ !== $v) {
			$this->nu_proj_ativ = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::NU_PROJ_ATIV;
		}

		if ($this->aCatEcoProjAtiv !== null && $this->aCatEcoProjAtiv->getNuProjAtiv() !== $v) {
			$this->aCatEcoProjAtiv = null;
		}

		return $this;
	} // setNuProjAtiv()

	/**
	 * Set the value of [nu_sub_proj_ativ] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setNuSubProjAtiv($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_sub_proj_ativ !== $v) {
			$this->nu_sub_proj_ativ = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::NU_SUB_PROJ_ATIV;
		}

		if ($this->aCatEcoProjAtiv !== null && $this->aCatEcoProjAtiv->getNuSubProjAtiv() !== $v) {
			$this->aCatEcoProjAtiv = null;
		}

		return $this;
	} // setNuSubProjAtiv()

	/**
	 * Set the value of [cd_elemento_od] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setCdElementoOd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_elemento_od !== $v) {
			$this->cd_elemento_od = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::CD_ELEMENTO_OD;
		}

		if ($this->aCatEcoProjAtiv !== null && $this->aCatEcoProjAtiv->getCdElementoOd() !== $v) {
			$this->aCatEcoProjAtiv = null;
		}

		return $this;
	} // setCdElementoOd()

	/**
	 * Set the value of [md_nota_empenho] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setMdNotaEmpenho($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->md_nota_empenho !== $v) {
			$this->md_nota_empenho = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::MD_NOTA_EMPENHO;
		}

		return $this;
	} // setMdNotaEmpenho()

	/**
	 * Set the value of [de_historico_ne1] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setDeHistoricoNe1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->de_historico_ne1 !== $v) {
			$this->de_historico_ne1 = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::DE_HISTORICO_NE1;
		}

		return $this;
	} // setDeHistoricoNe1()

	/**
	 * Set the value of [de_historico_ne2] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setDeHistoricoNe2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->de_historico_ne2 !== $v) {
			$this->de_historico_ne2 = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::DE_HISTORICO_NE2;
		}

		return $this;
	} // setDeHistoricoNe2()

	/**
	 * Set the value of [vl_ant_saldo_dot_ne] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setVlAntSaldoDotNe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vl_ant_saldo_dot_ne !== $v) {
			$this->vl_ant_saldo_dot_ne = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::VL_ANT_SALDO_DOT_NE;
		}

		return $this;
	} // setVlAntSaldoDotNe()

	/**
	 * Set the value of [vl_empenhado_ne] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setVlEmpenhadoNe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vl_empenhado_ne !== $v) {
			$this->vl_empenhado_ne = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::VL_EMPENHADO_NE;
		}

		return $this;
	} // setVlEmpenhadoNe()

	/**
	 * Set the value of [vl_atual_saldo_dot_ne] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setVlAtualSaldoDotNe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vl_atual_saldo_dot_ne !== $v) {
			$this->vl_atual_saldo_dot_ne = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::VL_ATUAL_SALDO_DOT_NE;
		}

		return $this;
	} // setVlAtualSaldoDotNe()

	/**
	 * Set the value of [tp_proc_licit_ne] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setTpProcLicitNe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tp_proc_licit_ne !== $v) {
			$this->tp_proc_licit_ne = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::TP_PROC_LICIT_NE;
		}

		return $this;
	} // setTpProcLicitNe()

	/**
	 * Set the value of [nu_doc_ng] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setNuDocNg($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_doc_ng !== $v) {
			$this->nu_doc_ng = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::NU_DOC_NG;
		}

		return $this;
	} // setNuDocNg()

	/**
	 * Set the value of [st_empenho_ne] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setStEmpenhoNe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->st_empenho_ne !== $v) {
			$this->st_empenho_ne = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::ST_EMPENHO_NE;
		}

		return $this;
	} // setStEmpenhoNe()

	/**
	 * Set the value of [nu_nota_anulacao_ne] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setNuNotaAnulacaoNe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_nota_anulacao_ne !== $v) {
			$this->nu_nota_anulacao_ne = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::NU_NOTA_ANULACAO_NE;
		}

		return $this;
	} // setNuNotaAnulacaoNe()

	/**
	 * Sets the value of [dt_emiss_emp_subst_ne] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setDtEmissEmpSubstNe($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new MssqlDateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new MssqlDateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_emiss_emp_subst_ne !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_emiss_emp_subst_ne !== null && $tmpDt = new MssqlDateTime($this->dt_emiss_emp_subst_ne)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_emiss_emp_subst_ne = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = NotasEmpenhosPeer::DT_EMISS_EMP_SUBST_NE;
			}
		} // if either are not null

		return $this;
	} // setDtEmissEmpSubstNe()

	/**
	 * Set the value of [nu_emp_subst_ne] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setNuEmpSubstNe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_emp_subst_ne !== $v) {
			$this->nu_emp_subst_ne = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::NU_EMP_SUBST_NE;
		}

		return $this;
	} // setNuEmpSubstNe()

	/**
	 * Set the value of [cd_tipo_ng] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setCdTipoNg($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_tipo_ng !== $v || $this->isNew()) {
			$this->cd_tipo_ng = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::CD_TIPO_NG;
		}

		return $this;
	} // setCdTipoNg()

	/**
	 * Set the value of [nm_negociante_ng] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setNmNegocianteNg($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nm_negociante_ng !== $v || $this->isNew()) {
			$this->nm_negociante_ng = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::NM_NEGOCIANTE_NG;
		}

		return $this;
	} // setNmNegocianteNg()

	/**
	 * Set the value of [de_endereco_ng] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setDeEnderecoNg($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->de_endereco_ng !== $v || $this->isNew()) {
			$this->de_endereco_ng = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::DE_ENDERECO_NG;
		}

		return $this;
	} // setDeEnderecoNg()

	/**
	 * Set the value of [nu_fone_ng] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setNuFoneNg($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_fone_ng !== $v || $this->isNew()) {
			$this->nu_fone_ng = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::NU_FONE_NG;
		}

		return $this;
	} // setNuFoneNg()

	/**
	 * Set the value of [nu_cep_ng] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setNuCepNg($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_cep_ng !== $v || $this->isNew()) {
			$this->nu_cep_ng = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::NU_CEP_NG;
		}

		return $this;
	} // setNuCepNg()

	/**
	 * Set the value of [nm_municipio_ng] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setNmMunicipioNg($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nm_municipio_ng !== $v || $this->isNew()) {
			$this->nm_municipio_ng = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::NM_MUNICIPIO_NG;
		}

		return $this;
	} // setNmMunicipioNg()

	/**
	 * Set the value of [cd_uf_nf] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setCdUfNf($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_uf_nf !== $v || $this->isNew()) {
			$this->cd_uf_nf = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::CD_UF_NF;
		}

		if ($this->aUnidadesFederacao !== null && $this->aUnidadesFederacao->getCdSiglaUf() !== $v) {
			$this->aUnidadesFederacao = null;
		}

		return $this;
	} // setCdUfNf()

	/**
	 * Set the value of [cd_cpf_gestor] column.
	 * 
	 * @param      string $v new value
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 */
	public function setCdCpfGestor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_cpf_gestor !== $v) {
			$this->cd_cpf_gestor = $v;
			$this->modifiedColumns[] = NotasEmpenhosPeer::CD_CPF_GESTOR;
		}

		return $this;
	} // setCdCpfGestor()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->cd_tipo_ng !== '(\' \')') {
				return false;
			}

			if ($this->nm_negociante_ng !== '(\' \')') {
				return false;
			}

			if ($this->de_endereco_ng !== '(\' \')') {
				return false;
			}

			if ($this->nu_fone_ng !== '(\' \')') {
				return false;
			}

			if ($this->nu_cep_ng !== '(\' \')') {
				return false;
			}

			if ($this->nm_municipio_ng !== '(\' \')') {
				return false;
			}

			if ($this->cd_uf_nf !== '(\' \')') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->cd_municipio = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->dt_versao_orc = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->cd_orgao = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->cd_unid_orc = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->dt_emissao_ne = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->nu_nota_empenho = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->dt_ref_ne = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->cd_funcao = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->cd_subfuncao = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->cd_programa = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->cd_proj_ativ = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->nu_proj_ativ = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->nu_sub_proj_ativ = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->cd_elemento_od = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->md_nota_empenho = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->de_historico_ne1 = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->de_historico_ne2 = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->vl_ant_saldo_dot_ne = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->vl_empenhado_ne = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->vl_atual_saldo_dot_ne = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->tp_proc_licit_ne = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->nu_doc_ng = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->st_empenho_ne = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->nu_nota_anulacao_ne = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->dt_emiss_emp_subst_ne = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->nu_emp_subst_ne = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->cd_tipo_ng = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->nm_negociante_ng = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->de_endereco_ng = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->nu_fone_ng = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->nu_cep_ng = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->nm_municipio_ng = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->cd_uf_nf = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->cd_cpf_gestor = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 34; // 34 = NotasEmpenhosPeer::NUM_COLUMNS - NotasEmpenhosPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating NotasEmpenhos object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aCatEcoProjAtiv !== null && $this->cd_municipio !== $this->aCatEcoProjAtiv->getCdMunicipio()) {
			$this->aCatEcoProjAtiv = null;
		}
		if ($this->aUnidadesOrcamentarias !== null && $this->dt_versao_orc !== $this->aUnidadesOrcamentarias->getDtVersaoOrc()) {
			$this->aUnidadesOrcamentarias = null;
		}
		if ($this->aCatEcoProjAtiv !== null && $this->dt_versao_orc !== $this->aCatEcoProjAtiv->getDtVersaoOrc()) {
			$this->aCatEcoProjAtiv = null;
		}
		if ($this->aUnidadesOrcamentarias !== null && $this->cd_orgao !== $this->aUnidadesOrcamentarias->getCdOrgao()) {
			$this->aUnidadesOrcamentarias = null;
		}
		if ($this->aCatEcoProjAtiv !== null && $this->cd_orgao !== $this->aCatEcoProjAtiv->getCdOrgao()) {
			$this->aCatEcoProjAtiv = null;
		}
		if ($this->aUnidadesOrcamentarias !== null && $this->cd_unid_orc !== $this->aUnidadesOrcamentarias->getCdUnidOrc()) {
			$this->aUnidadesOrcamentarias = null;
		}
		if ($this->aCatEcoProjAtiv !== null && $this->cd_unid_orc !== $this->aCatEcoProjAtiv->getCdUnidOrc()) {
			$this->aCatEcoProjAtiv = null;
		}
		if ($this->aCatEcoProjAtiv !== null && $this->cd_funcao !== $this->aCatEcoProjAtiv->getCdFuncao()) {
			$this->aCatEcoProjAtiv = null;
		}
		if ($this->aCatEcoProjAtiv !== null && $this->cd_subfuncao !== $this->aCatEcoProjAtiv->getCdSubfuncao()) {
			$this->aCatEcoProjAtiv = null;
		}
		if ($this->aCatEcoProjAtiv !== null && $this->cd_programa !== $this->aCatEcoProjAtiv->getCdPrograma()) {
			$this->aCatEcoProjAtiv = null;
		}
		if ($this->aCatEcoProjAtiv !== null && $this->cd_proj_ativ !== $this->aCatEcoProjAtiv->getCdProjAtiv()) {
			$this->aCatEcoProjAtiv = null;
		}
		if ($this->aCatEcoProjAtiv !== null && $this->nu_proj_ativ !== $this->aCatEcoProjAtiv->getNuProjAtiv()) {
			$this->aCatEcoProjAtiv = null;
		}
		if ($this->aCatEcoProjAtiv !== null && $this->nu_sub_proj_ativ !== $this->aCatEcoProjAtiv->getNuSubProjAtiv()) {
			$this->aCatEcoProjAtiv = null;
		}
		if ($this->aCatEcoProjAtiv !== null && $this->cd_elemento_od !== $this->aCatEcoProjAtiv->getCdElementoOd()) {
			$this->aCatEcoProjAtiv = null;
		}
		if ($this->aUnidadesFederacao !== null && $this->cd_uf_nf !== $this->aUnidadesFederacao->getCdSiglaUf()) {
			$this->aUnidadesFederacao = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(NotasEmpenhosPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = NotasEmpenhosPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aUnidadesFederacao = null;
			$this->aUnidadesOrcamentarias = null;
			$this->aCatEcoProjAtiv = null;
			$this->collNeCorrecaos = null;
			$this->lastNeCorrecaoCriteria = null;

			$this->collAnulacoesEmpenhoss = null;
			$this->lastAnulacoesEmpenhosCriteria = null;

			$this->collDadosEmpenhoss = null;
			$this->lastDadosEmpenhosCriteria = null;

			$this->collEmpenhosBenss = null;
			$this->lastEmpenhosBensCriteria = null;

			$this->collEmpenhosObrass = null;
			$this->lastEmpenhosObrasCriteria = null;

			$this->collLiquidacoess = null;
			$this->lastLiquidacoesCriteria = null;

			$this->collNotasFiscaisLiquids = null;
			$this->lastNotasFiscaisLiquidCriteria = null;

			$this->collNotasPagamentoss = null;
			$this->lastNotasPagamentosCriteria = null;

			$this->collRecursosEmpenhoss = null;
			$this->lastRecursosEmpenhosCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(NotasEmpenhosPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseNotasEmpenhos:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				NotasEmpenhosPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseNotasEmpenhos:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(NotasEmpenhosPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseNotasEmpenhos:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseNotasEmpenhos:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				NotasEmpenhosPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUnidadesFederacao !== null) {
				if ($this->aUnidadesFederacao->isModified() || $this->aUnidadesFederacao->isNew()) {
					$affectedRows += $this->aUnidadesFederacao->save($con);
				}
				$this->setUnidadesFederacao($this->aUnidadesFederacao);
			}

			if ($this->aUnidadesOrcamentarias !== null) {
				if ($this->aUnidadesOrcamentarias->isModified() || $this->aUnidadesOrcamentarias->isNew()) {
					$affectedRows += $this->aUnidadesOrcamentarias->save($con);
				}
				$this->setUnidadesOrcamentarias($this->aUnidadesOrcamentarias);
			}

			if ($this->aCatEcoProjAtiv !== null) {
				if ($this->aCatEcoProjAtiv->isModified() || $this->aCatEcoProjAtiv->isNew()) {
					$affectedRows += $this->aCatEcoProjAtiv->save($con);
				}
				$this->setCatEcoProjAtiv($this->aCatEcoProjAtiv);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = NotasEmpenhosPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += NotasEmpenhosPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collNeCorrecaos !== null) {
				foreach ($this->collNeCorrecaos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAnulacoesEmpenhoss !== null) {
				foreach ($this->collAnulacoesEmpenhoss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDadosEmpenhoss !== null) {
				foreach ($this->collDadosEmpenhoss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmpenhosBenss !== null) {
				foreach ($this->collEmpenhosBenss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmpenhosObrass !== null) {
				foreach ($this->collEmpenhosObrass as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLiquidacoess !== null) {
				foreach ($this->collLiquidacoess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNotasFiscaisLiquids !== null) {
				foreach ($this->collNotasFiscaisLiquids as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNotasPagamentoss !== null) {
				foreach ($this->collNotasPagamentoss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRecursosEmpenhoss !== null) {
				foreach ($this->collRecursosEmpenhoss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUnidadesFederacao !== null) {
				if (!$this->aUnidadesFederacao->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUnidadesFederacao->getValidationFailures());
				}
			}

			if ($this->aUnidadesOrcamentarias !== null) {
				if (!$this->aUnidadesOrcamentarias->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUnidadesOrcamentarias->getValidationFailures());
				}
			}

			if ($this->aCatEcoProjAtiv !== null) {
				if (!$this->aCatEcoProjAtiv->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCatEcoProjAtiv->getValidationFailures());
				}
			}


			if (($retval = NotasEmpenhosPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collNeCorrecaos !== null) {
					foreach ($this->collNeCorrecaos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAnulacoesEmpenhoss !== null) {
					foreach ($this->collAnulacoesEmpenhoss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDadosEmpenhoss !== null) {
					foreach ($this->collDadosEmpenhoss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmpenhosBenss !== null) {
					foreach ($this->collEmpenhosBenss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmpenhosObrass !== null) {
					foreach ($this->collEmpenhosObrass as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLiquidacoess !== null) {
					foreach ($this->collLiquidacoess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNotasFiscaisLiquids !== null) {
					foreach ($this->collNotasFiscaisLiquids as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNotasPagamentoss !== null) {
					foreach ($this->collNotasPagamentoss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRecursosEmpenhoss !== null) {
					foreach ($this->collRecursosEmpenhoss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = NotasEmpenhosPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCdMunicipio();
				break;
			case 1:
				return $this->getDtVersaoOrc();
				break;
			case 2:
				return $this->getCdOrgao();
				break;
			case 3:
				return $this->getCdUnidOrc();
				break;
			case 4:
				return $this->getDtEmissaoNe();
				break;
			case 5:
				return $this->getNuNotaEmpenho();
				break;
			case 6:
				return $this->getDtRefNe();
				break;
			case 7:
				return $this->getCdFuncao();
				break;
			case 8:
				return $this->getCdSubfuncao();
				break;
			case 9:
				return $this->getCdPrograma();
				break;
			case 10:
				return $this->getCdProjAtiv();
				break;
			case 11:
				return $this->getNuProjAtiv();
				break;
			case 12:
				return $this->getNuSubProjAtiv();
				break;
			case 13:
				return $this->getCdElementoOd();
				break;
			case 14:
				return $this->getMdNotaEmpenho();
				break;
			case 15:
				return $this->getDeHistoricoNe1();
				break;
			case 16:
				return $this->getDeHistoricoNe2();
				break;
			case 17:
				return $this->getVlAntSaldoDotNe();
				break;
			case 18:
				return $this->getVlEmpenhadoNe();
				break;
			case 19:
				return $this->getVlAtualSaldoDotNe();
				break;
			case 20:
				return $this->getTpProcLicitNe();
				break;
			case 21:
				return $this->getNuDocNg();
				break;
			case 22:
				return $this->getStEmpenhoNe();
				break;
			case 23:
				return $this->getNuNotaAnulacaoNe();
				break;
			case 24:
				return $this->getDtEmissEmpSubstNe();
				break;
			case 25:
				return $this->getNuEmpSubstNe();
				break;
			case 26:
				return $this->getCdTipoNg();
				break;
			case 27:
				return $this->getNmNegocianteNg();
				break;
			case 28:
				return $this->getDeEnderecoNg();
				break;
			case 29:
				return $this->getNuFoneNg();
				break;
			case 30:
				return $this->getNuCepNg();
				break;
			case 31:
				return $this->getNmMunicipioNg();
				break;
			case 32:
				return $this->getCdUfNf();
				break;
			case 33:
				return $this->getCdCpfGestor();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = NotasEmpenhosPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCdMunicipio(),
			$keys[1] => $this->getDtVersaoOrc(),
			$keys[2] => $this->getCdOrgao(),
			$keys[3] => $this->getCdUnidOrc(),
			$keys[4] => $this->getDtEmissaoNe(),
			$keys[5] => $this->getNuNotaEmpenho(),
			$keys[6] => $this->getDtRefNe(),
			$keys[7] => $this->getCdFuncao(),
			$keys[8] => $this->getCdSubfuncao(),
			$keys[9] => $this->getCdPrograma(),
			$keys[10] => $this->getCdProjAtiv(),
			$keys[11] => $this->getNuProjAtiv(),
			$keys[12] => $this->getNuSubProjAtiv(),
			$keys[13] => $this->getCdElementoOd(),
			$keys[14] => $this->getMdNotaEmpenho(),
			$keys[15] => $this->getDeHistoricoNe1(),
			$keys[16] => $this->getDeHistoricoNe2(),
			$keys[17] => $this->getVlAntSaldoDotNe(),
			$keys[18] => $this->getVlEmpenhadoNe(),
			$keys[19] => $this->getVlAtualSaldoDotNe(),
			$keys[20] => $this->getTpProcLicitNe(),
			$keys[21] => $this->getNuDocNg(),
			$keys[22] => $this->getStEmpenhoNe(),
			$keys[23] => $this->getNuNotaAnulacaoNe(),
			$keys[24] => $this->getDtEmissEmpSubstNe(),
			$keys[25] => $this->getNuEmpSubstNe(),
			$keys[26] => $this->getCdTipoNg(),
			$keys[27] => $this->getNmNegocianteNg(),
			$keys[28] => $this->getDeEnderecoNg(),
			$keys[29] => $this->getNuFoneNg(),
			$keys[30] => $this->getNuCepNg(),
			$keys[31] => $this->getNmMunicipioNg(),
			$keys[32] => $this->getCdUfNf(),
			$keys[33] => $this->getCdCpfGestor(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = NotasEmpenhosPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCdMunicipio($value);
				break;
			case 1:
				$this->setDtVersaoOrc($value);
				break;
			case 2:
				$this->setCdOrgao($value);
				break;
			case 3:
				$this->setCdUnidOrc($value);
				break;
			case 4:
				$this->setDtEmissaoNe($value);
				break;
			case 5:
				$this->setNuNotaEmpenho($value);
				break;
			case 6:
				$this->setDtRefNe($value);
				break;
			case 7:
				$this->setCdFuncao($value);
				break;
			case 8:
				$this->setCdSubfuncao($value);
				break;
			case 9:
				$this->setCdPrograma($value);
				break;
			case 10:
				$this->setCdProjAtiv($value);
				break;
			case 11:
				$this->setNuProjAtiv($value);
				break;
			case 12:
				$this->setNuSubProjAtiv($value);
				break;
			case 13:
				$this->setCdElementoOd($value);
				break;
			case 14:
				$this->setMdNotaEmpenho($value);
				break;
			case 15:
				$this->setDeHistoricoNe1($value);
				break;
			case 16:
				$this->setDeHistoricoNe2($value);
				break;
			case 17:
				$this->setVlAntSaldoDotNe($value);
				break;
			case 18:
				$this->setVlEmpenhadoNe($value);
				break;
			case 19:
				$this->setVlAtualSaldoDotNe($value);
				break;
			case 20:
				$this->setTpProcLicitNe($value);
				break;
			case 21:
				$this->setNuDocNg($value);
				break;
			case 22:
				$this->setStEmpenhoNe($value);
				break;
			case 23:
				$this->setNuNotaAnulacaoNe($value);
				break;
			case 24:
				$this->setDtEmissEmpSubstNe($value);
				break;
			case 25:
				$this->setNuEmpSubstNe($value);
				break;
			case 26:
				$this->setCdTipoNg($value);
				break;
			case 27:
				$this->setNmNegocianteNg($value);
				break;
			case 28:
				$this->setDeEnderecoNg($value);
				break;
			case 29:
				$this->setNuFoneNg($value);
				break;
			case 30:
				$this->setNuCepNg($value);
				break;
			case 31:
				$this->setNmMunicipioNg($value);
				break;
			case 32:
				$this->setCdUfNf($value);
				break;
			case 33:
				$this->setCdCpfGestor($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = NotasEmpenhosPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCdMunicipio($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDtVersaoOrc($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCdOrgao($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCdUnidOrc($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setDtEmissaoNe($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setNuNotaEmpenho($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setDtRefNe($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCdFuncao($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCdSubfuncao($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCdPrograma($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCdProjAtiv($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setNuProjAtiv($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setNuSubProjAtiv($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCdElementoOd($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setMdNotaEmpenho($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setDeHistoricoNe1($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setDeHistoricoNe2($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setVlAntSaldoDotNe($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setVlEmpenhadoNe($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setVlAtualSaldoDotNe($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setTpProcLicitNe($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setNuDocNg($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setStEmpenhoNe($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setNuNotaAnulacaoNe($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setDtEmissEmpSubstNe($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setNuEmpSubstNe($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setCdTipoNg($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setNmNegocianteNg($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setDeEnderecoNg($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setNuFoneNg($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setNuCepNg($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setNmMunicipioNg($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setCdUfNf($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setCdCpfGestor($arr[$keys[33]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);

		if ($this->isColumnModified(NotasEmpenhosPeer::CD_MUNICIPIO)) $criteria->add(NotasEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);
		if ($this->isColumnModified(NotasEmpenhosPeer::DT_VERSAO_ORC)) $criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
		if ($this->isColumnModified(NotasEmpenhosPeer::CD_ORGAO)) $criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);
		if ($this->isColumnModified(NotasEmpenhosPeer::CD_UNID_ORC)) $criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);
		if ($this->isColumnModified(NotasEmpenhosPeer::DT_EMISSAO_NE)) $criteria->add(NotasEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);
		if ($this->isColumnModified(NotasEmpenhosPeer::NU_NOTA_EMPENHO)) $criteria->add(NotasEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);
		if ($this->isColumnModified(NotasEmpenhosPeer::DT_REF_NE)) $criteria->add(NotasEmpenhosPeer::DT_REF_NE, $this->dt_ref_ne);
		if ($this->isColumnModified(NotasEmpenhosPeer::CD_FUNCAO)) $criteria->add(NotasEmpenhosPeer::CD_FUNCAO, $this->cd_funcao);
		if ($this->isColumnModified(NotasEmpenhosPeer::CD_SUBFUNCAO)) $criteria->add(NotasEmpenhosPeer::CD_SUBFUNCAO, $this->cd_subfuncao);
		if ($this->isColumnModified(NotasEmpenhosPeer::CD_PROGRAMA)) $criteria->add(NotasEmpenhosPeer::CD_PROGRAMA, $this->cd_programa);
		if ($this->isColumnModified(NotasEmpenhosPeer::CD_PROJ_ATIV)) $criteria->add(NotasEmpenhosPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);
		if ($this->isColumnModified(NotasEmpenhosPeer::NU_PROJ_ATIV)) $criteria->add(NotasEmpenhosPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);
		if ($this->isColumnModified(NotasEmpenhosPeer::NU_SUB_PROJ_ATIV)) $criteria->add(NotasEmpenhosPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);
		if ($this->isColumnModified(NotasEmpenhosPeer::CD_ELEMENTO_OD)) $criteria->add(NotasEmpenhosPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);
		if ($this->isColumnModified(NotasEmpenhosPeer::MD_NOTA_EMPENHO)) $criteria->add(NotasEmpenhosPeer::MD_NOTA_EMPENHO, $this->md_nota_empenho);
		if ($this->isColumnModified(NotasEmpenhosPeer::DE_HISTORICO_NE1)) $criteria->add(NotasEmpenhosPeer::DE_HISTORICO_NE1, $this->de_historico_ne1);
		if ($this->isColumnModified(NotasEmpenhosPeer::DE_HISTORICO_NE2)) $criteria->add(NotasEmpenhosPeer::DE_HISTORICO_NE2, $this->de_historico_ne2);
		if ($this->isColumnModified(NotasEmpenhosPeer::VL_ANT_SALDO_DOT_NE)) $criteria->add(NotasEmpenhosPeer::VL_ANT_SALDO_DOT_NE, $this->vl_ant_saldo_dot_ne);
		if ($this->isColumnModified(NotasEmpenhosPeer::VL_EMPENHADO_NE)) $criteria->add(NotasEmpenhosPeer::VL_EMPENHADO_NE, $this->vl_empenhado_ne);
		if ($this->isColumnModified(NotasEmpenhosPeer::VL_ATUAL_SALDO_DOT_NE)) $criteria->add(NotasEmpenhosPeer::VL_ATUAL_SALDO_DOT_NE, $this->vl_atual_saldo_dot_ne);
		if ($this->isColumnModified(NotasEmpenhosPeer::TP_PROC_LICIT_NE)) $criteria->add(NotasEmpenhosPeer::TP_PROC_LICIT_NE, $this->tp_proc_licit_ne);
		if ($this->isColumnModified(NotasEmpenhosPeer::NU_DOC_NG)) $criteria->add(NotasEmpenhosPeer::NU_DOC_NG, $this->nu_doc_ng);
		if ($this->isColumnModified(NotasEmpenhosPeer::ST_EMPENHO_NE)) $criteria->add(NotasEmpenhosPeer::ST_EMPENHO_NE, $this->st_empenho_ne);
		if ($this->isColumnModified(NotasEmpenhosPeer::NU_NOTA_ANULACAO_NE)) $criteria->add(NotasEmpenhosPeer::NU_NOTA_ANULACAO_NE, $this->nu_nota_anulacao_ne);
		if ($this->isColumnModified(NotasEmpenhosPeer::DT_EMISS_EMP_SUBST_NE)) $criteria->add(NotasEmpenhosPeer::DT_EMISS_EMP_SUBST_NE, $this->dt_emiss_emp_subst_ne);
		if ($this->isColumnModified(NotasEmpenhosPeer::NU_EMP_SUBST_NE)) $criteria->add(NotasEmpenhosPeer::NU_EMP_SUBST_NE, $this->nu_emp_subst_ne);
		if ($this->isColumnModified(NotasEmpenhosPeer::CD_TIPO_NG)) $criteria->add(NotasEmpenhosPeer::CD_TIPO_NG, $this->cd_tipo_ng);
		if ($this->isColumnModified(NotasEmpenhosPeer::NM_NEGOCIANTE_NG)) $criteria->add(NotasEmpenhosPeer::NM_NEGOCIANTE_NG, $this->nm_negociante_ng);
		if ($this->isColumnModified(NotasEmpenhosPeer::DE_ENDERECO_NG)) $criteria->add(NotasEmpenhosPeer::DE_ENDERECO_NG, $this->de_endereco_ng);
		if ($this->isColumnModified(NotasEmpenhosPeer::NU_FONE_NG)) $criteria->add(NotasEmpenhosPeer::NU_FONE_NG, $this->nu_fone_ng);
		if ($this->isColumnModified(NotasEmpenhosPeer::NU_CEP_NG)) $criteria->add(NotasEmpenhosPeer::NU_CEP_NG, $this->nu_cep_ng);
		if ($this->isColumnModified(NotasEmpenhosPeer::NM_MUNICIPIO_NG)) $criteria->add(NotasEmpenhosPeer::NM_MUNICIPIO_NG, $this->nm_municipio_ng);
		if ($this->isColumnModified(NotasEmpenhosPeer::CD_UF_NF)) $criteria->add(NotasEmpenhosPeer::CD_UF_NF, $this->cd_uf_nf);
		if ($this->isColumnModified(NotasEmpenhosPeer::CD_CPF_GESTOR)) $criteria->add(NotasEmpenhosPeer::CD_CPF_GESTOR, $this->cd_cpf_gestor);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);

		$criteria->add(NotasEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);
		$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
		$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);
		$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);
		$criteria->add(NotasEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);
		$criteria->add(NotasEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

		return $criteria;
	}

	/**
	 * Returns the composite primary key for this object.
	 * The array elements will be in same order as specified in XML.
	 * @return     array
	 */
	public function getPrimaryKey()
	{
		$pks = array();

		$pks[0] = $this->getCdMunicipio();

		$pks[1] = $this->getDtVersaoOrc();

		$pks[2] = $this->getCdOrgao();

		$pks[3] = $this->getCdUnidOrc();

		$pks[4] = $this->getDtEmissaoNe();

		$pks[5] = $this->getNuNotaEmpenho();

		return $pks;
	}

	/**
	 * Set the [composite] primary key.
	 *
	 * @param      array $keys The elements of the composite key (order must match the order in XML file).
	 * @return     void
	 */
	public function setPrimaryKey($keys)
	{

		$this->setCdMunicipio($keys[0]);

		$this->setDtVersaoOrc($keys[1]);

		$this->setCdOrgao($keys[2]);

		$this->setCdUnidOrc($keys[3]);

		$this->setDtEmissaoNe($keys[4]);

		$this->setNuNotaEmpenho($keys[5]);

	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of NotasEmpenhos (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCdMunicipio($this->cd_municipio);

		$copyObj->setDtVersaoOrc($this->dt_versao_orc);

		$copyObj->setCdOrgao($this->cd_orgao);

		$copyObj->setCdUnidOrc($this->cd_unid_orc);

		$copyObj->setDtEmissaoNe($this->dt_emissao_ne);

		$copyObj->setNuNotaEmpenho($this->nu_nota_empenho);

		$copyObj->setDtRefNe($this->dt_ref_ne);

		$copyObj->setCdFuncao($this->cd_funcao);

		$copyObj->setCdSubfuncao($this->cd_subfuncao);

		$copyObj->setCdPrograma($this->cd_programa);

		$copyObj->setCdProjAtiv($this->cd_proj_ativ);

		$copyObj->setNuProjAtiv($this->nu_proj_ativ);

		$copyObj->setNuSubProjAtiv($this->nu_sub_proj_ativ);

		$copyObj->setCdElementoOd($this->cd_elemento_od);

		$copyObj->setMdNotaEmpenho($this->md_nota_empenho);

		$copyObj->setDeHistoricoNe1($this->de_historico_ne1);

		$copyObj->setDeHistoricoNe2($this->de_historico_ne2);

		$copyObj->setVlAntSaldoDotNe($this->vl_ant_saldo_dot_ne);

		$copyObj->setVlEmpenhadoNe($this->vl_empenhado_ne);

		$copyObj->setVlAtualSaldoDotNe($this->vl_atual_saldo_dot_ne);

		$copyObj->setTpProcLicitNe($this->tp_proc_licit_ne);

		$copyObj->setNuDocNg($this->nu_doc_ng);

		$copyObj->setStEmpenhoNe($this->st_empenho_ne);

		$copyObj->setNuNotaAnulacaoNe($this->nu_nota_anulacao_ne);

		$copyObj->setDtEmissEmpSubstNe($this->dt_emiss_emp_subst_ne);

		$copyObj->setNuEmpSubstNe($this->nu_emp_subst_ne);

		$copyObj->setCdTipoNg($this->cd_tipo_ng);

		$copyObj->setNmNegocianteNg($this->nm_negociante_ng);

		$copyObj->setDeEnderecoNg($this->de_endereco_ng);

		$copyObj->setNuFoneNg($this->nu_fone_ng);

		$copyObj->setNuCepNg($this->nu_cep_ng);

		$copyObj->setNmMunicipioNg($this->nm_municipio_ng);

		$copyObj->setCdUfNf($this->cd_uf_nf);

		$copyObj->setCdCpfGestor($this->cd_cpf_gestor);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getNeCorrecaos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNeCorrecao($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAnulacoesEmpenhoss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAnulacoesEmpenhos($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDadosEmpenhoss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDadosEmpenhos($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmpenhosBenss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmpenhosBens($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmpenhosObrass() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmpenhosObras($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLiquidacoess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLiquidacoes($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNotasFiscaisLiquids() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotasFiscaisLiquid($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNotasPagamentoss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotasPagamentos($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRecursosEmpenhoss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRecursosEmpenhos($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     NotasEmpenhos Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     NotasEmpenhosPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new NotasEmpenhosPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a UnidadesFederacao object.
	 *
	 * @param      UnidadesFederacao $v
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUnidadesFederacao(UnidadesFederacao $v = null)
	{
		if ($v === null) {
			$this->setCdUfNf('(\' \')');
		} else {
			$this->setCdUfNf($v->getCdSiglaUf());
		}

		$this->aUnidadesFederacao = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the UnidadesFederacao object, it will not be re-added.
		if ($v !== null) {
			$v->addNotasEmpenhos($this);
		}

		return $this;
	}


	/**
	 * Get the associated UnidadesFederacao object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     UnidadesFederacao The associated UnidadesFederacao object.
	 * @throws     PropelException
	 */
	public function getUnidadesFederacao(PropelPDO $con = null)
	{
		if ($this->aUnidadesFederacao === null && (($this->cd_uf_nf !== "" && $this->cd_uf_nf !== null))) {
			$this->aUnidadesFederacao = UnidadesFederacaoPeer::retrieveByPk($this->cd_uf_nf);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUnidadesFederacao->addNotasEmpenhoss($this);
			 */
		}
		return $this->aUnidadesFederacao;
	}

	/**
	 * Declares an association between this object and a UnidadesOrcamentarias object.
	 *
	 * @param      UnidadesOrcamentarias $v
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUnidadesOrcamentarias(UnidadesOrcamentarias $v = null)
	{
		if ($v === null) {
			$this->setCdOrgao(NULL);
		} else {
			$this->setCdOrgao($v->getCdOrgao());
		}

		if ($v === null) {
			$this->setCdUnidOrc(NULL);
		} else {
			$this->setCdUnidOrc($v->getCdUnidOrc());
		}

		if ($v === null) {
			$this->setDtVersaoOrc(NULL);
		} else {
			$this->setDtVersaoOrc($v->getDtVersaoOrc());
		}

		$this->aUnidadesOrcamentarias = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the UnidadesOrcamentarias object, it will not be re-added.
		if ($v !== null) {
			$v->addNotasEmpenhos($this);
		}

		return $this;
	}


	/**
	 * Get the associated UnidadesOrcamentarias object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     UnidadesOrcamentarias The associated UnidadesOrcamentarias object.
	 * @throws     PropelException
	 */
	public function getUnidadesOrcamentarias(PropelPDO $con = null)
	{
		if ($this->aUnidadesOrcamentarias === null && (($this->cd_orgao !== "" && $this->cd_orgao !== null) && ($this->cd_unid_orc !== "" && $this->cd_unid_orc !== null) && $this->dt_versao_orc !== null)) {
			$c = new Criteria(UnidadesOrcamentariasPeer::DATABASE_NAME);
			$c->add(UnidadesOrcamentariasPeer::CD_ORGAO, $this->cd_orgao);
			$c->add(UnidadesOrcamentariasPeer::CD_UNID_ORC, $this->cd_unid_orc);
			$c->add(UnidadesOrcamentariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
			$this->aUnidadesOrcamentarias = UnidadesOrcamentariasPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUnidadesOrcamentarias->addNotasEmpenhoss($this);
			 */
		}
		return $this->aUnidadesOrcamentarias;
	}

	/**
	 * Declares an association between this object and a CatEcoProjAtiv object.
	 *
	 * @param      CatEcoProjAtiv $v
	 * @return     NotasEmpenhos The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCatEcoProjAtiv(CatEcoProjAtiv $v = null)
	{
		if ($v === null) {
			$this->setCdElementoOd(NULL);
		} else {
			$this->setCdElementoOd($v->getCdElementoOd());
		}

		if ($v === null) {
			$this->setCdFuncao(NULL);
		} else {
			$this->setCdFuncao($v->getCdFuncao());
		}

		if ($v === null) {
			$this->setCdMunicipio(NULL);
		} else {
			$this->setCdMunicipio($v->getCdMunicipio());
		}

		if ($v === null) {
			$this->setCdOrgao(NULL);
		} else {
			$this->setCdOrgao($v->getCdOrgao());
		}

		if ($v === null) {
			$this->setCdPrograma(NULL);
		} else {
			$this->setCdPrograma($v->getCdPrograma());
		}

		if ($v === null) {
			$this->setCdProjAtiv(NULL);
		} else {
			$this->setCdProjAtiv($v->getCdProjAtiv());
		}

		if ($v === null) {
			$this->setCdSubfuncao(NULL);
		} else {
			$this->setCdSubfuncao($v->getCdSubfuncao());
		}

		if ($v === null) {
			$this->setCdUnidOrc(NULL);
		} else {
			$this->setCdUnidOrc($v->getCdUnidOrc());
		}

		if ($v === null) {
			$this->setDtVersaoOrc(NULL);
		} else {
			$this->setDtVersaoOrc($v->getDtVersaoOrc());
		}

		if ($v === null) {
			$this->setNuProjAtiv(NULL);
		} else {
			$this->setNuProjAtiv($v->getNuProjAtiv());
		}

		if ($v === null) {
			$this->setNuSubProjAtiv(NULL);
		} else {
			$this->setNuSubProjAtiv($v->getNuSubProjAtiv());
		}

		$this->aCatEcoProjAtiv = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the CatEcoProjAtiv object, it will not be re-added.
		if ($v !== null) {
			$v->addNotasEmpenhos($this);
		}

		return $this;
	}


	/**
	 * Get the associated CatEcoProjAtiv object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     CatEcoProjAtiv The associated CatEcoProjAtiv object.
	 * @throws     PropelException
	 */
	public function getCatEcoProjAtiv(PropelPDO $con = null)
	{
		if ($this->aCatEcoProjAtiv === null && (($this->cd_elemento_od !== "" && $this->cd_elemento_od !== null) && ($this->cd_funcao !== "" && $this->cd_funcao !== null) && ($this->cd_municipio !== "" && $this->cd_municipio !== null) && ($this->cd_orgao !== "" && $this->cd_orgao !== null) && ($this->cd_programa !== "" && $this->cd_programa !== null) && ($this->cd_proj_ativ !== "" && $this->cd_proj_ativ !== null) && ($this->cd_subfuncao !== "" && $this->cd_subfuncao !== null) && ($this->cd_unid_orc !== "" && $this->cd_unid_orc !== null) && $this->dt_versao_orc !== null && ($this->nu_proj_ativ !== "" && $this->nu_proj_ativ !== null) && ($this->nu_sub_proj_ativ !== "" && $this->nu_sub_proj_ativ !== null))) {
			$c = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
			$c->add(CatEcoProjAtivPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);
			$c->add(CatEcoProjAtivPeer::CD_FUNCAO, $this->cd_funcao);
			$c->add(CatEcoProjAtivPeer::CD_MUNICIPIO, $this->cd_municipio);
			$c->add(CatEcoProjAtivPeer::CD_ORGAO, $this->cd_orgao);
			$c->add(CatEcoProjAtivPeer::CD_PROGRAMA, $this->cd_programa);
			$c->add(CatEcoProjAtivPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);
			$c->add(CatEcoProjAtivPeer::CD_SUBFUNCAO, $this->cd_subfuncao);
			$c->add(CatEcoProjAtivPeer::CD_UNID_ORC, $this->cd_unid_orc);
			$c->add(CatEcoProjAtivPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
			$c->add(CatEcoProjAtivPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);
			$c->add(CatEcoProjAtivPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);
			$this->aCatEcoProjAtiv = CatEcoProjAtivPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCatEcoProjAtiv->addNotasEmpenhoss($this);
			 */
		}
		return $this->aCatEcoProjAtiv;
	}

	/**
	 * Clears out the collNeCorrecaos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNeCorrecaos()
	 */
	public function clearNeCorrecaos()
	{
		$this->collNeCorrecaos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNeCorrecaos collection (array).
	 *
	 * By default this just sets the collNeCorrecaos collection to an empty array (like clearcollNeCorrecaos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNeCorrecaos()
	{
		$this->collNeCorrecaos = array();
	}

	/**
	 * Gets an array of NeCorrecao objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos has previously been saved, it will retrieve
	 * related NeCorrecaos from storage. If this NotasEmpenhos is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NeCorrecao[]
	 * @throws     PropelException
	 */
	public function getNeCorrecaos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNeCorrecaos === null) {
			if ($this->isNew()) {
			   $this->collNeCorrecaos = array();
			} else {

				$criteria->add(NeCorrecaoPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NeCorrecaoPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NeCorrecaoPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(NeCorrecaoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(NeCorrecaoPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				NeCorrecaoPeer::addSelectColumns($criteria);
				$this->collNeCorrecaos = NeCorrecaoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NeCorrecaoPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(NeCorrecaoPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(NeCorrecaoPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(NeCorrecaoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(NeCorrecaoPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				NeCorrecaoPeer::addSelectColumns($criteria);
				if (!isset($this->lastNeCorrecaoCriteria) || !$this->lastNeCorrecaoCriteria->equals($criteria)) {
					$this->collNeCorrecaos = NeCorrecaoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNeCorrecaoCriteria = $criteria;
		return $this->collNeCorrecaos;
	}

	/**
	 * Returns the number of related NeCorrecao objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NeCorrecao objects.
	 * @throws     PropelException
	 */
	public function countNeCorrecaos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNeCorrecaos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NeCorrecaoPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NeCorrecaoPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NeCorrecaoPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(NeCorrecaoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(NeCorrecaoPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$count = NeCorrecaoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NeCorrecaoPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(NeCorrecaoPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(NeCorrecaoPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(NeCorrecaoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(NeCorrecaoPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				if (!isset($this->lastNeCorrecaoCriteria) || !$this->lastNeCorrecaoCriteria->equals($criteria)) {
					$count = NeCorrecaoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collNeCorrecaos);
				}
			} else {
				$count = count($this->collNeCorrecaos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NeCorrecao object to this object
	 * through the NeCorrecao foreign key attribute.
	 *
	 * @param      NeCorrecao $l NeCorrecao
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNeCorrecao(NeCorrecao $l)
	{
		if ($this->collNeCorrecaos === null) {
			$this->initNeCorrecaos();
		}
		if (!in_array($l, $this->collNeCorrecaos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNeCorrecaos, $l);
			$l->setNotasEmpenhos($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos is new, it will return
	 * an empty collection; or if this NotasEmpenhos has previously
	 * been saved, it will retrieve related NeCorrecaos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in NotasEmpenhos.
	 */
	public function getNeCorrecaosJoinGestores($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNeCorrecaos === null) {
			if ($this->isNew()) {
				$this->collNeCorrecaos = array();
			} else {

				$criteria->add(NeCorrecaoPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NeCorrecaoPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NeCorrecaoPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(NeCorrecaoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(NeCorrecaoPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$this->collNeCorrecaos = NeCorrecaoPeer::doSelectJoinGestores($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NeCorrecaoPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(NeCorrecaoPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(NeCorrecaoPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

			$criteria->add(NeCorrecaoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(NeCorrecaoPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

			if (!isset($this->lastNeCorrecaoCriteria) || !$this->lastNeCorrecaoCriteria->equals($criteria)) {
				$this->collNeCorrecaos = NeCorrecaoPeer::doSelectJoinGestores($criteria, $con, $join_behavior);
			}
		}
		$this->lastNeCorrecaoCriteria = $criteria;

		return $this->collNeCorrecaos;
	}

	/**
	 * Clears out the collAnulacoesEmpenhoss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAnulacoesEmpenhoss()
	 */
	public function clearAnulacoesEmpenhoss()
	{
		$this->collAnulacoesEmpenhoss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAnulacoesEmpenhoss collection (array).
	 *
	 * By default this just sets the collAnulacoesEmpenhoss collection to an empty array (like clearcollAnulacoesEmpenhoss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAnulacoesEmpenhoss()
	{
		$this->collAnulacoesEmpenhoss = array();
	}

	/**
	 * Gets an array of AnulacoesEmpenhos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos has previously been saved, it will retrieve
	 * related AnulacoesEmpenhoss from storage. If this NotasEmpenhos is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AnulacoesEmpenhos[]
	 * @throws     PropelException
	 */
	public function getAnulacoesEmpenhoss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnulacoesEmpenhoss === null) {
			if ($this->isNew()) {
			   $this->collAnulacoesEmpenhoss = array();
			} else {

				$criteria->add(AnulacoesEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(AnulacoesEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(AnulacoesEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(AnulacoesEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(AnulacoesEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				AnulacoesEmpenhosPeer::addSelectColumns($criteria);
				$this->collAnulacoesEmpenhoss = AnulacoesEmpenhosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AnulacoesEmpenhosPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(AnulacoesEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(AnulacoesEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(AnulacoesEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(AnulacoesEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				AnulacoesEmpenhosPeer::addSelectColumns($criteria);
				if (!isset($this->lastAnulacoesEmpenhosCriteria) || !$this->lastAnulacoesEmpenhosCriteria->equals($criteria)) {
					$this->collAnulacoesEmpenhoss = AnulacoesEmpenhosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAnulacoesEmpenhosCriteria = $criteria;
		return $this->collAnulacoesEmpenhoss;
	}

	/**
	 * Returns the number of related AnulacoesEmpenhos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AnulacoesEmpenhos objects.
	 * @throws     PropelException
	 */
	public function countAnulacoesEmpenhoss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAnulacoesEmpenhoss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AnulacoesEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(AnulacoesEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(AnulacoesEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(AnulacoesEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(AnulacoesEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$count = AnulacoesEmpenhosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AnulacoesEmpenhosPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(AnulacoesEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(AnulacoesEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(AnulacoesEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(AnulacoesEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				if (!isset($this->lastAnulacoesEmpenhosCriteria) || !$this->lastAnulacoesEmpenhosCriteria->equals($criteria)) {
					$count = AnulacoesEmpenhosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAnulacoesEmpenhoss);
				}
			} else {
				$count = count($this->collAnulacoesEmpenhoss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AnulacoesEmpenhos object to this object
	 * through the AnulacoesEmpenhos foreign key attribute.
	 *
	 * @param      AnulacoesEmpenhos $l AnulacoesEmpenhos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAnulacoesEmpenhos(AnulacoesEmpenhos $l)
	{
		if ($this->collAnulacoesEmpenhoss === null) {
			$this->initAnulacoesEmpenhoss();
		}
		if (!in_array($l, $this->collAnulacoesEmpenhoss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAnulacoesEmpenhoss, $l);
			$l->setNotasEmpenhos($this);
		}
	}

	/**
	 * Clears out the collDadosEmpenhoss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDadosEmpenhoss()
	 */
	public function clearDadosEmpenhoss()
	{
		$this->collDadosEmpenhoss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDadosEmpenhoss collection (array).
	 *
	 * By default this just sets the collDadosEmpenhoss collection to an empty array (like clearcollDadosEmpenhoss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDadosEmpenhoss()
	{
		$this->collDadosEmpenhoss = array();
	}

	/**
	 * Gets an array of DadosEmpenhos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos has previously been saved, it will retrieve
	 * related DadosEmpenhoss from storage. If this NotasEmpenhos is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DadosEmpenhos[]
	 * @throws     PropelException
	 */
	public function getDadosEmpenhoss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDadosEmpenhoss === null) {
			if ($this->isNew()) {
			   $this->collDadosEmpenhoss = array();
			} else {

				$criteria->add(DadosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(DadosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(DadosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(DadosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(DadosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				DadosEmpenhosPeer::addSelectColumns($criteria);
				$this->collDadosEmpenhoss = DadosEmpenhosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DadosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(DadosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(DadosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(DadosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(DadosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				DadosEmpenhosPeer::addSelectColumns($criteria);
				if (!isset($this->lastDadosEmpenhosCriteria) || !$this->lastDadosEmpenhosCriteria->equals($criteria)) {
					$this->collDadosEmpenhoss = DadosEmpenhosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDadosEmpenhosCriteria = $criteria;
		return $this->collDadosEmpenhoss;
	}

	/**
	 * Returns the number of related DadosEmpenhos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DadosEmpenhos objects.
	 * @throws     PropelException
	 */
	public function countDadosEmpenhoss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDadosEmpenhoss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DadosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(DadosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(DadosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(DadosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(DadosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$count = DadosEmpenhosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DadosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(DadosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(DadosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(DadosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(DadosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				if (!isset($this->lastDadosEmpenhosCriteria) || !$this->lastDadosEmpenhosCriteria->equals($criteria)) {
					$count = DadosEmpenhosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDadosEmpenhoss);
				}
			} else {
				$count = count($this->collDadosEmpenhoss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DadosEmpenhos object to this object
	 * through the DadosEmpenhos foreign key attribute.
	 *
	 * @param      DadosEmpenhos $l DadosEmpenhos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDadosEmpenhos(DadosEmpenhos $l)
	{
		if ($this->collDadosEmpenhoss === null) {
			$this->initDadosEmpenhoss();
		}
		if (!in_array($l, $this->collDadosEmpenhoss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDadosEmpenhoss, $l);
			$l->setNotasEmpenhos($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos is new, it will return
	 * an empty collection; or if this NotasEmpenhos has previously
	 * been saved, it will retrieve related DadosEmpenhoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in NotasEmpenhos.
	 */
	public function getDadosEmpenhossJoinContratos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDadosEmpenhoss === null) {
			if ($this->isNew()) {
				$this->collDadosEmpenhoss = array();
			} else {

				$criteria->add(DadosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(DadosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(DadosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(DadosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(DadosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$this->collDadosEmpenhoss = DadosEmpenhosPeer::doSelectJoinContratos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DadosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(DadosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(DadosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

			$criteria->add(DadosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(DadosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

			if (!isset($this->lastDadosEmpenhosCriteria) || !$this->lastDadosEmpenhosCriteria->equals($criteria)) {
				$this->collDadosEmpenhoss = DadosEmpenhosPeer::doSelectJoinContratos($criteria, $con, $join_behavior);
			}
		}
		$this->lastDadosEmpenhosCriteria = $criteria;

		return $this->collDadosEmpenhoss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos is new, it will return
	 * an empty collection; or if this NotasEmpenhos has previously
	 * been saved, it will retrieve related DadosEmpenhoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in NotasEmpenhos.
	 */
	public function getDadosEmpenhossJoinLicitacoes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDadosEmpenhoss === null) {
			if ($this->isNew()) {
				$this->collDadosEmpenhoss = array();
			} else {

				$criteria->add(DadosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(DadosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(DadosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(DadosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(DadosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$this->collDadosEmpenhoss = DadosEmpenhosPeer::doSelectJoinLicitacoes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DadosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(DadosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(DadosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

			$criteria->add(DadosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(DadosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

			if (!isset($this->lastDadosEmpenhosCriteria) || !$this->lastDadosEmpenhosCriteria->equals($criteria)) {
				$this->collDadosEmpenhoss = DadosEmpenhosPeer::doSelectJoinLicitacoes($criteria, $con, $join_behavior);
			}
		}
		$this->lastDadosEmpenhosCriteria = $criteria;

		return $this->collDadosEmpenhoss;
	}

	/**
	 * Clears out the collEmpenhosBenss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmpenhosBenss()
	 */
	public function clearEmpenhosBenss()
	{
		$this->collEmpenhosBenss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmpenhosBenss collection (array).
	 *
	 * By default this just sets the collEmpenhosBenss collection to an empty array (like clearcollEmpenhosBenss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmpenhosBenss()
	{
		$this->collEmpenhosBenss = array();
	}

	/**
	 * Gets an array of EmpenhosBens objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos has previously been saved, it will retrieve
	 * related EmpenhosBenss from storage. If this NotasEmpenhos is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EmpenhosBens[]
	 * @throws     PropelException
	 */
	public function getEmpenhosBenss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpenhosBenss === null) {
			if ($this->isNew()) {
			   $this->collEmpenhosBenss = array();
			} else {

				$criteria->add(EmpenhosBensPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(EmpenhosBensPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(EmpenhosBensPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(EmpenhosBensPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(EmpenhosBensPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(EmpenhosBensPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				EmpenhosBensPeer::addSelectColumns($criteria);
				$this->collEmpenhosBenss = EmpenhosBensPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmpenhosBensPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(EmpenhosBensPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(EmpenhosBensPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(EmpenhosBensPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(EmpenhosBensPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(EmpenhosBensPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				EmpenhosBensPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmpenhosBensCriteria) || !$this->lastEmpenhosBensCriteria->equals($criteria)) {
					$this->collEmpenhosBenss = EmpenhosBensPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmpenhosBensCriteria = $criteria;
		return $this->collEmpenhosBenss;
	}

	/**
	 * Returns the number of related EmpenhosBens objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EmpenhosBens objects.
	 * @throws     PropelException
	 */
	public function countEmpenhosBenss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmpenhosBenss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmpenhosBensPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(EmpenhosBensPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(EmpenhosBensPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(EmpenhosBensPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(EmpenhosBensPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(EmpenhosBensPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$count = EmpenhosBensPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmpenhosBensPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(EmpenhosBensPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(EmpenhosBensPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(EmpenhosBensPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(EmpenhosBensPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(EmpenhosBensPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				if (!isset($this->lastEmpenhosBensCriteria) || !$this->lastEmpenhosBensCriteria->equals($criteria)) {
					$count = EmpenhosBensPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEmpenhosBenss);
				}
			} else {
				$count = count($this->collEmpenhosBenss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EmpenhosBens object to this object
	 * through the EmpenhosBens foreign key attribute.
	 *
	 * @param      EmpenhosBens $l EmpenhosBens
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmpenhosBens(EmpenhosBens $l)
	{
		if ($this->collEmpenhosBenss === null) {
			$this->initEmpenhosBenss();
		}
		if (!in_array($l, $this->collEmpenhosBenss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmpenhosBenss, $l);
			$l->setNotasEmpenhos($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos is new, it will return
	 * an empty collection; or if this NotasEmpenhos has previously
	 * been saved, it will retrieve related EmpenhosBenss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in NotasEmpenhos.
	 */
	public function getEmpenhosBenssJoinBensMunicipios($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpenhosBenss === null) {
			if ($this->isNew()) {
				$this->collEmpenhosBenss = array();
			} else {

				$criteria->add(EmpenhosBensPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(EmpenhosBensPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(EmpenhosBensPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(EmpenhosBensPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(EmpenhosBensPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(EmpenhosBensPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$this->collEmpenhosBenss = EmpenhosBensPeer::doSelectJoinBensMunicipios($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpenhosBensPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(EmpenhosBensPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(EmpenhosBensPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(EmpenhosBensPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

			$criteria->add(EmpenhosBensPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(EmpenhosBensPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

			if (!isset($this->lastEmpenhosBensCriteria) || !$this->lastEmpenhosBensCriteria->equals($criteria)) {
				$this->collEmpenhosBenss = EmpenhosBensPeer::doSelectJoinBensMunicipios($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpenhosBensCriteria = $criteria;

		return $this->collEmpenhosBenss;
	}

	/**
	 * Clears out the collEmpenhosObrass collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmpenhosObrass()
	 */
	public function clearEmpenhosObrass()
	{
		$this->collEmpenhosObrass = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmpenhosObrass collection (array).
	 *
	 * By default this just sets the collEmpenhosObrass collection to an empty array (like clearcollEmpenhosObrass());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmpenhosObrass()
	{
		$this->collEmpenhosObrass = array();
	}

	/**
	 * Gets an array of EmpenhosObras objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos has previously been saved, it will retrieve
	 * related EmpenhosObrass from storage. If this NotasEmpenhos is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EmpenhosObras[]
	 * @throws     PropelException
	 */
	public function getEmpenhosObrass($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpenhosObrass === null) {
			if ($this->isNew()) {
			   $this->collEmpenhosObrass = array();
			} else {

				$criteria->add(EmpenhosObrasPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(EmpenhosObrasPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(EmpenhosObrasPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(EmpenhosObrasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(EmpenhosObrasPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				EmpenhosObrasPeer::addSelectColumns($criteria);
				$this->collEmpenhosObrass = EmpenhosObrasPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmpenhosObrasPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(EmpenhosObrasPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(EmpenhosObrasPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(EmpenhosObrasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(EmpenhosObrasPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				EmpenhosObrasPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmpenhosObrasCriteria) || !$this->lastEmpenhosObrasCriteria->equals($criteria)) {
					$this->collEmpenhosObrass = EmpenhosObrasPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmpenhosObrasCriteria = $criteria;
		return $this->collEmpenhosObrass;
	}

	/**
	 * Returns the number of related EmpenhosObras objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EmpenhosObras objects.
	 * @throws     PropelException
	 */
	public function countEmpenhosObrass(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmpenhosObrass === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmpenhosObrasPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(EmpenhosObrasPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(EmpenhosObrasPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(EmpenhosObrasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(EmpenhosObrasPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$count = EmpenhosObrasPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmpenhosObrasPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(EmpenhosObrasPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(EmpenhosObrasPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(EmpenhosObrasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(EmpenhosObrasPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				if (!isset($this->lastEmpenhosObrasCriteria) || !$this->lastEmpenhosObrasCriteria->equals($criteria)) {
					$count = EmpenhosObrasPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEmpenhosObrass);
				}
			} else {
				$count = count($this->collEmpenhosObrass);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EmpenhosObras object to this object
	 * through the EmpenhosObras foreign key attribute.
	 *
	 * @param      EmpenhosObras $l EmpenhosObras
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmpenhosObras(EmpenhosObras $l)
	{
		if ($this->collEmpenhosObrass === null) {
			$this->initEmpenhosObrass();
		}
		if (!in_array($l, $this->collEmpenhosObrass, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmpenhosObrass, $l);
			$l->setNotasEmpenhos($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos is new, it will return
	 * an empty collection; or if this NotasEmpenhos has previously
	 * been saved, it will retrieve related EmpenhosObrass from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in NotasEmpenhos.
	 */
	public function getEmpenhosObrassJoinObrasServEng($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpenhosObrass === null) {
			if ($this->isNew()) {
				$this->collEmpenhosObrass = array();
			} else {

				$criteria->add(EmpenhosObrasPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(EmpenhosObrasPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(EmpenhosObrasPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(EmpenhosObrasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(EmpenhosObrasPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$this->collEmpenhosObrass = EmpenhosObrasPeer::doSelectJoinObrasServEng($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpenhosObrasPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(EmpenhosObrasPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(EmpenhosObrasPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

			$criteria->add(EmpenhosObrasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(EmpenhosObrasPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

			if (!isset($this->lastEmpenhosObrasCriteria) || !$this->lastEmpenhosObrasCriteria->equals($criteria)) {
				$this->collEmpenhosObrass = EmpenhosObrasPeer::doSelectJoinObrasServEng($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpenhosObrasCriteria = $criteria;

		return $this->collEmpenhosObrass;
	}

	/**
	 * Clears out the collLiquidacoess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLiquidacoess()
	 */
	public function clearLiquidacoess()
	{
		$this->collLiquidacoess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLiquidacoess collection (array).
	 *
	 * By default this just sets the collLiquidacoess collection to an empty array (like clearcollLiquidacoess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLiquidacoess()
	{
		$this->collLiquidacoess = array();
	}

	/**
	 * Gets an array of Liquidacoes objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos has previously been saved, it will retrieve
	 * related Liquidacoess from storage. If this NotasEmpenhos is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Liquidacoes[]
	 * @throws     PropelException
	 */
	public function getLiquidacoess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLiquidacoess === null) {
			if ($this->isNew()) {
			   $this->collLiquidacoess = array();
			} else {

				$criteria->add(LiquidacoesPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(LiquidacoesPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(LiquidacoesPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(LiquidacoesPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(LiquidacoesPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				LiquidacoesPeer::addSelectColumns($criteria);
				$this->collLiquidacoess = LiquidacoesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LiquidacoesPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(LiquidacoesPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(LiquidacoesPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(LiquidacoesPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(LiquidacoesPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				LiquidacoesPeer::addSelectColumns($criteria);
				if (!isset($this->lastLiquidacoesCriteria) || !$this->lastLiquidacoesCriteria->equals($criteria)) {
					$this->collLiquidacoess = LiquidacoesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLiquidacoesCriteria = $criteria;
		return $this->collLiquidacoess;
	}

	/**
	 * Returns the number of related Liquidacoes objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Liquidacoes objects.
	 * @throws     PropelException
	 */
	public function countLiquidacoess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLiquidacoess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LiquidacoesPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(LiquidacoesPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(LiquidacoesPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(LiquidacoesPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(LiquidacoesPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$count = LiquidacoesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LiquidacoesPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(LiquidacoesPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(LiquidacoesPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(LiquidacoesPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(LiquidacoesPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				if (!isset($this->lastLiquidacoesCriteria) || !$this->lastLiquidacoesCriteria->equals($criteria)) {
					$count = LiquidacoesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collLiquidacoess);
				}
			} else {
				$count = count($this->collLiquidacoess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Liquidacoes object to this object
	 * through the Liquidacoes foreign key attribute.
	 *
	 * @param      Liquidacoes $l Liquidacoes
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLiquidacoes(Liquidacoes $l)
	{
		if ($this->collLiquidacoess === null) {
			$this->initLiquidacoess();
		}
		if (!in_array($l, $this->collLiquidacoess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLiquidacoess, $l);
			$l->setNotasEmpenhos($this);
		}
	}

	/**
	 * Clears out the collNotasFiscaisLiquids collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotasFiscaisLiquids()
	 */
	public function clearNotasFiscaisLiquids()
	{
		$this->collNotasFiscaisLiquids = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotasFiscaisLiquids collection (array).
	 *
	 * By default this just sets the collNotasFiscaisLiquids collection to an empty array (like clearcollNotasFiscaisLiquids());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotasFiscaisLiquids()
	{
		$this->collNotasFiscaisLiquids = array();
	}

	/**
	 * Gets an array of NotasFiscaisLiquid objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos has previously been saved, it will retrieve
	 * related NotasFiscaisLiquids from storage. If this NotasEmpenhos is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NotasFiscaisLiquid[]
	 * @throws     PropelException
	 */
	public function getNotasFiscaisLiquids($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotasFiscaisLiquids === null) {
			if ($this->isNew()) {
			   $this->collNotasFiscaisLiquids = array();
			} else {

				$criteria->add(NotasFiscaisLiquidPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NotasFiscaisLiquidPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NotasFiscaisLiquidPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(NotasFiscaisLiquidPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(NotasFiscaisLiquidPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				NotasFiscaisLiquidPeer::addSelectColumns($criteria);
				$this->collNotasFiscaisLiquids = NotasFiscaisLiquidPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotasFiscaisLiquidPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(NotasFiscaisLiquidPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(NotasFiscaisLiquidPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(NotasFiscaisLiquidPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(NotasFiscaisLiquidPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				NotasFiscaisLiquidPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotasFiscaisLiquidCriteria) || !$this->lastNotasFiscaisLiquidCriteria->equals($criteria)) {
					$this->collNotasFiscaisLiquids = NotasFiscaisLiquidPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotasFiscaisLiquidCriteria = $criteria;
		return $this->collNotasFiscaisLiquids;
	}

	/**
	 * Returns the number of related NotasFiscaisLiquid objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NotasFiscaisLiquid objects.
	 * @throws     PropelException
	 */
	public function countNotasFiscaisLiquids(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotasFiscaisLiquids === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotasFiscaisLiquidPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NotasFiscaisLiquidPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NotasFiscaisLiquidPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(NotasFiscaisLiquidPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(NotasFiscaisLiquidPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$count = NotasFiscaisLiquidPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotasFiscaisLiquidPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(NotasFiscaisLiquidPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(NotasFiscaisLiquidPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(NotasFiscaisLiquidPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(NotasFiscaisLiquidPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				if (!isset($this->lastNotasFiscaisLiquidCriteria) || !$this->lastNotasFiscaisLiquidCriteria->equals($criteria)) {
					$count = NotasFiscaisLiquidPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collNotasFiscaisLiquids);
				}
			} else {
				$count = count($this->collNotasFiscaisLiquids);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NotasFiscaisLiquid object to this object
	 * through the NotasFiscaisLiquid foreign key attribute.
	 *
	 * @param      NotasFiscaisLiquid $l NotasFiscaisLiquid
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotasFiscaisLiquid(NotasFiscaisLiquid $l)
	{
		if ($this->collNotasFiscaisLiquids === null) {
			$this->initNotasFiscaisLiquids();
		}
		if (!in_array($l, $this->collNotasFiscaisLiquids, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotasFiscaisLiquids, $l);
			$l->setNotasEmpenhos($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos is new, it will return
	 * an empty collection; or if this NotasEmpenhos has previously
	 * been saved, it will retrieve related NotasFiscaisLiquids from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in NotasEmpenhos.
	 */
	public function getNotasFiscaisLiquidsJoinUnidadesFederacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotasFiscaisLiquids === null) {
			if ($this->isNew()) {
				$this->collNotasFiscaisLiquids = array();
			} else {

				$criteria->add(NotasFiscaisLiquidPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NotasFiscaisLiquidPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NotasFiscaisLiquidPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(NotasFiscaisLiquidPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(NotasFiscaisLiquidPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$this->collNotasFiscaisLiquids = NotasFiscaisLiquidPeer::doSelectJoinUnidadesFederacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotasFiscaisLiquidPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(NotasFiscaisLiquidPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(NotasFiscaisLiquidPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

			$criteria->add(NotasFiscaisLiquidPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(NotasFiscaisLiquidPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

			if (!isset($this->lastNotasFiscaisLiquidCriteria) || !$this->lastNotasFiscaisLiquidCriteria->equals($criteria)) {
				$this->collNotasFiscaisLiquids = NotasFiscaisLiquidPeer::doSelectJoinUnidadesFederacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotasFiscaisLiquidCriteria = $criteria;

		return $this->collNotasFiscaisLiquids;
	}

	/**
	 * Clears out the collNotasPagamentoss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotasPagamentoss()
	 */
	public function clearNotasPagamentoss()
	{
		$this->collNotasPagamentoss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotasPagamentoss collection (array).
	 *
	 * By default this just sets the collNotasPagamentoss collection to an empty array (like clearcollNotasPagamentoss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotasPagamentoss()
	{
		$this->collNotasPagamentoss = array();
	}

	/**
	 * Gets an array of NotasPagamentos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos has previously been saved, it will retrieve
	 * related NotasPagamentoss from storage. If this NotasEmpenhos is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NotasPagamentos[]
	 * @throws     PropelException
	 */
	public function getNotasPagamentoss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotasPagamentoss === null) {
			if ($this->isNew()) {
			   $this->collNotasPagamentoss = array();
			} else {

				$criteria->add(NotasPagamentosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NotasPagamentosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NotasPagamentosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(NotasPagamentosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(NotasPagamentosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				NotasPagamentosPeer::addSelectColumns($criteria);
				$this->collNotasPagamentoss = NotasPagamentosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotasPagamentosPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(NotasPagamentosPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(NotasPagamentosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(NotasPagamentosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(NotasPagamentosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				NotasPagamentosPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotasPagamentosCriteria) || !$this->lastNotasPagamentosCriteria->equals($criteria)) {
					$this->collNotasPagamentoss = NotasPagamentosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotasPagamentosCriteria = $criteria;
		return $this->collNotasPagamentoss;
	}

	/**
	 * Returns the number of related NotasPagamentos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NotasPagamentos objects.
	 * @throws     PropelException
	 */
	public function countNotasPagamentoss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotasPagamentoss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotasPagamentosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NotasPagamentosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NotasPagamentosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(NotasPagamentosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(NotasPagamentosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$count = NotasPagamentosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotasPagamentosPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(NotasPagamentosPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(NotasPagamentosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(NotasPagamentosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(NotasPagamentosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				if (!isset($this->lastNotasPagamentosCriteria) || !$this->lastNotasPagamentosCriteria->equals($criteria)) {
					$count = NotasPagamentosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collNotasPagamentoss);
				}
			} else {
				$count = count($this->collNotasPagamentoss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NotasPagamentos object to this object
	 * through the NotasPagamentos foreign key attribute.
	 *
	 * @param      NotasPagamentos $l NotasPagamentos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotasPagamentos(NotasPagamentos $l)
	{
		if ($this->collNotasPagamentoss === null) {
			$this->initNotasPagamentoss();
		}
		if (!in_array($l, $this->collNotasPagamentoss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotasPagamentoss, $l);
			$l->setNotasEmpenhos($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos is new, it will return
	 * an empty collection; or if this NotasEmpenhos has previously
	 * been saved, it will retrieve related NotasPagamentoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in NotasEmpenhos.
	 */
	public function getNotasPagamentossJoinDadosPessoais($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotasPagamentoss === null) {
			if ($this->isNew()) {
				$this->collNotasPagamentoss = array();
			} else {

				$criteria->add(NotasPagamentosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NotasPagamentosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NotasPagamentosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(NotasPagamentosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(NotasPagamentosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$this->collNotasPagamentoss = NotasPagamentosPeer::doSelectJoinDadosPessoais($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotasPagamentosPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(NotasPagamentosPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(NotasPagamentosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

			$criteria->add(NotasPagamentosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(NotasPagamentosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

			if (!isset($this->lastNotasPagamentosCriteria) || !$this->lastNotasPagamentosCriteria->equals($criteria)) {
				$this->collNotasPagamentoss = NotasPagamentosPeer::doSelectJoinDadosPessoais($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotasPagamentosCriteria = $criteria;

		return $this->collNotasPagamentoss;
	}

	/**
	 * Clears out the collRecursosEmpenhoss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRecursosEmpenhoss()
	 */
	public function clearRecursosEmpenhoss()
	{
		$this->collRecursosEmpenhoss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRecursosEmpenhoss collection (array).
	 *
	 * By default this just sets the collRecursosEmpenhoss collection to an empty array (like clearcollRecursosEmpenhoss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRecursosEmpenhoss()
	{
		$this->collRecursosEmpenhoss = array();
	}

	/**
	 * Gets an array of RecursosEmpenhos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos has previously been saved, it will retrieve
	 * related RecursosEmpenhoss from storage. If this NotasEmpenhos is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RecursosEmpenhos[]
	 * @throws     PropelException
	 */
	public function getRecursosEmpenhoss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecursosEmpenhoss === null) {
			if ($this->isNew()) {
			   $this->collRecursosEmpenhoss = array();
			} else {

				$criteria->add(RecursosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(RecursosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(RecursosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(RecursosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(RecursosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				RecursosEmpenhosPeer::addSelectColumns($criteria);
				$this->collRecursosEmpenhoss = RecursosEmpenhosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RecursosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(RecursosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(RecursosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(RecursosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(RecursosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				RecursosEmpenhosPeer::addSelectColumns($criteria);
				if (!isset($this->lastRecursosEmpenhosCriteria) || !$this->lastRecursosEmpenhosCriteria->equals($criteria)) {
					$this->collRecursosEmpenhoss = RecursosEmpenhosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRecursosEmpenhosCriteria = $criteria;
		return $this->collRecursosEmpenhoss;
	}

	/**
	 * Returns the number of related RecursosEmpenhos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RecursosEmpenhos objects.
	 * @throws     PropelException
	 */
	public function countRecursosEmpenhoss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRecursosEmpenhoss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RecursosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(RecursosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(RecursosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(RecursosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(RecursosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$count = RecursosEmpenhosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RecursosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(RecursosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(RecursosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);


				$criteria->add(RecursosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(RecursosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				if (!isset($this->lastRecursosEmpenhosCriteria) || !$this->lastRecursosEmpenhosCriteria->equals($criteria)) {
					$count = RecursosEmpenhosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRecursosEmpenhoss);
				}
			} else {
				$count = count($this->collRecursosEmpenhoss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RecursosEmpenhos object to this object
	 * through the RecursosEmpenhos foreign key attribute.
	 *
	 * @param      RecursosEmpenhos $l RecursosEmpenhos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRecursosEmpenhos(RecursosEmpenhos $l)
	{
		if ($this->collRecursosEmpenhoss === null) {
			$this->initRecursosEmpenhoss();
		}
		if (!in_array($l, $this->collRecursosEmpenhoss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRecursosEmpenhoss, $l);
			$l->setNotasEmpenhos($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos is new, it will return
	 * an empty collection; or if this NotasEmpenhos has previously
	 * been saved, it will retrieve related RecursosEmpenhoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in NotasEmpenhos.
	 */
	public function getRecursosEmpenhossJoinOrigensRecursos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecursosEmpenhoss === null) {
			if ($this->isNew()) {
				$this->collRecursosEmpenhoss = array();
			} else {

				$criteria->add(RecursosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(RecursosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(RecursosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(RecursosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(RecursosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$this->collRecursosEmpenhoss = RecursosEmpenhosPeer::doSelectJoinOrigensRecursos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RecursosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(RecursosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(RecursosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

			$criteria->add(RecursosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(RecursosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

			if (!isset($this->lastRecursosEmpenhosCriteria) || !$this->lastRecursosEmpenhosCriteria->equals($criteria)) {
				$this->collRecursosEmpenhoss = RecursosEmpenhosPeer::doSelectJoinOrigensRecursos($criteria, $con, $join_behavior);
			}
		}
		$this->lastRecursosEmpenhosCriteria = $criteria;

		return $this->collRecursosEmpenhoss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this NotasEmpenhos is new, it will return
	 * an empty collection; or if this NotasEmpenhos has previously
	 * been saved, it will retrieve related RecursosEmpenhoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in NotasEmpenhos.
	 */
	public function getRecursosEmpenhossJoinConveniosFirmados($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(NotasEmpenhosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecursosEmpenhoss === null) {
			if ($this->isNew()) {
				$this->collRecursosEmpenhoss = array();
			} else {

				$criteria->add(RecursosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(RecursosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(RecursosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

				$criteria->add(RecursosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(RecursosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

				$this->collRecursosEmpenhoss = RecursosEmpenhosPeer::doSelectJoinConveniosFirmados($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RecursosEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(RecursosEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(RecursosEmpenhosPeer::DT_EMISSAO_NE, $this->dt_emissao_ne);

			$criteria->add(RecursosEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(RecursosEmpenhosPeer::NU_NOTA_EMPENHO, $this->nu_nota_empenho);

			if (!isset($this->lastRecursosEmpenhosCriteria) || !$this->lastRecursosEmpenhosCriteria->equals($criteria)) {
				$this->collRecursosEmpenhoss = RecursosEmpenhosPeer::doSelectJoinConveniosFirmados($criteria, $con, $join_behavior);
			}
		}
		$this->lastRecursosEmpenhosCriteria = $criteria;

		return $this->collRecursosEmpenhoss;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collNeCorrecaos) {
				foreach ((array) $this->collNeCorrecaos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAnulacoesEmpenhoss) {
				foreach ((array) $this->collAnulacoesEmpenhoss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDadosEmpenhoss) {
				foreach ((array) $this->collDadosEmpenhoss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmpenhosBenss) {
				foreach ((array) $this->collEmpenhosBenss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmpenhosObrass) {
				foreach ((array) $this->collEmpenhosObrass as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLiquidacoess) {
				foreach ((array) $this->collLiquidacoess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNotasFiscaisLiquids) {
				foreach ((array) $this->collNotasFiscaisLiquids as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNotasPagamentoss) {
				foreach ((array) $this->collNotasPagamentoss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRecursosEmpenhoss) {
				foreach ((array) $this->collRecursosEmpenhoss as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collNeCorrecaos = null;
		$this->collAnulacoesEmpenhoss = null;
		$this->collDadosEmpenhoss = null;
		$this->collEmpenhosBenss = null;
		$this->collEmpenhosObrass = null;
		$this->collLiquidacoess = null;
		$this->collNotasFiscaisLiquids = null;
		$this->collNotasPagamentoss = null;
		$this->collRecursosEmpenhoss = null;
			$this->aUnidadesFederacao = null;
			$this->aUnidadesOrcamentarias = null;
			$this->aCatEcoProjAtiv = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseNotasEmpenhos:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseNotasEmpenhos::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseNotasEmpenhos
