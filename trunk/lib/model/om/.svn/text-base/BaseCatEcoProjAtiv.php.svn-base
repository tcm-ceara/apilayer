<?php

/**
 * Base class that represents a row from the 'CAT_ECO_PROJ_ATIV' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Thu Jul 15 18:22:38 2010
 *
 * @package    lib.model.om
 */
abstract class BaseCatEcoProjAtiv extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CatEcoProjAtivPeer
	 */
	protected static $peer;

	/**
	 * The value for the cd_municipio field.
	 * @var        string
	 */
	protected $cd_municipio;

	/**
	 * The value for the dt_versao_orc field.
	 * @var        int
	 */
	protected $dt_versao_orc;

	/**
	 * The value for the cd_orgao field.
	 * @var        string
	 */
	protected $cd_orgao;

	/**
	 * The value for the cd_unid_orc field.
	 * @var        string
	 */
	protected $cd_unid_orc;

	/**
	 * The value for the cd_funcao field.
	 * @var        string
	 */
	protected $cd_funcao;

	/**
	 * The value for the cd_subfuncao field.
	 * @var        string
	 */
	protected $cd_subfuncao;

	/**
	 * The value for the cd_programa field.
	 * @var        string
	 */
	protected $cd_programa;

	/**
	 * The value for the cd_proj_ativ field.
	 * @var        string
	 */
	protected $cd_proj_ativ;

	/**
	 * The value for the nu_proj_ativ field.
	 * @var        string
	 */
	protected $nu_proj_ativ;

	/**
	 * The value for the nu_sub_proj_ativ field.
	 * @var        string
	 */
	protected $nu_sub_proj_ativ;

	/**
	 * The value for the cd_elemento_od field.
	 * @var        string
	 */
	protected $cd_elemento_od;

	/**
	 * The value for the vl_atual_ce_proj_ativ field.
	 * @var        string
	 */
	protected $vl_atual_ce_proj_ativ;

	/**
	 * The value for the vl_orc_ce_proj_ativ field.
	 * @var        string
	 */
	protected $vl_orc_ce_proj_ativ;

	/**
	 * @var        OrcDespProjAtiv
	 */
	protected $aOrcDespProjAtiv;

	/**
	 * @var        OrcDespCatEco
	 */
	protected $aOrcDespCatEco;

	/**
	 * @var        array BalDespOrc[] Collection to store aggregation of BalDespOrc objects.
	 */
	protected $collBalDespOrcs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBalDespOrcs.
	 */
	private $lastBalDespOrcCriteria = null;

	/**
	 * @var        array CreditosAdicionais[] Collection to store aggregation of CreditosAdicionais objects.
	 */
	protected $collCreditosAdicionaiss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCreditosAdicionaiss.
	 */
	private $lastCreditosAdicionaisCriteria = null;

	/**
	 * @var        array DestinoRealocOrc[] Collection to store aggregation of DestinoRealocOrc objects.
	 */
	protected $collDestinoRealocOrcs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDestinoRealocOrcs.
	 */
	private $lastDestinoRealocOrcCriteria = null;

	/**
	 * @var        array DotacoesLicitacoes[] Collection to store aggregation of DotacoesLicitacoes objects.
	 */
	protected $collDotacoesLicitacoess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDotacoesLicitacoess.
	 */
	private $lastDotacoesLicitacoesCriteria = null;

	/**
	 * @var        array FontesAnulacao[] Collection to store aggregation of FontesAnulacao objects.
	 */
	protected $collFontesAnulacaos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFontesAnulacaos.
	 */
	private $lastFontesAnulacaoCriteria = null;

	/**
	 * @var        array NotasEmpenhos[] Collection to store aggregation of NotasEmpenhos objects.
	 */
	protected $collNotasEmpenhoss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotasEmpenhoss.
	 */
	private $lastNotasEmpenhosCriteria = null;

	/**
	 * @var        array RealocacoesOrcamentarias[] Collection to store aggregation of RealocacoesOrcamentarias objects.
	 */
	protected $collRealocacoesOrcamentariass;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRealocacoesOrcamentariass.
	 */
	private $lastRealocacoesOrcamentariasCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'CatEcoProjAtivPeer';

	/**
	 * Get the [cd_municipio] column value.
	 * 
	 * @return     string
	 */
	public function getCdMunicipio()
	{
		return $this->cd_municipio;
	}

	/**
	 * Get the [dt_versao_orc] column value.
	 * 
	 * @return     int
	 */
	public function getDtVersaoOrc()
	{
		return $this->dt_versao_orc;
	}

	/**
	 * Get the [cd_orgao] column value.
	 * 
	 * @return     string
	 */
	public function getCdOrgao()
	{
		return $this->cd_orgao;
	}

	/**
	 * Get the [cd_unid_orc] column value.
	 * 
	 * @return     string
	 */
	public function getCdUnidOrc()
	{
		return $this->cd_unid_orc;
	}

	/**
	 * Get the [cd_funcao] column value.
	 * 
	 * @return     string
	 */
	public function getCdFuncao()
	{
		return $this->cd_funcao;
	}

	/**
	 * Get the [cd_subfuncao] column value.
	 * 
	 * @return     string
	 */
	public function getCdSubfuncao()
	{
		return $this->cd_subfuncao;
	}

	/**
	 * Get the [cd_programa] column value.
	 * 
	 * @return     string
	 */
	public function getCdPrograma()
	{
		return $this->cd_programa;
	}

	/**
	 * Get the [cd_proj_ativ] column value.
	 * 
	 * @return     string
	 */
	public function getCdProjAtiv()
	{
		return $this->cd_proj_ativ;
	}

	/**
	 * Get the [nu_proj_ativ] column value.
	 * 
	 * @return     string
	 */
	public function getNuProjAtiv()
	{
		return $this->nu_proj_ativ;
	}

	/**
	 * Get the [nu_sub_proj_ativ] column value.
	 * 
	 * @return     string
	 */
	public function getNuSubProjAtiv()
	{
		return $this->nu_sub_proj_ativ;
	}

	/**
	 * Get the [cd_elemento_od] column value.
	 * 
	 * @return     string
	 */
	public function getCdElementoOd()
	{
		return $this->cd_elemento_od;
	}

	/**
	 * Get the [vl_atual_ce_proj_ativ] column value.
	 * 
	 * @return     string
	 */
	public function getVlAtualCeProjAtiv()
	{
		return $this->vl_atual_ce_proj_ativ;
	}

	/**
	 * Get the [vl_orc_ce_proj_ativ] column value.
	 * 
	 * @return     string
	 */
	public function getVlOrcCeProjAtiv()
	{
		return $this->vl_orc_ce_proj_ativ;
	}

	/**
	 * Set the value of [cd_municipio] column.
	 * 
	 * @param      string $v new value
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 */
	public function setCdMunicipio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_municipio !== $v) {
			$this->cd_municipio = $v;
			$this->modifiedColumns[] = CatEcoProjAtivPeer::CD_MUNICIPIO;
		}

		if ($this->aOrcDespProjAtiv !== null && $this->aOrcDespProjAtiv->getCdMunicipio() !== $v) {
			$this->aOrcDespProjAtiv = null;
		}

		if ($this->aOrcDespCatEco !== null && $this->aOrcDespCatEco->getCdMunicipio() !== $v) {
			$this->aOrcDespCatEco = null;
		}

		return $this;
	} // setCdMunicipio()

	/**
	 * Set the value of [dt_versao_orc] column.
	 * 
	 * @param      int $v new value
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 */
	public function setDtVersaoOrc($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->dt_versao_orc !== $v) {
			$this->dt_versao_orc = $v;
			$this->modifiedColumns[] = CatEcoProjAtivPeer::DT_VERSAO_ORC;
		}

		if ($this->aOrcDespProjAtiv !== null && $this->aOrcDespProjAtiv->getDtVersaoOrc() !== $v) {
			$this->aOrcDespProjAtiv = null;
		}

		if ($this->aOrcDespCatEco !== null && $this->aOrcDespCatEco->getDtVersaoOrc() !== $v) {
			$this->aOrcDespCatEco = null;
		}

		return $this;
	} // setDtVersaoOrc()

	/**
	 * Set the value of [cd_orgao] column.
	 * 
	 * @param      string $v new value
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 */
	public function setCdOrgao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_orgao !== $v) {
			$this->cd_orgao = $v;
			$this->modifiedColumns[] = CatEcoProjAtivPeer::CD_ORGAO;
		}

		if ($this->aOrcDespProjAtiv !== null && $this->aOrcDespProjAtiv->getCdOrgao() !== $v) {
			$this->aOrcDespProjAtiv = null;
		}

		if ($this->aOrcDespCatEco !== null && $this->aOrcDespCatEco->getCdOrgao() !== $v) {
			$this->aOrcDespCatEco = null;
		}

		return $this;
	} // setCdOrgao()

	/**
	 * Set the value of [cd_unid_orc] column.
	 * 
	 * @param      string $v new value
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 */
	public function setCdUnidOrc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_unid_orc !== $v) {
			$this->cd_unid_orc = $v;
			$this->modifiedColumns[] = CatEcoProjAtivPeer::CD_UNID_ORC;
		}

		if ($this->aOrcDespProjAtiv !== null && $this->aOrcDespProjAtiv->getCdUnidOrc() !== $v) {
			$this->aOrcDespProjAtiv = null;
		}

		if ($this->aOrcDespCatEco !== null && $this->aOrcDespCatEco->getCdUnidOrc() !== $v) {
			$this->aOrcDespCatEco = null;
		}

		return $this;
	} // setCdUnidOrc()

	/**
	 * Set the value of [cd_funcao] column.
	 * 
	 * @param      string $v new value
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 */
	public function setCdFuncao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_funcao !== $v) {
			$this->cd_funcao = $v;
			$this->modifiedColumns[] = CatEcoProjAtivPeer::CD_FUNCAO;
		}

		return $this;
	} // setCdFuncao()

	/**
	 * Set the value of [cd_subfuncao] column.
	 * 
	 * @param      string $v new value
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 */
	public function setCdSubfuncao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_subfuncao !== $v) {
			$this->cd_subfuncao = $v;
			$this->modifiedColumns[] = CatEcoProjAtivPeer::CD_SUBFUNCAO;
		}

		if ($this->aOrcDespProjAtiv !== null && $this->aOrcDespProjAtiv->getCdSubfuncao() !== $v) {
			$this->aOrcDespProjAtiv = null;
		}

		return $this;
	} // setCdSubfuncao()

	/**
	 * Set the value of [cd_programa] column.
	 * 
	 * @param      string $v new value
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 */
	public function setCdPrograma($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_programa !== $v) {
			$this->cd_programa = $v;
			$this->modifiedColumns[] = CatEcoProjAtivPeer::CD_PROGRAMA;
		}

		if ($this->aOrcDespProjAtiv !== null && $this->aOrcDespProjAtiv->getCdPrograma() !== $v) {
			$this->aOrcDespProjAtiv = null;
		}

		return $this;
	} // setCdPrograma()

	/**
	 * Set the value of [cd_proj_ativ] column.
	 * 
	 * @param      string $v new value
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 */
	public function setCdProjAtiv($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_proj_ativ !== $v) {
			$this->cd_proj_ativ = $v;
			$this->modifiedColumns[] = CatEcoProjAtivPeer::CD_PROJ_ATIV;
		}

		if ($this->aOrcDespProjAtiv !== null && $this->aOrcDespProjAtiv->getCdProjAtiv() !== $v) {
			$this->aOrcDespProjAtiv = null;
		}

		return $this;
	} // setCdProjAtiv()

	/**
	 * Set the value of [nu_proj_ativ] column.
	 * 
	 * @param      string $v new value
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 */
	public function setNuProjAtiv($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_proj_ativ !== $v) {
			$this->nu_proj_ativ = $v;
			$this->modifiedColumns[] = CatEcoProjAtivPeer::NU_PROJ_ATIV;
		}

		if ($this->aOrcDespProjAtiv !== null && $this->aOrcDespProjAtiv->getNuProjAtiv() !== $v) {
			$this->aOrcDespProjAtiv = null;
		}

		return $this;
	} // setNuProjAtiv()

	/**
	 * Set the value of [nu_sub_proj_ativ] column.
	 * 
	 * @param      string $v new value
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 */
	public function setNuSubProjAtiv($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nu_sub_proj_ativ !== $v) {
			$this->nu_sub_proj_ativ = $v;
			$this->modifiedColumns[] = CatEcoProjAtivPeer::NU_SUB_PROJ_ATIV;
		}

		if ($this->aOrcDespProjAtiv !== null && $this->aOrcDespProjAtiv->getNuSubProjAtiv() !== $v) {
			$this->aOrcDespProjAtiv = null;
		}

		return $this;
	} // setNuSubProjAtiv()

	/**
	 * Set the value of [cd_elemento_od] column.
	 * 
	 * @param      string $v new value
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 */
	public function setCdElementoOd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cd_elemento_od !== $v) {
			$this->cd_elemento_od = $v;
			$this->modifiedColumns[] = CatEcoProjAtivPeer::CD_ELEMENTO_OD;
		}

		if ($this->aOrcDespCatEco !== null && $this->aOrcDespCatEco->getCdElementoOd() !== $v) {
			$this->aOrcDespCatEco = null;
		}

		return $this;
	} // setCdElementoOd()

	/**
	 * Set the value of [vl_atual_ce_proj_ativ] column.
	 * 
	 * @param      string $v new value
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 */
	public function setVlAtualCeProjAtiv($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vl_atual_ce_proj_ativ !== $v) {
			$this->vl_atual_ce_proj_ativ = $v;
			$this->modifiedColumns[] = CatEcoProjAtivPeer::VL_ATUAL_CE_PROJ_ATIV;
		}

		return $this;
	} // setVlAtualCeProjAtiv()

	/**
	 * Set the value of [vl_orc_ce_proj_ativ] column.
	 * 
	 * @param      string $v new value
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 */
	public function setVlOrcCeProjAtiv($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vl_orc_ce_proj_ativ !== $v) {
			$this->vl_orc_ce_proj_ativ = $v;
			$this->modifiedColumns[] = CatEcoProjAtivPeer::VL_ORC_CE_PROJ_ATIV;
		}

		return $this;
	} // setVlOrcCeProjAtiv()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->cd_municipio = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->dt_versao_orc = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->cd_orgao = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->cd_unid_orc = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->cd_funcao = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->cd_subfuncao = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->cd_programa = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->cd_proj_ativ = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->nu_proj_ativ = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->nu_sub_proj_ativ = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->cd_elemento_od = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->vl_atual_ce_proj_ativ = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->vl_orc_ce_proj_ativ = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 13; // 13 = CatEcoProjAtivPeer::NUM_COLUMNS - CatEcoProjAtivPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating CatEcoProjAtiv object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aOrcDespProjAtiv !== null && $this->cd_municipio !== $this->aOrcDespProjAtiv->getCdMunicipio()) {
			$this->aOrcDespProjAtiv = null;
		}
		if ($this->aOrcDespCatEco !== null && $this->cd_municipio !== $this->aOrcDespCatEco->getCdMunicipio()) {
			$this->aOrcDespCatEco = null;
		}
		if ($this->aOrcDespProjAtiv !== null && $this->dt_versao_orc !== $this->aOrcDespProjAtiv->getDtVersaoOrc()) {
			$this->aOrcDespProjAtiv = null;
		}
		if ($this->aOrcDespCatEco !== null && $this->dt_versao_orc !== $this->aOrcDespCatEco->getDtVersaoOrc()) {
			$this->aOrcDespCatEco = null;
		}
		if ($this->aOrcDespProjAtiv !== null && $this->cd_orgao !== $this->aOrcDespProjAtiv->getCdOrgao()) {
			$this->aOrcDespProjAtiv = null;
		}
		if ($this->aOrcDespCatEco !== null && $this->cd_orgao !== $this->aOrcDespCatEco->getCdOrgao()) {
			$this->aOrcDespCatEco = null;
		}
		if ($this->aOrcDespProjAtiv !== null && $this->cd_unid_orc !== $this->aOrcDespProjAtiv->getCdUnidOrc()) {
			$this->aOrcDespProjAtiv = null;
		}
		if ($this->aOrcDespCatEco !== null && $this->cd_unid_orc !== $this->aOrcDespCatEco->getCdUnidOrc()) {
			$this->aOrcDespCatEco = null;
		}
		if ($this->aOrcDespProjAtiv !== null && $this->cd_subfuncao !== $this->aOrcDespProjAtiv->getCdSubfuncao()) {
			$this->aOrcDespProjAtiv = null;
		}
		if ($this->aOrcDespProjAtiv !== null && $this->cd_programa !== $this->aOrcDespProjAtiv->getCdPrograma()) {
			$this->aOrcDespProjAtiv = null;
		}
		if ($this->aOrcDespProjAtiv !== null && $this->cd_proj_ativ !== $this->aOrcDespProjAtiv->getCdProjAtiv()) {
			$this->aOrcDespProjAtiv = null;
		}
		if ($this->aOrcDespProjAtiv !== null && $this->nu_proj_ativ !== $this->aOrcDespProjAtiv->getNuProjAtiv()) {
			$this->aOrcDespProjAtiv = null;
		}
		if ($this->aOrcDespProjAtiv !== null && $this->nu_sub_proj_ativ !== $this->aOrcDespProjAtiv->getNuSubProjAtiv()) {
			$this->aOrcDespProjAtiv = null;
		}
		if ($this->aOrcDespCatEco !== null && $this->cd_elemento_od !== $this->aOrcDespCatEco->getCdElementoOd()) {
			$this->aOrcDespCatEco = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CatEcoProjAtivPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CatEcoProjAtivPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aOrcDespProjAtiv = null;
			$this->aOrcDespCatEco = null;
			$this->collBalDespOrcs = null;
			$this->lastBalDespOrcCriteria = null;

			$this->collCreditosAdicionaiss = null;
			$this->lastCreditosAdicionaisCriteria = null;

			$this->collDestinoRealocOrcs = null;
			$this->lastDestinoRealocOrcCriteria = null;

			$this->collDotacoesLicitacoess = null;
			$this->lastDotacoesLicitacoesCriteria = null;

			$this->collFontesAnulacaos = null;
			$this->lastFontesAnulacaoCriteria = null;

			$this->collNotasEmpenhoss = null;
			$this->lastNotasEmpenhosCriteria = null;

			$this->collRealocacoesOrcamentariass = null;
			$this->lastRealocacoesOrcamentariasCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CatEcoProjAtivPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCatEcoProjAtiv:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				CatEcoProjAtivPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCatEcoProjAtiv:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CatEcoProjAtivPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCatEcoProjAtiv:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCatEcoProjAtiv:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				CatEcoProjAtivPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aOrcDespProjAtiv !== null) {
				if ($this->aOrcDespProjAtiv->isModified() || $this->aOrcDespProjAtiv->isNew()) {
					$affectedRows += $this->aOrcDespProjAtiv->save($con);
				}
				$this->setOrcDespProjAtiv($this->aOrcDespProjAtiv);
			}

			if ($this->aOrcDespCatEco !== null) {
				if ($this->aOrcDespCatEco->isModified() || $this->aOrcDespCatEco->isNew()) {
					$affectedRows += $this->aOrcDespCatEco->save($con);
				}
				$this->setOrcDespCatEco($this->aOrcDespCatEco);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CatEcoProjAtivPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += CatEcoProjAtivPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collBalDespOrcs !== null) {
				foreach ($this->collBalDespOrcs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCreditosAdicionaiss !== null) {
				foreach ($this->collCreditosAdicionaiss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDestinoRealocOrcs !== null) {
				foreach ($this->collDestinoRealocOrcs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDotacoesLicitacoess !== null) {
				foreach ($this->collDotacoesLicitacoess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFontesAnulacaos !== null) {
				foreach ($this->collFontesAnulacaos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNotasEmpenhoss !== null) {
				foreach ($this->collNotasEmpenhoss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRealocacoesOrcamentariass !== null) {
				foreach ($this->collRealocacoesOrcamentariass as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aOrcDespProjAtiv !== null) {
				if (!$this->aOrcDespProjAtiv->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aOrcDespProjAtiv->getValidationFailures());
				}
			}

			if ($this->aOrcDespCatEco !== null) {
				if (!$this->aOrcDespCatEco->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aOrcDespCatEco->getValidationFailures());
				}
			}


			if (($retval = CatEcoProjAtivPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collBalDespOrcs !== null) {
					foreach ($this->collBalDespOrcs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCreditosAdicionaiss !== null) {
					foreach ($this->collCreditosAdicionaiss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDestinoRealocOrcs !== null) {
					foreach ($this->collDestinoRealocOrcs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDotacoesLicitacoess !== null) {
					foreach ($this->collDotacoesLicitacoess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFontesAnulacaos !== null) {
					foreach ($this->collFontesAnulacaos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNotasEmpenhoss !== null) {
					foreach ($this->collNotasEmpenhoss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRealocacoesOrcamentariass !== null) {
					foreach ($this->collRealocacoesOrcamentariass as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CatEcoProjAtivPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCdMunicipio();
				break;
			case 1:
				return $this->getDtVersaoOrc();
				break;
			case 2:
				return $this->getCdOrgao();
				break;
			case 3:
				return $this->getCdUnidOrc();
				break;
			case 4:
				return $this->getCdFuncao();
				break;
			case 5:
				return $this->getCdSubfuncao();
				break;
			case 6:
				return $this->getCdPrograma();
				break;
			case 7:
				return $this->getCdProjAtiv();
				break;
			case 8:
				return $this->getNuProjAtiv();
				break;
			case 9:
				return $this->getNuSubProjAtiv();
				break;
			case 10:
				return $this->getCdElementoOd();
				break;
			case 11:
				return $this->getVlAtualCeProjAtiv();
				break;
			case 12:
				return $this->getVlOrcCeProjAtiv();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CatEcoProjAtivPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCdMunicipio(),
			$keys[1] => $this->getDtVersaoOrc(),
			$keys[2] => $this->getCdOrgao(),
			$keys[3] => $this->getCdUnidOrc(),
			$keys[4] => $this->getCdFuncao(),
			$keys[5] => $this->getCdSubfuncao(),
			$keys[6] => $this->getCdPrograma(),
			$keys[7] => $this->getCdProjAtiv(),
			$keys[8] => $this->getNuProjAtiv(),
			$keys[9] => $this->getNuSubProjAtiv(),
			$keys[10] => $this->getCdElementoOd(),
			$keys[11] => $this->getVlAtualCeProjAtiv(),
			$keys[12] => $this->getVlOrcCeProjAtiv(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CatEcoProjAtivPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCdMunicipio($value);
				break;
			case 1:
				$this->setDtVersaoOrc($value);
				break;
			case 2:
				$this->setCdOrgao($value);
				break;
			case 3:
				$this->setCdUnidOrc($value);
				break;
			case 4:
				$this->setCdFuncao($value);
				break;
			case 5:
				$this->setCdSubfuncao($value);
				break;
			case 6:
				$this->setCdPrograma($value);
				break;
			case 7:
				$this->setCdProjAtiv($value);
				break;
			case 8:
				$this->setNuProjAtiv($value);
				break;
			case 9:
				$this->setNuSubProjAtiv($value);
				break;
			case 10:
				$this->setCdElementoOd($value);
				break;
			case 11:
				$this->setVlAtualCeProjAtiv($value);
				break;
			case 12:
				$this->setVlOrcCeProjAtiv($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CatEcoProjAtivPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCdMunicipio($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDtVersaoOrc($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCdOrgao($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCdUnidOrc($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCdFuncao($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCdSubfuncao($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCdPrograma($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCdProjAtiv($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setNuProjAtiv($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setNuSubProjAtiv($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCdElementoOd($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setVlAtualCeProjAtiv($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setVlOrcCeProjAtiv($arr[$keys[12]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);

		if ($this->isColumnModified(CatEcoProjAtivPeer::CD_MUNICIPIO)) $criteria->add(CatEcoProjAtivPeer::CD_MUNICIPIO, $this->cd_municipio);
		if ($this->isColumnModified(CatEcoProjAtivPeer::DT_VERSAO_ORC)) $criteria->add(CatEcoProjAtivPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
		if ($this->isColumnModified(CatEcoProjAtivPeer::CD_ORGAO)) $criteria->add(CatEcoProjAtivPeer::CD_ORGAO, $this->cd_orgao);
		if ($this->isColumnModified(CatEcoProjAtivPeer::CD_UNID_ORC)) $criteria->add(CatEcoProjAtivPeer::CD_UNID_ORC, $this->cd_unid_orc);
		if ($this->isColumnModified(CatEcoProjAtivPeer::CD_FUNCAO)) $criteria->add(CatEcoProjAtivPeer::CD_FUNCAO, $this->cd_funcao);
		if ($this->isColumnModified(CatEcoProjAtivPeer::CD_SUBFUNCAO)) $criteria->add(CatEcoProjAtivPeer::CD_SUBFUNCAO, $this->cd_subfuncao);
		if ($this->isColumnModified(CatEcoProjAtivPeer::CD_PROGRAMA)) $criteria->add(CatEcoProjAtivPeer::CD_PROGRAMA, $this->cd_programa);
		if ($this->isColumnModified(CatEcoProjAtivPeer::CD_PROJ_ATIV)) $criteria->add(CatEcoProjAtivPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);
		if ($this->isColumnModified(CatEcoProjAtivPeer::NU_PROJ_ATIV)) $criteria->add(CatEcoProjAtivPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);
		if ($this->isColumnModified(CatEcoProjAtivPeer::NU_SUB_PROJ_ATIV)) $criteria->add(CatEcoProjAtivPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);
		if ($this->isColumnModified(CatEcoProjAtivPeer::CD_ELEMENTO_OD)) $criteria->add(CatEcoProjAtivPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);
		if ($this->isColumnModified(CatEcoProjAtivPeer::VL_ATUAL_CE_PROJ_ATIV)) $criteria->add(CatEcoProjAtivPeer::VL_ATUAL_CE_PROJ_ATIV, $this->vl_atual_ce_proj_ativ);
		if ($this->isColumnModified(CatEcoProjAtivPeer::VL_ORC_CE_PROJ_ATIV)) $criteria->add(CatEcoProjAtivPeer::VL_ORC_CE_PROJ_ATIV, $this->vl_orc_ce_proj_ativ);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);

		$criteria->add(CatEcoProjAtivPeer::CD_MUNICIPIO, $this->cd_municipio);
		$criteria->add(CatEcoProjAtivPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
		$criteria->add(CatEcoProjAtivPeer::CD_ORGAO, $this->cd_orgao);
		$criteria->add(CatEcoProjAtivPeer::CD_UNID_ORC, $this->cd_unid_orc);
		$criteria->add(CatEcoProjAtivPeer::CD_FUNCAO, $this->cd_funcao);
		$criteria->add(CatEcoProjAtivPeer::CD_SUBFUNCAO, $this->cd_subfuncao);
		$criteria->add(CatEcoProjAtivPeer::CD_PROGRAMA, $this->cd_programa);
		$criteria->add(CatEcoProjAtivPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);
		$criteria->add(CatEcoProjAtivPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);
		$criteria->add(CatEcoProjAtivPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);
		$criteria->add(CatEcoProjAtivPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

		return $criteria;
	}

	/**
	 * Returns the composite primary key for this object.
	 * The array elements will be in same order as specified in XML.
	 * @return     array
	 */
	public function getPrimaryKey()
	{
		$pks = array();

		$pks[0] = $this->getCdMunicipio();

		$pks[1] = $this->getDtVersaoOrc();

		$pks[2] = $this->getCdOrgao();

		$pks[3] = $this->getCdUnidOrc();

		$pks[4] = $this->getCdFuncao();

		$pks[5] = $this->getCdSubfuncao();

		$pks[6] = $this->getCdPrograma();

		$pks[7] = $this->getCdProjAtiv();

		$pks[8] = $this->getNuProjAtiv();

		$pks[9] = $this->getNuSubProjAtiv();

		$pks[10] = $this->getCdElementoOd();

		return $pks;
	}

	/**
	 * Set the [composite] primary key.
	 *
	 * @param      array $keys The elements of the composite key (order must match the order in XML file).
	 * @return     void
	 */
	public function setPrimaryKey($keys)
	{

		$this->setCdMunicipio($keys[0]);

		$this->setDtVersaoOrc($keys[1]);

		$this->setCdOrgao($keys[2]);

		$this->setCdUnidOrc($keys[3]);

		$this->setCdFuncao($keys[4]);

		$this->setCdSubfuncao($keys[5]);

		$this->setCdPrograma($keys[6]);

		$this->setCdProjAtiv($keys[7]);

		$this->setNuProjAtiv($keys[8]);

		$this->setNuSubProjAtiv($keys[9]);

		$this->setCdElementoOd($keys[10]);

	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of CatEcoProjAtiv (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCdMunicipio($this->cd_municipio);

		$copyObj->setDtVersaoOrc($this->dt_versao_orc);

		$copyObj->setCdOrgao($this->cd_orgao);

		$copyObj->setCdUnidOrc($this->cd_unid_orc);

		$copyObj->setCdFuncao($this->cd_funcao);

		$copyObj->setCdSubfuncao($this->cd_subfuncao);

		$copyObj->setCdPrograma($this->cd_programa);

		$copyObj->setCdProjAtiv($this->cd_proj_ativ);

		$copyObj->setNuProjAtiv($this->nu_proj_ativ);

		$copyObj->setNuSubProjAtiv($this->nu_sub_proj_ativ);

		$copyObj->setCdElementoOd($this->cd_elemento_od);

		$copyObj->setVlAtualCeProjAtiv($this->vl_atual_ce_proj_ativ);

		$copyObj->setVlOrcCeProjAtiv($this->vl_orc_ce_proj_ativ);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getBalDespOrcs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBalDespOrc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCreditosAdicionaiss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCreditosAdicionais($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDestinoRealocOrcs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDestinoRealocOrc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDotacoesLicitacoess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDotacoesLicitacoes($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFontesAnulacaos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFontesAnulacao($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNotasEmpenhoss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotasEmpenhos($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRealocacoesOrcamentariass() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRealocacoesOrcamentarias($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     CatEcoProjAtiv Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CatEcoProjAtivPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CatEcoProjAtivPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a OrcDespProjAtiv object.
	 *
	 * @param      OrcDespProjAtiv $v
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setOrcDespProjAtiv(OrcDespProjAtiv $v = null)
	{
		if ($v === null) {
			$this->setCdMunicipio(NULL);
		} else {
			$this->setCdMunicipio($v->getCdMunicipio());
		}

		if ($v === null) {
			$this->setCdOrgao(NULL);
		} else {
			$this->setCdOrgao($v->getCdOrgao());
		}

		if ($v === null) {
			$this->setCdPrograma(NULL);
		} else {
			$this->setCdPrograma($v->getCdPrograma());
		}

		if ($v === null) {
			$this->setCdProjAtiv(NULL);
		} else {
			$this->setCdProjAtiv($v->getCdProjAtiv());
		}

		if ($v === null) {
			$this->setCdSubfuncao(NULL);
		} else {
			$this->setCdSubfuncao($v->getCdSubfuncao());
		}

		if ($v === null) {
			$this->setCdUnidOrc(NULL);
		} else {
			$this->setCdUnidOrc($v->getCdUnidOrc());
		}

		if ($v === null) {
			$this->setDtVersaoOrc(NULL);
		} else {
			$this->setDtVersaoOrc($v->getDtVersaoOrc());
		}

		if ($v === null) {
			$this->setNuProjAtiv(NULL);
		} else {
			$this->setNuProjAtiv($v->getNuProjAtiv());
		}

		if ($v === null) {
			$this->setNuSubProjAtiv(NULL);
		} else {
			$this->setNuSubProjAtiv($v->getNuSubProjAtiv());
		}

		$this->aOrcDespProjAtiv = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the OrcDespProjAtiv object, it will not be re-added.
		if ($v !== null) {
			$v->addCatEcoProjAtiv($this);
		}

		return $this;
	}


	/**
	 * Get the associated OrcDespProjAtiv object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     OrcDespProjAtiv The associated OrcDespProjAtiv object.
	 * @throws     PropelException
	 */
	public function getOrcDespProjAtiv(PropelPDO $con = null)
	{
		if ($this->aOrcDespProjAtiv === null && (($this->cd_municipio !== "" && $this->cd_municipio !== null) && ($this->cd_orgao !== "" && $this->cd_orgao !== null) && ($this->cd_programa !== "" && $this->cd_programa !== null) && ($this->cd_proj_ativ !== "" && $this->cd_proj_ativ !== null) && ($this->cd_subfuncao !== "" && $this->cd_subfuncao !== null) && ($this->cd_unid_orc !== "" && $this->cd_unid_orc !== null) && $this->dt_versao_orc !== null && ($this->nu_proj_ativ !== "" && $this->nu_proj_ativ !== null) && ($this->nu_sub_proj_ativ !== "" && $this->nu_sub_proj_ativ !== null))) {
			$c = new Criteria(OrcDespProjAtivPeer::DATABASE_NAME);
			$c->add(OrcDespProjAtivPeer::CD_MUNICIPIO, $this->cd_municipio);
			$c->add(OrcDespProjAtivPeer::CD_ORGAO, $this->cd_orgao);
			$c->add(OrcDespProjAtivPeer::CD_PROGRAMA, $this->cd_programa);
			$c->add(OrcDespProjAtivPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);
			$c->add(OrcDespProjAtivPeer::CD_SUBFUNCAO, $this->cd_subfuncao);
			$c->add(OrcDespProjAtivPeer::CD_UNID_ORC, $this->cd_unid_orc);
			$c->add(OrcDespProjAtivPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
			$c->add(OrcDespProjAtivPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);
			$c->add(OrcDespProjAtivPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);
			$this->aOrcDespProjAtiv = OrcDespProjAtivPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aOrcDespProjAtiv->addCatEcoProjAtivs($this);
			 */
		}
		return $this->aOrcDespProjAtiv;
	}

	/**
	 * Declares an association between this object and a OrcDespCatEco object.
	 *
	 * @param      OrcDespCatEco $v
	 * @return     CatEcoProjAtiv The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setOrcDespCatEco(OrcDespCatEco $v = null)
	{
		if ($v === null) {
			$this->setCdElementoOd(NULL);
		} else {
			$this->setCdElementoOd($v->getCdElementoOd());
		}

		if ($v === null) {
			$this->setCdMunicipio(NULL);
		} else {
			$this->setCdMunicipio($v->getCdMunicipio());
		}

		if ($v === null) {
			$this->setCdOrgao(NULL);
		} else {
			$this->setCdOrgao($v->getCdOrgao());
		}

		if ($v === null) {
			$this->setCdUnidOrc(NULL);
		} else {
			$this->setCdUnidOrc($v->getCdUnidOrc());
		}

		if ($v === null) {
			$this->setDtVersaoOrc(NULL);
		} else {
			$this->setDtVersaoOrc($v->getDtVersaoOrc());
		}

		$this->aOrcDespCatEco = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the OrcDespCatEco object, it will not be re-added.
		if ($v !== null) {
			$v->addCatEcoProjAtiv($this);
		}

		return $this;
	}


	/**
	 * Get the associated OrcDespCatEco object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     OrcDespCatEco The associated OrcDespCatEco object.
	 * @throws     PropelException
	 */
	public function getOrcDespCatEco(PropelPDO $con = null)
	{
		if ($this->aOrcDespCatEco === null && (($this->cd_elemento_od !== "" && $this->cd_elemento_od !== null) && ($this->cd_municipio !== "" && $this->cd_municipio !== null) && ($this->cd_orgao !== "" && $this->cd_orgao !== null) && ($this->cd_unid_orc !== "" && $this->cd_unid_orc !== null) && $this->dt_versao_orc !== null)) {
			$c = new Criteria(OrcDespCatEcoPeer::DATABASE_NAME);
			$c->add(OrcDespCatEcoPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);
			$c->add(OrcDespCatEcoPeer::CD_MUNICIPIO, $this->cd_municipio);
			$c->add(OrcDespCatEcoPeer::CD_ORGAO, $this->cd_orgao);
			$c->add(OrcDespCatEcoPeer::CD_UNID_ORC, $this->cd_unid_orc);
			$c->add(OrcDespCatEcoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);
			$this->aOrcDespCatEco = OrcDespCatEcoPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aOrcDespCatEco->addCatEcoProjAtivs($this);
			 */
		}
		return $this->aOrcDespCatEco;
	}

	/**
	 * Clears out the collBalDespOrcs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBalDespOrcs()
	 */
	public function clearBalDespOrcs()
	{
		$this->collBalDespOrcs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBalDespOrcs collection (array).
	 *
	 * By default this just sets the collBalDespOrcs collection to an empty array (like clearcollBalDespOrcs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBalDespOrcs()
	{
		$this->collBalDespOrcs = array();
	}

	/**
	 * Gets an array of BalDespOrc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this CatEcoProjAtiv has previously been saved, it will retrieve
	 * related BalDespOrcs from storage. If this CatEcoProjAtiv is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array BalDespOrc[]
	 * @throws     PropelException
	 */
	public function getBalDespOrcs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBalDespOrcs === null) {
			if ($this->isNew()) {
			   $this->collBalDespOrcs = array();
			} else {

				$criteria->add(BalDespOrcPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(BalDespOrcPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(BalDespOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(BalDespOrcPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(BalDespOrcPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(BalDespOrcPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(BalDespOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(BalDespOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(BalDespOrcPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(BalDespOrcPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				BalDespOrcPeer::addSelectColumns($criteria);
				$this->collBalDespOrcs = BalDespOrcPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BalDespOrcPeer::CD_FUNCAO, $this->cd_funcao);


				$criteria->add(BalDespOrcPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(BalDespOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(BalDespOrcPeer::CD_PROGRAMA, $this->cd_programa);


				$criteria->add(BalDespOrcPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);


				$criteria->add(BalDespOrcPeer::CD_SUBFUNCAO, $this->cd_subfuncao);


				$criteria->add(BalDespOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(BalDespOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(BalDespOrcPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);


				$criteria->add(BalDespOrcPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				BalDespOrcPeer::addSelectColumns($criteria);
				if (!isset($this->lastBalDespOrcCriteria) || !$this->lastBalDespOrcCriteria->equals($criteria)) {
					$this->collBalDespOrcs = BalDespOrcPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBalDespOrcCriteria = $criteria;
		return $this->collBalDespOrcs;
	}

	/**
	 * Returns the number of related BalDespOrc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related BalDespOrc objects.
	 * @throws     PropelException
	 */
	public function countBalDespOrcs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBalDespOrcs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BalDespOrcPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(BalDespOrcPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(BalDespOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(BalDespOrcPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(BalDespOrcPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(BalDespOrcPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(BalDespOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(BalDespOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(BalDespOrcPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(BalDespOrcPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				$count = BalDespOrcPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BalDespOrcPeer::CD_FUNCAO, $this->cd_funcao);


				$criteria->add(BalDespOrcPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(BalDespOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(BalDespOrcPeer::CD_PROGRAMA, $this->cd_programa);


				$criteria->add(BalDespOrcPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);


				$criteria->add(BalDespOrcPeer::CD_SUBFUNCAO, $this->cd_subfuncao);


				$criteria->add(BalDespOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(BalDespOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(BalDespOrcPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);


				$criteria->add(BalDespOrcPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				if (!isset($this->lastBalDespOrcCriteria) || !$this->lastBalDespOrcCriteria->equals($criteria)) {
					$count = BalDespOrcPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collBalDespOrcs);
				}
			} else {
				$count = count($this->collBalDespOrcs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a BalDespOrc object to this object
	 * through the BalDespOrc foreign key attribute.
	 *
	 * @param      BalDespOrc $l BalDespOrc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBalDespOrc(BalDespOrc $l)
	{
		if ($this->collBalDespOrcs === null) {
			$this->initBalDespOrcs();
		}
		if (!in_array($l, $this->collBalDespOrcs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBalDespOrcs, $l);
			$l->setCatEcoProjAtiv($this);
		}
	}

	/**
	 * Clears out the collCreditosAdicionaiss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCreditosAdicionaiss()
	 */
	public function clearCreditosAdicionaiss()
	{
		$this->collCreditosAdicionaiss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCreditosAdicionaiss collection (array).
	 *
	 * By default this just sets the collCreditosAdicionaiss collection to an empty array (like clearcollCreditosAdicionaiss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCreditosAdicionaiss()
	{
		$this->collCreditosAdicionaiss = array();
	}

	/**
	 * Gets an array of CreditosAdicionais objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this CatEcoProjAtiv has previously been saved, it will retrieve
	 * related CreditosAdicionaiss from storage. If this CatEcoProjAtiv is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CreditosAdicionais[]
	 * @throws     PropelException
	 */
	public function getCreditosAdicionaiss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCreditosAdicionaiss === null) {
			if ($this->isNew()) {
			   $this->collCreditosAdicionaiss = array();
			} else {

				$criteria->add(CreditosAdicionaisPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(CreditosAdicionaisPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(CreditosAdicionaisPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(CreditosAdicionaisPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(CreditosAdicionaisPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(CreditosAdicionaisPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(CreditosAdicionaisPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(CreditosAdicionaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(CreditosAdicionaisPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(CreditosAdicionaisPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				CreditosAdicionaisPeer::addSelectColumns($criteria);
				$this->collCreditosAdicionaiss = CreditosAdicionaisPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CreditosAdicionaisPeer::CD_FUNCAO, $this->cd_funcao);


				$criteria->add(CreditosAdicionaisPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(CreditosAdicionaisPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(CreditosAdicionaisPeer::CD_PROGRAMA, $this->cd_programa);


				$criteria->add(CreditosAdicionaisPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);


				$criteria->add(CreditosAdicionaisPeer::CD_SUBFUNCAO, $this->cd_subfuncao);


				$criteria->add(CreditosAdicionaisPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(CreditosAdicionaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(CreditosAdicionaisPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);


				$criteria->add(CreditosAdicionaisPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				CreditosAdicionaisPeer::addSelectColumns($criteria);
				if (!isset($this->lastCreditosAdicionaisCriteria) || !$this->lastCreditosAdicionaisCriteria->equals($criteria)) {
					$this->collCreditosAdicionaiss = CreditosAdicionaisPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCreditosAdicionaisCriteria = $criteria;
		return $this->collCreditosAdicionaiss;
	}

	/**
	 * Returns the number of related CreditosAdicionais objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CreditosAdicionais objects.
	 * @throws     PropelException
	 */
	public function countCreditosAdicionaiss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCreditosAdicionaiss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CreditosAdicionaisPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(CreditosAdicionaisPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(CreditosAdicionaisPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(CreditosAdicionaisPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(CreditosAdicionaisPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(CreditosAdicionaisPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(CreditosAdicionaisPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(CreditosAdicionaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(CreditosAdicionaisPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(CreditosAdicionaisPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				$count = CreditosAdicionaisPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CreditosAdicionaisPeer::CD_FUNCAO, $this->cd_funcao);


				$criteria->add(CreditosAdicionaisPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(CreditosAdicionaisPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(CreditosAdicionaisPeer::CD_PROGRAMA, $this->cd_programa);


				$criteria->add(CreditosAdicionaisPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);


				$criteria->add(CreditosAdicionaisPeer::CD_SUBFUNCAO, $this->cd_subfuncao);


				$criteria->add(CreditosAdicionaisPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(CreditosAdicionaisPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(CreditosAdicionaisPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);


				$criteria->add(CreditosAdicionaisPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				if (!isset($this->lastCreditosAdicionaisCriteria) || !$this->lastCreditosAdicionaisCriteria->equals($criteria)) {
					$count = CreditosAdicionaisPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCreditosAdicionaiss);
				}
			} else {
				$count = count($this->collCreditosAdicionaiss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CreditosAdicionais object to this object
	 * through the CreditosAdicionais foreign key attribute.
	 *
	 * @param      CreditosAdicionais $l CreditosAdicionais
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCreditosAdicionais(CreditosAdicionais $l)
	{
		if ($this->collCreditosAdicionaiss === null) {
			$this->initCreditosAdicionaiss();
		}
		if (!in_array($l, $this->collCreditosAdicionaiss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCreditosAdicionaiss, $l);
			$l->setCatEcoProjAtiv($this);
		}
	}

	/**
	 * Clears out the collDestinoRealocOrcs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDestinoRealocOrcs()
	 */
	public function clearDestinoRealocOrcs()
	{
		$this->collDestinoRealocOrcs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDestinoRealocOrcs collection (array).
	 *
	 * By default this just sets the collDestinoRealocOrcs collection to an empty array (like clearcollDestinoRealocOrcs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDestinoRealocOrcs()
	{
		$this->collDestinoRealocOrcs = array();
	}

	/**
	 * Gets an array of DestinoRealocOrc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this CatEcoProjAtiv has previously been saved, it will retrieve
	 * related DestinoRealocOrcs from storage. If this CatEcoProjAtiv is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DestinoRealocOrc[]
	 * @throws     PropelException
	 */
	public function getDestinoRealocOrcs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDestinoRealocOrcs === null) {
			if ($this->isNew()) {
			   $this->collDestinoRealocOrcs = array();
			} else {

				$criteria->add(DestinoRealocOrcPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

				$criteria->add(DestinoRealocOrcPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(DestinoRealocOrcPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(DestinoRealocOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(DestinoRealocOrcPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(DestinoRealocOrcPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(DestinoRealocOrcPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(DestinoRealocOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(DestinoRealocOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(DestinoRealocOrcPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(DestinoRealocOrcPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				DestinoRealocOrcPeer::addSelectColumns($criteria);
				$this->collDestinoRealocOrcs = DestinoRealocOrcPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DestinoRealocOrcPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);


				$criteria->add(DestinoRealocOrcPeer::CD_FUNCAO, $this->cd_funcao);


				$criteria->add(DestinoRealocOrcPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(DestinoRealocOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(DestinoRealocOrcPeer::CD_PROGRAMA, $this->cd_programa);


				$criteria->add(DestinoRealocOrcPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);


				$criteria->add(DestinoRealocOrcPeer::CD_SUBFUNCAO, $this->cd_subfuncao);


				$criteria->add(DestinoRealocOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(DestinoRealocOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(DestinoRealocOrcPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);


				$criteria->add(DestinoRealocOrcPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				DestinoRealocOrcPeer::addSelectColumns($criteria);
				if (!isset($this->lastDestinoRealocOrcCriteria) || !$this->lastDestinoRealocOrcCriteria->equals($criteria)) {
					$this->collDestinoRealocOrcs = DestinoRealocOrcPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDestinoRealocOrcCriteria = $criteria;
		return $this->collDestinoRealocOrcs;
	}

	/**
	 * Returns the number of related DestinoRealocOrc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DestinoRealocOrc objects.
	 * @throws     PropelException
	 */
	public function countDestinoRealocOrcs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDestinoRealocOrcs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DestinoRealocOrcPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

				$criteria->add(DestinoRealocOrcPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(DestinoRealocOrcPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(DestinoRealocOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(DestinoRealocOrcPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(DestinoRealocOrcPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(DestinoRealocOrcPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(DestinoRealocOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(DestinoRealocOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(DestinoRealocOrcPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(DestinoRealocOrcPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				$count = DestinoRealocOrcPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DestinoRealocOrcPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);


				$criteria->add(DestinoRealocOrcPeer::CD_FUNCAO, $this->cd_funcao);


				$criteria->add(DestinoRealocOrcPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(DestinoRealocOrcPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(DestinoRealocOrcPeer::CD_PROGRAMA, $this->cd_programa);


				$criteria->add(DestinoRealocOrcPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);


				$criteria->add(DestinoRealocOrcPeer::CD_SUBFUNCAO, $this->cd_subfuncao);


				$criteria->add(DestinoRealocOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(DestinoRealocOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(DestinoRealocOrcPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);


				$criteria->add(DestinoRealocOrcPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				if (!isset($this->lastDestinoRealocOrcCriteria) || !$this->lastDestinoRealocOrcCriteria->equals($criteria)) {
					$count = DestinoRealocOrcPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDestinoRealocOrcs);
				}
			} else {
				$count = count($this->collDestinoRealocOrcs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DestinoRealocOrc object to this object
	 * through the DestinoRealocOrc foreign key attribute.
	 *
	 * @param      DestinoRealocOrc $l DestinoRealocOrc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDestinoRealocOrc(DestinoRealocOrc $l)
	{
		if ($this->collDestinoRealocOrcs === null) {
			$this->initDestinoRealocOrcs();
		}
		if (!in_array($l, $this->collDestinoRealocOrcs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDestinoRealocOrcs, $l);
			$l->setCatEcoProjAtiv($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this CatEcoProjAtiv is new, it will return
	 * an empty collection; or if this CatEcoProjAtiv has previously
	 * been saved, it will retrieve related DestinoRealocOrcs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in CatEcoProjAtiv.
	 */
	public function getDestinoRealocOrcsJoinRealocacoesOrcamentarias($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDestinoRealocOrcs === null) {
			if ($this->isNew()) {
				$this->collDestinoRealocOrcs = array();
			} else {

				$criteria->add(DestinoRealocOrcPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

				$criteria->add(DestinoRealocOrcPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(DestinoRealocOrcPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(DestinoRealocOrcPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(DestinoRealocOrcPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(DestinoRealocOrcPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(DestinoRealocOrcPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(DestinoRealocOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(DestinoRealocOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(DestinoRealocOrcPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(DestinoRealocOrcPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				$this->collDestinoRealocOrcs = DestinoRealocOrcPeer::doSelectJoinRealocacoesOrcamentarias($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DestinoRealocOrcPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

			$criteria->add(DestinoRealocOrcPeer::CD_FUNCAO, $this->cd_funcao);

			$criteria->add(DestinoRealocOrcPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(DestinoRealocOrcPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(DestinoRealocOrcPeer::CD_PROGRAMA, $this->cd_programa);

			$criteria->add(DestinoRealocOrcPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

			$criteria->add(DestinoRealocOrcPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

			$criteria->add(DestinoRealocOrcPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(DestinoRealocOrcPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(DestinoRealocOrcPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

			$criteria->add(DestinoRealocOrcPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

			if (!isset($this->lastDestinoRealocOrcCriteria) || !$this->lastDestinoRealocOrcCriteria->equals($criteria)) {
				$this->collDestinoRealocOrcs = DestinoRealocOrcPeer::doSelectJoinRealocacoesOrcamentarias($criteria, $con, $join_behavior);
			}
		}
		$this->lastDestinoRealocOrcCriteria = $criteria;

		return $this->collDestinoRealocOrcs;
	}

	/**
	 * Clears out the collDotacoesLicitacoess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDotacoesLicitacoess()
	 */
	public function clearDotacoesLicitacoess()
	{
		$this->collDotacoesLicitacoess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDotacoesLicitacoess collection (array).
	 *
	 * By default this just sets the collDotacoesLicitacoess collection to an empty array (like clearcollDotacoesLicitacoess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDotacoesLicitacoess()
	{
		$this->collDotacoesLicitacoess = array();
	}

	/**
	 * Gets an array of DotacoesLicitacoes objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this CatEcoProjAtiv has previously been saved, it will retrieve
	 * related DotacoesLicitacoess from storage. If this CatEcoProjAtiv is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DotacoesLicitacoes[]
	 * @throws     PropelException
	 */
	public function getDotacoesLicitacoess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDotacoesLicitacoess === null) {
			if ($this->isNew()) {
			   $this->collDotacoesLicitacoess = array();
			} else {

				$criteria->add(DotacoesLicitacoesPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

				$criteria->add(DotacoesLicitacoesPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(DotacoesLicitacoesPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(DotacoesLicitacoesPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(DotacoesLicitacoesPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(DotacoesLicitacoesPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(DotacoesLicitacoesPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(DotacoesLicitacoesPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(DotacoesLicitacoesPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(DotacoesLicitacoesPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(DotacoesLicitacoesPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				DotacoesLicitacoesPeer::addSelectColumns($criteria);
				$this->collDotacoesLicitacoess = DotacoesLicitacoesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DotacoesLicitacoesPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);


				$criteria->add(DotacoesLicitacoesPeer::CD_FUNCAO, $this->cd_funcao);


				$criteria->add(DotacoesLicitacoesPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(DotacoesLicitacoesPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(DotacoesLicitacoesPeer::CD_PROGRAMA, $this->cd_programa);


				$criteria->add(DotacoesLicitacoesPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);


				$criteria->add(DotacoesLicitacoesPeer::CD_SUBFUNCAO, $this->cd_subfuncao);


				$criteria->add(DotacoesLicitacoesPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(DotacoesLicitacoesPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(DotacoesLicitacoesPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);


				$criteria->add(DotacoesLicitacoesPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				DotacoesLicitacoesPeer::addSelectColumns($criteria);
				if (!isset($this->lastDotacoesLicitacoesCriteria) || !$this->lastDotacoesLicitacoesCriteria->equals($criteria)) {
					$this->collDotacoesLicitacoess = DotacoesLicitacoesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDotacoesLicitacoesCriteria = $criteria;
		return $this->collDotacoesLicitacoess;
	}

	/**
	 * Returns the number of related DotacoesLicitacoes objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DotacoesLicitacoes objects.
	 * @throws     PropelException
	 */
	public function countDotacoesLicitacoess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDotacoesLicitacoess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DotacoesLicitacoesPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

				$criteria->add(DotacoesLicitacoesPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(DotacoesLicitacoesPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(DotacoesLicitacoesPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(DotacoesLicitacoesPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(DotacoesLicitacoesPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(DotacoesLicitacoesPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(DotacoesLicitacoesPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(DotacoesLicitacoesPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(DotacoesLicitacoesPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(DotacoesLicitacoesPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				$count = DotacoesLicitacoesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DotacoesLicitacoesPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);


				$criteria->add(DotacoesLicitacoesPeer::CD_FUNCAO, $this->cd_funcao);


				$criteria->add(DotacoesLicitacoesPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(DotacoesLicitacoesPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(DotacoesLicitacoesPeer::CD_PROGRAMA, $this->cd_programa);


				$criteria->add(DotacoesLicitacoesPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);


				$criteria->add(DotacoesLicitacoesPeer::CD_SUBFUNCAO, $this->cd_subfuncao);


				$criteria->add(DotacoesLicitacoesPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(DotacoesLicitacoesPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(DotacoesLicitacoesPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);


				$criteria->add(DotacoesLicitacoesPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				if (!isset($this->lastDotacoesLicitacoesCriteria) || !$this->lastDotacoesLicitacoesCriteria->equals($criteria)) {
					$count = DotacoesLicitacoesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDotacoesLicitacoess);
				}
			} else {
				$count = count($this->collDotacoesLicitacoess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DotacoesLicitacoes object to this object
	 * through the DotacoesLicitacoes foreign key attribute.
	 *
	 * @param      DotacoesLicitacoes $l DotacoesLicitacoes
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDotacoesLicitacoes(DotacoesLicitacoes $l)
	{
		if ($this->collDotacoesLicitacoess === null) {
			$this->initDotacoesLicitacoess();
		}
		if (!in_array($l, $this->collDotacoesLicitacoess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDotacoesLicitacoess, $l);
			$l->setCatEcoProjAtiv($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this CatEcoProjAtiv is new, it will return
	 * an empty collection; or if this CatEcoProjAtiv has previously
	 * been saved, it will retrieve related DotacoesLicitacoess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in CatEcoProjAtiv.
	 */
	public function getDotacoesLicitacoessJoinLicitacoes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDotacoesLicitacoess === null) {
			if ($this->isNew()) {
				$this->collDotacoesLicitacoess = array();
			} else {

				$criteria->add(DotacoesLicitacoesPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

				$criteria->add(DotacoesLicitacoesPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(DotacoesLicitacoesPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(DotacoesLicitacoesPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(DotacoesLicitacoesPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(DotacoesLicitacoesPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(DotacoesLicitacoesPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(DotacoesLicitacoesPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(DotacoesLicitacoesPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(DotacoesLicitacoesPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(DotacoesLicitacoesPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				$this->collDotacoesLicitacoess = DotacoesLicitacoesPeer::doSelectJoinLicitacoes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DotacoesLicitacoesPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

			$criteria->add(DotacoesLicitacoesPeer::CD_FUNCAO, $this->cd_funcao);

			$criteria->add(DotacoesLicitacoesPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(DotacoesLicitacoesPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(DotacoesLicitacoesPeer::CD_PROGRAMA, $this->cd_programa);

			$criteria->add(DotacoesLicitacoesPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

			$criteria->add(DotacoesLicitacoesPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

			$criteria->add(DotacoesLicitacoesPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(DotacoesLicitacoesPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(DotacoesLicitacoesPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

			$criteria->add(DotacoesLicitacoesPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

			if (!isset($this->lastDotacoesLicitacoesCriteria) || !$this->lastDotacoesLicitacoesCriteria->equals($criteria)) {
				$this->collDotacoesLicitacoess = DotacoesLicitacoesPeer::doSelectJoinLicitacoes($criteria, $con, $join_behavior);
			}
		}
		$this->lastDotacoesLicitacoesCriteria = $criteria;

		return $this->collDotacoesLicitacoess;
	}

	/**
	 * Clears out the collFontesAnulacaos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFontesAnulacaos()
	 */
	public function clearFontesAnulacaos()
	{
		$this->collFontesAnulacaos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFontesAnulacaos collection (array).
	 *
	 * By default this just sets the collFontesAnulacaos collection to an empty array (like clearcollFontesAnulacaos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFontesAnulacaos()
	{
		$this->collFontesAnulacaos = array();
	}

	/**
	 * Gets an array of FontesAnulacao objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this CatEcoProjAtiv has previously been saved, it will retrieve
	 * related FontesAnulacaos from storage. If this CatEcoProjAtiv is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array FontesAnulacao[]
	 * @throws     PropelException
	 */
	public function getFontesAnulacaos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFontesAnulacaos === null) {
			if ($this->isNew()) {
			   $this->collFontesAnulacaos = array();
			} else {

				$criteria->add(FontesAnulacaoPeer::CD_ELEMENTO_OD_ANUL_FA, $this->cd_elemento_od);

				$criteria->add(FontesAnulacaoPeer::CD_FUNCAO_ANUL_FA, $this->cd_funcao);

				$criteria->add(FontesAnulacaoPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(FontesAnulacaoPeer::CD_ORGAO_ANUL_FA, $this->cd_orgao);

				$criteria->add(FontesAnulacaoPeer::CD_PROGRAMA_ANUL_FA, $this->cd_programa);

				$criteria->add(FontesAnulacaoPeer::CD_PROJ_ATIV_ANUL_FA, $this->cd_proj_ativ);

				$criteria->add(FontesAnulacaoPeer::CD_SUBFUNCAO_ANUL_FA, $this->cd_subfuncao);

				$criteria->add(FontesAnulacaoPeer::CD_UNID_ORC_ANUL_FA, $this->cd_unid_orc);

				$criteria->add(FontesAnulacaoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(FontesAnulacaoPeer::NU_PROJ_ATIV_ANUL_FA, $this->nu_proj_ativ);

				$criteria->add(FontesAnulacaoPeer::NU_SUB_PROJ_ATIV_ANUL_FA, $this->nu_sub_proj_ativ);

				FontesAnulacaoPeer::addSelectColumns($criteria);
				$this->collFontesAnulacaos = FontesAnulacaoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FontesAnulacaoPeer::CD_ELEMENTO_OD_ANUL_FA, $this->cd_elemento_od);


				$criteria->add(FontesAnulacaoPeer::CD_FUNCAO_ANUL_FA, $this->cd_funcao);


				$criteria->add(FontesAnulacaoPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(FontesAnulacaoPeer::CD_ORGAO_ANUL_FA, $this->cd_orgao);


				$criteria->add(FontesAnulacaoPeer::CD_PROGRAMA_ANUL_FA, $this->cd_programa);


				$criteria->add(FontesAnulacaoPeer::CD_PROJ_ATIV_ANUL_FA, $this->cd_proj_ativ);


				$criteria->add(FontesAnulacaoPeer::CD_SUBFUNCAO_ANUL_FA, $this->cd_subfuncao);


				$criteria->add(FontesAnulacaoPeer::CD_UNID_ORC_ANUL_FA, $this->cd_unid_orc);


				$criteria->add(FontesAnulacaoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(FontesAnulacaoPeer::NU_PROJ_ATIV_ANUL_FA, $this->nu_proj_ativ);


				$criteria->add(FontesAnulacaoPeer::NU_SUB_PROJ_ATIV_ANUL_FA, $this->nu_sub_proj_ativ);

				FontesAnulacaoPeer::addSelectColumns($criteria);
				if (!isset($this->lastFontesAnulacaoCriteria) || !$this->lastFontesAnulacaoCriteria->equals($criteria)) {
					$this->collFontesAnulacaos = FontesAnulacaoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFontesAnulacaoCriteria = $criteria;
		return $this->collFontesAnulacaos;
	}

	/**
	 * Returns the number of related FontesAnulacao objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related FontesAnulacao objects.
	 * @throws     PropelException
	 */
	public function countFontesAnulacaos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFontesAnulacaos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FontesAnulacaoPeer::CD_ELEMENTO_OD_ANUL_FA, $this->cd_elemento_od);

				$criteria->add(FontesAnulacaoPeer::CD_FUNCAO_ANUL_FA, $this->cd_funcao);

				$criteria->add(FontesAnulacaoPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(FontesAnulacaoPeer::CD_ORGAO_ANUL_FA, $this->cd_orgao);

				$criteria->add(FontesAnulacaoPeer::CD_PROGRAMA_ANUL_FA, $this->cd_programa);

				$criteria->add(FontesAnulacaoPeer::CD_PROJ_ATIV_ANUL_FA, $this->cd_proj_ativ);

				$criteria->add(FontesAnulacaoPeer::CD_SUBFUNCAO_ANUL_FA, $this->cd_subfuncao);

				$criteria->add(FontesAnulacaoPeer::CD_UNID_ORC_ANUL_FA, $this->cd_unid_orc);

				$criteria->add(FontesAnulacaoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(FontesAnulacaoPeer::NU_PROJ_ATIV_ANUL_FA, $this->nu_proj_ativ);

				$criteria->add(FontesAnulacaoPeer::NU_SUB_PROJ_ATIV_ANUL_FA, $this->nu_sub_proj_ativ);

				$count = FontesAnulacaoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FontesAnulacaoPeer::CD_ELEMENTO_OD_ANUL_FA, $this->cd_elemento_od);


				$criteria->add(FontesAnulacaoPeer::CD_FUNCAO_ANUL_FA, $this->cd_funcao);


				$criteria->add(FontesAnulacaoPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(FontesAnulacaoPeer::CD_ORGAO_ANUL_FA, $this->cd_orgao);


				$criteria->add(FontesAnulacaoPeer::CD_PROGRAMA_ANUL_FA, $this->cd_programa);


				$criteria->add(FontesAnulacaoPeer::CD_PROJ_ATIV_ANUL_FA, $this->cd_proj_ativ);


				$criteria->add(FontesAnulacaoPeer::CD_SUBFUNCAO_ANUL_FA, $this->cd_subfuncao);


				$criteria->add(FontesAnulacaoPeer::CD_UNID_ORC_ANUL_FA, $this->cd_unid_orc);


				$criteria->add(FontesAnulacaoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(FontesAnulacaoPeer::NU_PROJ_ATIV_ANUL_FA, $this->nu_proj_ativ);


				$criteria->add(FontesAnulacaoPeer::NU_SUB_PROJ_ATIV_ANUL_FA, $this->nu_sub_proj_ativ);

				if (!isset($this->lastFontesAnulacaoCriteria) || !$this->lastFontesAnulacaoCriteria->equals($criteria)) {
					$count = FontesAnulacaoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFontesAnulacaos);
				}
			} else {
				$count = count($this->collFontesAnulacaos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a FontesAnulacao object to this object
	 * through the FontesAnulacao foreign key attribute.
	 *
	 * @param      FontesAnulacao $l FontesAnulacao
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFontesAnulacao(FontesAnulacao $l)
	{
		if ($this->collFontesAnulacaos === null) {
			$this->initFontesAnulacaos();
		}
		if (!in_array($l, $this->collFontesAnulacaos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFontesAnulacaos, $l);
			$l->setCatEcoProjAtiv($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this CatEcoProjAtiv is new, it will return
	 * an empty collection; or if this CatEcoProjAtiv has previously
	 * been saved, it will retrieve related FontesAnulacaos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in CatEcoProjAtiv.
	 */
	public function getFontesAnulacaosJoinCreditosAdicionais($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFontesAnulacaos === null) {
			if ($this->isNew()) {
				$this->collFontesAnulacaos = array();
			} else {

				$criteria->add(FontesAnulacaoPeer::CD_ELEMENTO_OD_ANUL_FA, $this->cd_elemento_od);

				$criteria->add(FontesAnulacaoPeer::CD_FUNCAO_ANUL_FA, $this->cd_funcao);

				$criteria->add(FontesAnulacaoPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(FontesAnulacaoPeer::CD_ORGAO_ANUL_FA, $this->cd_orgao);

				$criteria->add(FontesAnulacaoPeer::CD_PROGRAMA_ANUL_FA, $this->cd_programa);

				$criteria->add(FontesAnulacaoPeer::CD_PROJ_ATIV_ANUL_FA, $this->cd_proj_ativ);

				$criteria->add(FontesAnulacaoPeer::CD_SUBFUNCAO_ANUL_FA, $this->cd_subfuncao);

				$criteria->add(FontesAnulacaoPeer::CD_UNID_ORC_ANUL_FA, $this->cd_unid_orc);

				$criteria->add(FontesAnulacaoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(FontesAnulacaoPeer::NU_PROJ_ATIV_ANUL_FA, $this->nu_proj_ativ);

				$criteria->add(FontesAnulacaoPeer::NU_SUB_PROJ_ATIV_ANUL_FA, $this->nu_sub_proj_ativ);

				$this->collFontesAnulacaos = FontesAnulacaoPeer::doSelectJoinCreditosAdicionais($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FontesAnulacaoPeer::CD_ELEMENTO_OD_ANUL_FA, $this->cd_elemento_od);

			$criteria->add(FontesAnulacaoPeer::CD_FUNCAO_ANUL_FA, $this->cd_funcao);

			$criteria->add(FontesAnulacaoPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(FontesAnulacaoPeer::CD_ORGAO_ANUL_FA, $this->cd_orgao);

			$criteria->add(FontesAnulacaoPeer::CD_PROGRAMA_ANUL_FA, $this->cd_programa);

			$criteria->add(FontesAnulacaoPeer::CD_PROJ_ATIV_ANUL_FA, $this->cd_proj_ativ);

			$criteria->add(FontesAnulacaoPeer::CD_SUBFUNCAO_ANUL_FA, $this->cd_subfuncao);

			$criteria->add(FontesAnulacaoPeer::CD_UNID_ORC_ANUL_FA, $this->cd_unid_orc);

			$criteria->add(FontesAnulacaoPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(FontesAnulacaoPeer::NU_PROJ_ATIV_ANUL_FA, $this->nu_proj_ativ);

			$criteria->add(FontesAnulacaoPeer::NU_SUB_PROJ_ATIV_ANUL_FA, $this->nu_sub_proj_ativ);

			if (!isset($this->lastFontesAnulacaoCriteria) || !$this->lastFontesAnulacaoCriteria->equals($criteria)) {
				$this->collFontesAnulacaos = FontesAnulacaoPeer::doSelectJoinCreditosAdicionais($criteria, $con, $join_behavior);
			}
		}
		$this->lastFontesAnulacaoCriteria = $criteria;

		return $this->collFontesAnulacaos;
	}

	/**
	 * Clears out the collNotasEmpenhoss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotasEmpenhoss()
	 */
	public function clearNotasEmpenhoss()
	{
		$this->collNotasEmpenhoss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotasEmpenhoss collection (array).
	 *
	 * By default this just sets the collNotasEmpenhoss collection to an empty array (like clearcollNotasEmpenhoss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotasEmpenhoss()
	{
		$this->collNotasEmpenhoss = array();
	}

	/**
	 * Gets an array of NotasEmpenhos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this CatEcoProjAtiv has previously been saved, it will retrieve
	 * related NotasEmpenhoss from storage. If this CatEcoProjAtiv is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NotasEmpenhos[]
	 * @throws     PropelException
	 */
	public function getNotasEmpenhoss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotasEmpenhoss === null) {
			if ($this->isNew()) {
			   $this->collNotasEmpenhoss = array();
			} else {

				$criteria->add(NotasEmpenhosPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

				$criteria->add(NotasEmpenhosPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(NotasEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NotasEmpenhosPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(NotasEmpenhosPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(NotasEmpenhosPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(NotasEmpenhosPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(NotasEmpenhosPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				NotasEmpenhosPeer::addSelectColumns($criteria);
				$this->collNotasEmpenhoss = NotasEmpenhosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotasEmpenhosPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);


				$criteria->add(NotasEmpenhosPeer::CD_FUNCAO, $this->cd_funcao);


				$criteria->add(NotasEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(NotasEmpenhosPeer::CD_PROGRAMA, $this->cd_programa);


				$criteria->add(NotasEmpenhosPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);


				$criteria->add(NotasEmpenhosPeer::CD_SUBFUNCAO, $this->cd_subfuncao);


				$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(NotasEmpenhosPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);


				$criteria->add(NotasEmpenhosPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				NotasEmpenhosPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotasEmpenhosCriteria) || !$this->lastNotasEmpenhosCriteria->equals($criteria)) {
					$this->collNotasEmpenhoss = NotasEmpenhosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotasEmpenhosCriteria = $criteria;
		return $this->collNotasEmpenhoss;
	}

	/**
	 * Returns the number of related NotasEmpenhos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NotasEmpenhos objects.
	 * @throws     PropelException
	 */
	public function countNotasEmpenhoss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotasEmpenhoss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotasEmpenhosPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

				$criteria->add(NotasEmpenhosPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(NotasEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NotasEmpenhosPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(NotasEmpenhosPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(NotasEmpenhosPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(NotasEmpenhosPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(NotasEmpenhosPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				$count = NotasEmpenhosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotasEmpenhosPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);


				$criteria->add(NotasEmpenhosPeer::CD_FUNCAO, $this->cd_funcao);


				$criteria->add(NotasEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(NotasEmpenhosPeer::CD_PROGRAMA, $this->cd_programa);


				$criteria->add(NotasEmpenhosPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);


				$criteria->add(NotasEmpenhosPeer::CD_SUBFUNCAO, $this->cd_subfuncao);


				$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(NotasEmpenhosPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);


				$criteria->add(NotasEmpenhosPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				if (!isset($this->lastNotasEmpenhosCriteria) || !$this->lastNotasEmpenhosCriteria->equals($criteria)) {
					$count = NotasEmpenhosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collNotasEmpenhoss);
				}
			} else {
				$count = count($this->collNotasEmpenhoss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NotasEmpenhos object to this object
	 * through the NotasEmpenhos foreign key attribute.
	 *
	 * @param      NotasEmpenhos $l NotasEmpenhos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotasEmpenhos(NotasEmpenhos $l)
	{
		if ($this->collNotasEmpenhoss === null) {
			$this->initNotasEmpenhoss();
		}
		if (!in_array($l, $this->collNotasEmpenhoss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotasEmpenhoss, $l);
			$l->setCatEcoProjAtiv($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this CatEcoProjAtiv is new, it will return
	 * an empty collection; or if this CatEcoProjAtiv has previously
	 * been saved, it will retrieve related NotasEmpenhoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in CatEcoProjAtiv.
	 */
	public function getNotasEmpenhossJoinUnidadesFederacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotasEmpenhoss === null) {
			if ($this->isNew()) {
				$this->collNotasEmpenhoss = array();
			} else {

				$criteria->add(NotasEmpenhosPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

				$criteria->add(NotasEmpenhosPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(NotasEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NotasEmpenhosPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(NotasEmpenhosPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(NotasEmpenhosPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(NotasEmpenhosPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(NotasEmpenhosPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				$this->collNotasEmpenhoss = NotasEmpenhosPeer::doSelectJoinUnidadesFederacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotasEmpenhosPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

			$criteria->add(NotasEmpenhosPeer::CD_FUNCAO, $this->cd_funcao);

			$criteria->add(NotasEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(NotasEmpenhosPeer::CD_PROGRAMA, $this->cd_programa);

			$criteria->add(NotasEmpenhosPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

			$criteria->add(NotasEmpenhosPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

			$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(NotasEmpenhosPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

			$criteria->add(NotasEmpenhosPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

			if (!isset($this->lastNotasEmpenhosCriteria) || !$this->lastNotasEmpenhosCriteria->equals($criteria)) {
				$this->collNotasEmpenhoss = NotasEmpenhosPeer::doSelectJoinUnidadesFederacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotasEmpenhosCriteria = $criteria;

		return $this->collNotasEmpenhoss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this CatEcoProjAtiv is new, it will return
	 * an empty collection; or if this CatEcoProjAtiv has previously
	 * been saved, it will retrieve related NotasEmpenhoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in CatEcoProjAtiv.
	 */
	public function getNotasEmpenhossJoinUnidadesOrcamentarias($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotasEmpenhoss === null) {
			if ($this->isNew()) {
				$this->collNotasEmpenhoss = array();
			} else {

				$criteria->add(NotasEmpenhosPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

				$criteria->add(NotasEmpenhosPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(NotasEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(NotasEmpenhosPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(NotasEmpenhosPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(NotasEmpenhosPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(NotasEmpenhosPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(NotasEmpenhosPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				$this->collNotasEmpenhoss = NotasEmpenhosPeer::doSelectJoinUnidadesOrcamentarias($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotasEmpenhosPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

			$criteria->add(NotasEmpenhosPeer::CD_FUNCAO, $this->cd_funcao);

			$criteria->add(NotasEmpenhosPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(NotasEmpenhosPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(NotasEmpenhosPeer::CD_PROGRAMA, $this->cd_programa);

			$criteria->add(NotasEmpenhosPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

			$criteria->add(NotasEmpenhosPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

			$criteria->add(NotasEmpenhosPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(NotasEmpenhosPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(NotasEmpenhosPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

			$criteria->add(NotasEmpenhosPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

			if (!isset($this->lastNotasEmpenhosCriteria) || !$this->lastNotasEmpenhosCriteria->equals($criteria)) {
				$this->collNotasEmpenhoss = NotasEmpenhosPeer::doSelectJoinUnidadesOrcamentarias($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotasEmpenhosCriteria = $criteria;

		return $this->collNotasEmpenhoss;
	}

	/**
	 * Clears out the collRealocacoesOrcamentariass collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRealocacoesOrcamentariass()
	 */
	public function clearRealocacoesOrcamentariass()
	{
		$this->collRealocacoesOrcamentariass = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRealocacoesOrcamentariass collection (array).
	 *
	 * By default this just sets the collRealocacoesOrcamentariass collection to an empty array (like clearcollRealocacoesOrcamentariass());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRealocacoesOrcamentariass()
	{
		$this->collRealocacoesOrcamentariass = array();
	}

	/**
	 * Gets an array of RealocacoesOrcamentarias objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this CatEcoProjAtiv has previously been saved, it will retrieve
	 * related RealocacoesOrcamentariass from storage. If this CatEcoProjAtiv is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RealocacoesOrcamentarias[]
	 * @throws     PropelException
	 */
	public function getRealocacoesOrcamentariass($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRealocacoesOrcamentariass === null) {
			if ($this->isNew()) {
			   $this->collRealocacoesOrcamentariass = array();
			} else {

				$criteria->add(RealocacoesOrcamentariasPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(RealocacoesOrcamentariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(RealocacoesOrcamentariasPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(RealocacoesOrcamentariasPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				RealocacoesOrcamentariasPeer::addSelectColumns($criteria);
				$this->collRealocacoesOrcamentariass = RealocacoesOrcamentariasPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RealocacoesOrcamentariasPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);


				$criteria->add(RealocacoesOrcamentariasPeer::CD_FUNCAO, $this->cd_funcao);


				$criteria->add(RealocacoesOrcamentariasPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(RealocacoesOrcamentariasPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(RealocacoesOrcamentariasPeer::CD_PROGRAMA, $this->cd_programa);


				$criteria->add(RealocacoesOrcamentariasPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);


				$criteria->add(RealocacoesOrcamentariasPeer::CD_SUBFUNCAO, $this->cd_subfuncao);


				$criteria->add(RealocacoesOrcamentariasPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(RealocacoesOrcamentariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(RealocacoesOrcamentariasPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);


				$criteria->add(RealocacoesOrcamentariasPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				RealocacoesOrcamentariasPeer::addSelectColumns($criteria);
				if (!isset($this->lastRealocacoesOrcamentariasCriteria) || !$this->lastRealocacoesOrcamentariasCriteria->equals($criteria)) {
					$this->collRealocacoesOrcamentariass = RealocacoesOrcamentariasPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRealocacoesOrcamentariasCriteria = $criteria;
		return $this->collRealocacoesOrcamentariass;
	}

	/**
	 * Returns the number of related RealocacoesOrcamentarias objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RealocacoesOrcamentarias objects.
	 * @throws     PropelException
	 */
	public function countRealocacoesOrcamentariass(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRealocacoesOrcamentariass === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RealocacoesOrcamentariasPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(RealocacoesOrcamentariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(RealocacoesOrcamentariasPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(RealocacoesOrcamentariasPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				$count = RealocacoesOrcamentariasPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RealocacoesOrcamentariasPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);


				$criteria->add(RealocacoesOrcamentariasPeer::CD_FUNCAO, $this->cd_funcao);


				$criteria->add(RealocacoesOrcamentariasPeer::CD_MUNICIPIO, $this->cd_municipio);


				$criteria->add(RealocacoesOrcamentariasPeer::CD_ORGAO, $this->cd_orgao);


				$criteria->add(RealocacoesOrcamentariasPeer::CD_PROGRAMA, $this->cd_programa);


				$criteria->add(RealocacoesOrcamentariasPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);


				$criteria->add(RealocacoesOrcamentariasPeer::CD_SUBFUNCAO, $this->cd_subfuncao);


				$criteria->add(RealocacoesOrcamentariasPeer::CD_UNID_ORC, $this->cd_unid_orc);


				$criteria->add(RealocacoesOrcamentariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);


				$criteria->add(RealocacoesOrcamentariasPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);


				$criteria->add(RealocacoesOrcamentariasPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				if (!isset($this->lastRealocacoesOrcamentariasCriteria) || !$this->lastRealocacoesOrcamentariasCriteria->equals($criteria)) {
					$count = RealocacoesOrcamentariasPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRealocacoesOrcamentariass);
				}
			} else {
				$count = count($this->collRealocacoesOrcamentariass);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RealocacoesOrcamentarias object to this object
	 * through the RealocacoesOrcamentarias foreign key attribute.
	 *
	 * @param      RealocacoesOrcamentarias $l RealocacoesOrcamentarias
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRealocacoesOrcamentarias(RealocacoesOrcamentarias $l)
	{
		if ($this->collRealocacoesOrcamentariass === null) {
			$this->initRealocacoesOrcamentariass();
		}
		if (!in_array($l, $this->collRealocacoesOrcamentariass, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRealocacoesOrcamentariass, $l);
			$l->setCatEcoProjAtiv($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this CatEcoProjAtiv is new, it will return
	 * an empty collection; or if this CatEcoProjAtiv has previously
	 * been saved, it will retrieve related RealocacoesOrcamentariass from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in CatEcoProjAtiv.
	 */
	public function getRealocacoesOrcamentariassJoinOrcamentos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CatEcoProjAtivPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRealocacoesOrcamentariass === null) {
			if ($this->isNew()) {
				$this->collRealocacoesOrcamentariass = array();
			} else {

				$criteria->add(RealocacoesOrcamentariasPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_FUNCAO, $this->cd_funcao);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_MUNICIPIO, $this->cd_municipio);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_ORGAO, $this->cd_orgao);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_PROGRAMA, $this->cd_programa);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

				$criteria->add(RealocacoesOrcamentariasPeer::CD_UNID_ORC, $this->cd_unid_orc);

				$criteria->add(RealocacoesOrcamentariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

				$criteria->add(RealocacoesOrcamentariasPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

				$criteria->add(RealocacoesOrcamentariasPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

				$this->collRealocacoesOrcamentariass = RealocacoesOrcamentariasPeer::doSelectJoinOrcamentos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RealocacoesOrcamentariasPeer::CD_ELEMENTO_OD, $this->cd_elemento_od);

			$criteria->add(RealocacoesOrcamentariasPeer::CD_FUNCAO, $this->cd_funcao);

			$criteria->add(RealocacoesOrcamentariasPeer::CD_MUNICIPIO, $this->cd_municipio);

			$criteria->add(RealocacoesOrcamentariasPeer::CD_ORGAO, $this->cd_orgao);

			$criteria->add(RealocacoesOrcamentariasPeer::CD_PROGRAMA, $this->cd_programa);

			$criteria->add(RealocacoesOrcamentariasPeer::CD_PROJ_ATIV, $this->cd_proj_ativ);

			$criteria->add(RealocacoesOrcamentariasPeer::CD_SUBFUNCAO, $this->cd_subfuncao);

			$criteria->add(RealocacoesOrcamentariasPeer::CD_UNID_ORC, $this->cd_unid_orc);

			$criteria->add(RealocacoesOrcamentariasPeer::DT_VERSAO_ORC, $this->dt_versao_orc);

			$criteria->add(RealocacoesOrcamentariasPeer::NU_PROJ_ATIV, $this->nu_proj_ativ);

			$criteria->add(RealocacoesOrcamentariasPeer::NU_SUB_PROJ_ATIV, $this->nu_sub_proj_ativ);

			if (!isset($this->lastRealocacoesOrcamentariasCriteria) || !$this->lastRealocacoesOrcamentariasCriteria->equals($criteria)) {
				$this->collRealocacoesOrcamentariass = RealocacoesOrcamentariasPeer::doSelectJoinOrcamentos($criteria, $con, $join_behavior);
			}
		}
		$this->lastRealocacoesOrcamentariasCriteria = $criteria;

		return $this->collRealocacoesOrcamentariass;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collBalDespOrcs) {
				foreach ((array) $this->collBalDespOrcs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCreditosAdicionaiss) {
				foreach ((array) $this->collCreditosAdicionaiss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDestinoRealocOrcs) {
				foreach ((array) $this->collDestinoRealocOrcs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDotacoesLicitacoess) {
				foreach ((array) $this->collDotacoesLicitacoess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFontesAnulacaos) {
				foreach ((array) $this->collFontesAnulacaos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNotasEmpenhoss) {
				foreach ((array) $this->collNotasEmpenhoss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRealocacoesOrcamentariass) {
				foreach ((array) $this->collRealocacoesOrcamentariass as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collBalDespOrcs = null;
		$this->collCreditosAdicionaiss = null;
		$this->collDestinoRealocOrcs = null;
		$this->collDotacoesLicitacoess = null;
		$this->collFontesAnulacaos = null;
		$this->collNotasEmpenhoss = null;
		$this->collRealocacoesOrcamentariass = null;
			$this->aOrcDespProjAtiv = null;
			$this->aOrcDespCatEco = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseCatEcoProjAtiv:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseCatEcoProjAtiv::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseCatEcoProjAtiv
