<?php


/**
 * This class defines the structure of the 'CONTRATOS' table.
 *
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Thu Jul 15 18:22:42 2010
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class ContratosTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.ContratosTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('CONTRATOS');
		$this->setPhpName('Contratos');
		$this->setClassname('Contratos');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(false);
		// columns
		$this->addPrimaryKey('CD_MUNICIPIO', 'CdMunicipio', 'CHAR', true, 3, null);
		$this->addPrimaryKey('CD_CPF_GESTOR', 'CdCpfGestor', 'VARCHAR', true, 11, null);
		$this->addPrimaryKey('DT_CONTRATO', 'DtContrato', 'TIMESTAMP', true, 16, null);
		$this->addPrimaryKey('NU_CONTRATO', 'NuContrato', 'VARCHAR', true, 15, null);
		$this->addColumn('TP_CONTRATO', 'TpContrato', 'CHAR', false, 1, null);
		$this->addColumn('MD_CONTRATO', 'MdContrato', 'CHAR', false, 2, null);
		$this->addColumn('NU_CONTRATO_ORIGINAL', 'NuContratoOriginal', 'VARCHAR', false, 15, null);
		$this->addColumn('DT_CONTRATO_ORIGINAL', 'DtContratoOriginal', 'TIMESTAMP', false, 16, null);
		$this->addColumn('DT_INI_VIGENC_CONTRATO', 'DtIniVigencContrato', 'TIMESTAMP', false, 16, null);
		$this->addColumn('DT_FIM_VIGENC_CONTRATO', 'DtFimVigencContrato', 'TIMESTAMP', false, 16, null);
		$this->addColumn('DE_OBJETO_CONTRATO', 'DeObjetoContrato', 'VARCHAR', false, 255, null);
		$this->addColumn('VL_VALOR_TOT_CONTRATO', 'VlValorTotContrato', 'DECIMAL', false, 21, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('Contratados', 'Contratados', RelationMap::ONE_TO_MANY, array('cd_municipio' => 'cd_municipio', 'dt_contrato' => 'dt_contrato', 'nu_contrato' => 'nu_contrato', ), null, null);
    $this->addRelation('ContratosObras', 'ContratosObras', RelationMap::ONE_TO_MANY, array('cd_municipio' => 'cd_municipio', 'dt_contrato' => 'dt_contrato', 'nu_contrato' => 'nu_contrato', ), null, null);
    $this->addRelation('DadosEmpenhos', 'DadosEmpenhos', RelationMap::ONE_TO_MANY, array('cd_cpf_gestor' => 'cd_cpf_gestor', 'cd_municipio' => 'cd_municipio', 'dt_contrato' => 'dt_contrato', 'nu_contrato' => 'nu_contrato', ), null, null);
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // ContratosTableMap
