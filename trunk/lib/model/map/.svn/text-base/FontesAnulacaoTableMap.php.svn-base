<?php


/**
 * This class defines the structure of the 'FONTES_ANULACAO' table.
 *
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Thu Jul 15 18:22:54 2010
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class FontesAnulacaoTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.FontesAnulacaoTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('FONTES_ANULACAO');
		$this->setPhpName('FontesAnulacao');
		$this->setClassname('FontesAnulacao');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(false);
		// columns
		$this->addForeignPrimaryKey('CD_MUNICIPIO', 'CdMunicipio', 'CHAR' , 'CAT_ECO_PROJ_ATIV', 'CD_MUNICIPIO', true, 3, null);
		$this->addForeignPrimaryKey('DT_VERSAO_ORC', 'DtVersaoOrc', 'INTEGER' , 'CREDITOS_ADICIONAIS', 'DT_VERSAO_ORC', true, 4, null);
		$this->addForeignPrimaryKey('DT_VERSAO_ORC', 'DtVersaoOrc', 'INTEGER' , 'CAT_ECO_PROJ_ATIV', 'DT_VERSAO_ORC', true, 4, null);
		$this->addForeignPrimaryKey('DT_ABERT_CRED_CA', 'DtAbertCredCa', 'TIMESTAMP' , 'CREDITOS_ADICIONAIS', 'DT_ABERT_CRED_CA', true, 16, null);
		$this->addForeignPrimaryKey('NU_SEQ_NO_DIA_CA', 'NuSeqNoDiaCa', 'SMALLINT' , 'CREDITOS_ADICIONAIS', 'NU_SEQ_NO_DIA_CA', true, 2, null);
		$this->addForeignPrimaryKey('CD_ORGAO_ANUL_FA', 'CdOrgaoAnulFa', 'CHAR' , 'CAT_ECO_PROJ_ATIV', 'CD_ORGAO', true, 2, null);
		$this->addForeignPrimaryKey('CD_UNID_ORC_ANUL_FA', 'CdUnidOrcAnulFa', 'CHAR' , 'CAT_ECO_PROJ_ATIV', 'CD_UNID_ORC', true, 4, null);
		$this->addForeignPrimaryKey('CD_FUNCAO_ANUL_FA', 'CdFuncaoAnulFa', 'CHAR' , 'CAT_ECO_PROJ_ATIV', 'CD_FUNCAO', true, 2, null);
		$this->addForeignPrimaryKey('CD_SUBFUNCAO_ANUL_FA', 'CdSubfuncaoAnulFa', 'CHAR' , 'CAT_ECO_PROJ_ATIV', 'CD_SUBFUNCAO', true, 3, null);
		$this->addForeignPrimaryKey('CD_PROGRAMA_ANUL_FA', 'CdProgramaAnulFa', 'CHAR' , 'CAT_ECO_PROJ_ATIV', 'CD_PROGRAMA', true, 4, null);
		$this->addForeignPrimaryKey('CD_PROJ_ATIV_ANUL_FA', 'CdProjAtivAnulFa', 'CHAR' , 'CAT_ECO_PROJ_ATIV', 'CD_PROJ_ATIV', true, 1, null);
		$this->addForeignPrimaryKey('NU_PROJ_ATIV_ANUL_FA', 'NuProjAtivAnulFa', 'CHAR' , 'CAT_ECO_PROJ_ATIV', 'NU_PROJ_ATIV', true, 3, null);
		$this->addForeignPrimaryKey('NU_SUB_PROJ_ATIV_ANUL_FA', 'NuSubProjAtivAnulFa', 'CHAR' , 'CAT_ECO_PROJ_ATIV', 'NU_SUB_PROJ_ATIV', true, 4, null);
		$this->addForeignPrimaryKey('CD_ELEMENTO_OD_ANUL_FA', 'CdElementoOdAnulFa', 'CHAR' , 'CAT_ECO_PROJ_ATIV', 'CD_ELEMENTO_OD', true, 8, null);
		$this->addColumn('VL_FONTE_ANUL_FA', 'VlFonteAnulFa', 'DECIMAL', true, 21, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('CreditosAdicionais', 'CreditosAdicionais', RelationMap::MANY_TO_ONE, array('dt_abert_cred_ca' => 'dt_abert_cred_ca', 'dt_versao_orc' => 'dt_versao_orc', 'nu_seq_no_dia_ca' => 'nu_seq_no_dia_ca', ), null, null);
    $this->addRelation('CatEcoProjAtiv', 'CatEcoProjAtiv', RelationMap::MANY_TO_ONE, array('cd_elemento_od_anul_fa' => 'cd_elemento_od', 'cd_funcao_anul_fa' => 'cd_funcao', 'cd_municipio' => 'cd_municipio', 'cd_orgao_anul_fa' => 'cd_orgao', 'cd_programa_anul_fa' => 'cd_programa', 'cd_proj_ativ_anul_fa' => 'cd_proj_ativ', 'cd_subfuncao_anul_fa' => 'cd_subfuncao', 'cd_unid_orc_anul_fa' => 'cd_unid_orc', 'dt_versao_orc' => 'dt_versao_orc', 'nu_proj_ativ_anul_fa' => 'nu_proj_ativ', 'nu_sub_proj_ativ_anul_fa' => 'nu_sub_proj_ativ', ), null, null);
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // FontesAnulacaoTableMap
