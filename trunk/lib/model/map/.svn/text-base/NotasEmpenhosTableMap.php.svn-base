<?php


/**
 * This class defines the structure of the 'NOTAS_EMPENHOS' table.
 *
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Thu Jul 15 18:23:01 2010
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class NotasEmpenhosTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.NotasEmpenhosTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('NOTAS_EMPENHOS');
		$this->setPhpName('NotasEmpenhos');
		$this->setClassname('NotasEmpenhos');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(false);
		// columns
		$this->addForeignPrimaryKey('CD_MUNICIPIO', 'CdMunicipio', 'CHAR' , 'CAT_ECO_PROJ_ATIV', 'CD_MUNICIPIO', true, 3, null);
		$this->addForeignPrimaryKey('DT_VERSAO_ORC', 'DtVersaoOrc', 'INTEGER' , 'UNIDADES_ORCAMENTARIAS', 'DT_VERSAO_ORC', true, 4, null);
		$this->addForeignPrimaryKey('DT_VERSAO_ORC', 'DtVersaoOrc', 'INTEGER' , 'CAT_ECO_PROJ_ATIV', 'DT_VERSAO_ORC', true, 4, null);
		$this->addForeignPrimaryKey('CD_ORGAO', 'CdOrgao', 'CHAR' , 'UNIDADES_ORCAMENTARIAS', 'CD_ORGAO', true, 2, null);
		$this->addForeignPrimaryKey('CD_ORGAO', 'CdOrgao', 'CHAR' , 'CAT_ECO_PROJ_ATIV', 'CD_ORGAO', true, 2, null);
		$this->addForeignPrimaryKey('CD_UNID_ORC', 'CdUnidOrc', 'CHAR' , 'UNIDADES_ORCAMENTARIAS', 'CD_UNID_ORC', true, 4, null);
		$this->addForeignPrimaryKey('CD_UNID_ORC', 'CdUnidOrc', 'CHAR' , 'CAT_ECO_PROJ_ATIV', 'CD_UNID_ORC', true, 4, null);
		$this->addPrimaryKey('DT_EMISSAO_NE', 'DtEmissaoNe', 'TIMESTAMP', true, 16, null);
		$this->addPrimaryKey('NU_NOTA_EMPENHO', 'NuNotaEmpenho', 'VARCHAR', true, 8, null);
		$this->addColumn('DT_REF_NE', 'DtRefNe', 'INTEGER', true, 4, null);
		$this->addForeignKey('CD_FUNCAO', 'CdFuncao', 'CHAR', 'CAT_ECO_PROJ_ATIV', 'CD_FUNCAO', true, 2, null);
		$this->addForeignKey('CD_SUBFUNCAO', 'CdSubfuncao', 'CHAR', 'CAT_ECO_PROJ_ATIV', 'CD_SUBFUNCAO', true, 3, null);
		$this->addForeignKey('CD_PROGRAMA', 'CdPrograma', 'CHAR', 'CAT_ECO_PROJ_ATIV', 'CD_PROGRAMA', true, 4, null);
		$this->addForeignKey('CD_PROJ_ATIV', 'CdProjAtiv', 'CHAR', 'CAT_ECO_PROJ_ATIV', 'CD_PROJ_ATIV', true, 1, null);
		$this->addForeignKey('NU_PROJ_ATIV', 'NuProjAtiv', 'CHAR', 'CAT_ECO_PROJ_ATIV', 'NU_PROJ_ATIV', true, 3, null);
		$this->addForeignKey('NU_SUB_PROJ_ATIV', 'NuSubProjAtiv', 'CHAR', 'CAT_ECO_PROJ_ATIV', 'NU_SUB_PROJ_ATIV', true, 4, null);
		$this->addForeignKey('CD_ELEMENTO_OD', 'CdElementoOd', 'CHAR', 'CAT_ECO_PROJ_ATIV', 'CD_ELEMENTO_OD', true, 8, null);
		$this->addColumn('MD_NOTA_EMPENHO', 'MdNotaEmpenho', 'CHAR', true, 1, null);
		$this->addColumn('DE_HISTORICO_NE1', 'DeHistoricoNe1', 'VARCHAR', false, 255, null);
		$this->addColumn('DE_HISTORICO_NE2', 'DeHistoricoNe2', 'VARCHAR', false, 255, null);
		$this->addColumn('VL_ANT_SALDO_DOT_NE', 'VlAntSaldoDotNe', 'DECIMAL', false, 21, null);
		$this->addColumn('VL_EMPENHADO_NE', 'VlEmpenhadoNe', 'DECIMAL', false, 21, null);
		$this->addColumn('VL_ATUAL_SALDO_DOT_NE', 'VlAtualSaldoDotNe', 'DECIMAL', false, 21, null);
		$this->addColumn('TP_PROC_LICIT_NE', 'TpProcLicitNe', 'CHAR', false, 1, null);
		$this->addColumn('NU_DOC_NG', 'NuDocNg', 'VARCHAR', true, 25, null);
		$this->addColumn('ST_EMPENHO_NE', 'StEmpenhoNe', 'CHAR', true, 2, null);
		$this->addColumn('NU_NOTA_ANULACAO_NE', 'NuNotaAnulacaoNe', 'VARCHAR', false, 8, null);
		$this->addColumn('DT_EMISS_EMP_SUBST_NE', 'DtEmissEmpSubstNe', 'TIMESTAMP', false, 16, null);
		$this->addColumn('NU_EMP_SUBST_NE', 'NuEmpSubstNe', 'VARCHAR', false, 8, null);
		$this->addColumn('CD_TIPO_NG', 'CdTipoNg', 'CHAR', false, 1, '(\' \')');
		$this->addColumn('NM_NEGOCIANTE_NG', 'NmNegocianteNg', 'VARCHAR', false, 80, '(\' \')');
		$this->addColumn('DE_ENDERECO_NG', 'DeEnderecoNg', 'VARCHAR', false, 255, '(\' \')');
		$this->addColumn('NU_FONE_NG', 'NuFoneNg', 'VARCHAR', false, 11, '(\' \')');
		$this->addColumn('NU_CEP_NG', 'NuCepNg', 'CHAR', false, 8, '(\' \')');
		$this->addColumn('NM_MUNICIPIO_NG', 'NmMunicipioNg', 'VARCHAR', false, 40, '(\' \')');
		$this->addForeignKey('CD_UF_NF', 'CdUfNf', 'CHAR', 'UNIDADES_FEDERACAO', 'CD_SIGLA_UF', false, 2, '(\' \')');
		$this->addColumn('CD_CPF_GESTOR', 'CdCpfGestor', 'VARCHAR', false, 11, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('UnidadesFederacao', 'UnidadesFederacao', RelationMap::MANY_TO_ONE, array('cd_uf_nf' => 'cd_sigla_uf', ), null, null);
    $this->addRelation('UnidadesOrcamentarias', 'UnidadesOrcamentarias', RelationMap::MANY_TO_ONE, array('cd_orgao' => 'cd_orgao', 'cd_unid_orc' => 'cd_unid_orc', 'dt_versao_orc' => 'dt_versao_orc', ), null, null);
    $this->addRelation('CatEcoProjAtiv', 'CatEcoProjAtiv', RelationMap::MANY_TO_ONE, array('cd_elemento_od' => 'cd_elemento_od', 'cd_funcao' => 'cd_funcao', 'cd_municipio' => 'cd_municipio', 'cd_orgao' => 'cd_orgao', 'cd_programa' => 'cd_programa', 'cd_proj_ativ' => 'cd_proj_ativ', 'cd_subfuncao' => 'cd_subfuncao', 'cd_unid_orc' => 'cd_unid_orc', 'dt_versao_orc' => 'dt_versao_orc', 'nu_proj_ativ' => 'nu_proj_ativ', 'nu_sub_proj_ativ' => 'nu_sub_proj_ativ', ), null, null);
    $this->addRelation('NeCorrecao', 'NeCorrecao', RelationMap::ONE_TO_MANY, array('cd_orgao' => 'cd_orgao', 'cd_unid_orc' => 'cd_unid_orc', 'dt_emissao_ne' => 'dt_emissao_ne', 'dt_versao_orc' => 'dt_versao_orc', 'nu_nota_empenho' => 'nu_nota_empenho', ), null, null);
    $this->addRelation('AnulacoesEmpenhos', 'AnulacoesEmpenhos', RelationMap::ONE_TO_MANY, array('cd_orgao' => 'cd_orgao', 'cd_unid_orc' => 'cd_unid_orc', 'dt_emissao_ne' => 'dt_emissao_ne', 'dt_versao_orc' => 'dt_versao_orc', 'nu_nota_empenho' => 'nu_nota_empenho', ), null, null);
    $this->addRelation('DadosEmpenhos', 'DadosEmpenhos', RelationMap::ONE_TO_MANY, array('cd_orgao' => 'cd_orgao', 'cd_unid_orc' => 'cd_unid_orc', 'dt_emissao_ne' => 'dt_emissao_ne', 'dt_versao_orc' => 'dt_versao_orc', 'nu_nota_empenho' => 'nu_nota_empenho', ), null, null);
    $this->addRelation('EmpenhosBens', 'EmpenhosBens', RelationMap::ONE_TO_MANY, array('cd_municipio' => 'cd_municipio', 'cd_orgao' => 'cd_orgao', 'cd_unid_orc' => 'cd_unid_orc', 'dt_emissao_ne' => 'dt_emissao_ne', 'dt_versao_orc' => 'dt_versao_orc', 'nu_nota_empenho' => 'nu_nota_empenho', ), null, null);
    $this->addRelation('EmpenhosObras', 'EmpenhosObras', RelationMap::ONE_TO_MANY, array('cd_orgao' => 'cd_orgao', 'cd_unid_orc' => 'cd_unid_orc', 'dt_emissao_ne' => 'dt_emissao_ne', 'dt_versao_orc' => 'dt_versao_orc', 'nu_nota_empenho' => 'nu_nota_empenho', ), null, null);
    $this->addRelation('Liquidacoes', 'Liquidacoes', RelationMap::ONE_TO_MANY, array('cd_orgao' => 'cd_orgao', 'cd_unid_orc' => 'cd_unid_orc', 'dt_emissao_ne' => 'dt_emissao_ne', 'dt_versao_orc' => 'dt_versao_orc', 'nu_nota_empenho' => 'nu_nota_empenho', ), null, null);
    $this->addRelation('NotasFiscaisLiquid', 'NotasFiscaisLiquid', RelationMap::ONE_TO_MANY, array('cd_orgao' => 'cd_orgao', 'cd_unid_orc' => 'cd_unid_orc', 'dt_emissao_ne' => 'dt_emissao_ne', 'dt_versao_orc' => 'dt_versao_orc', 'nu_nota_empenho' => 'nu_nota_empenho', ), null, null);
    $this->addRelation('NotasPagamentos', 'NotasPagamentos', RelationMap::ONE_TO_MANY, array('cd_orgao' => 'cd_orgao', 'cd_unid_orc' => 'cd_unid_orc', 'dt_emissao_ne' => 'dt_emissao_ne', 'dt_versao_orc' => 'dt_versao_orc', 'nu_nota_empenho' => 'nu_nota_empenho', ), null, null);
    $this->addRelation('RecursosEmpenhos', 'RecursosEmpenhos', RelationMap::ONE_TO_MANY, array('cd_orgao' => 'cd_orgao', 'cd_unid_orc' => 'cd_unid_orc', 'dt_emissao_ne' => 'dt_emissao_ne', 'dt_versao_orc' => 'dt_versao_orc', 'nu_nota_empenho' => 'nu_nota_empenho', ), null, null);
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // NotasEmpenhosTableMap
