<?php


/**
 * This class defines the structure of the 'ORC_DESP_PROJ_ATIV' table.
 *
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Thu Jul 15 18:23:05 2010
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class OrcDespProjAtivTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.OrcDespProjAtivTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('ORC_DESP_PROJ_ATIV');
		$this->setPhpName('OrcDespProjAtiv');
		$this->setClassname('OrcDespProjAtiv');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(false);
		// columns
		$this->addForeignPrimaryKey('CD_MUNICIPIO', 'CdMunicipio', 'CHAR' , 'UNIDADES_ORCAMENTARIAS', 'CD_MUNICIPIO', true, 3, null);
		$this->addForeignPrimaryKey('CD_MUNICIPIO', 'CdMunicipio', 'CHAR' , 'PROGRAMAS', 'CD_MUNICIPIO', true, 3, null);
		$this->addForeignPrimaryKey('DT_VERSAO_ORC', 'DtVersaoOrc', 'INTEGER' , 'UNIDADES_ORCAMENTARIAS', 'DT_VERSAO_ORC', true, 4, null);
		$this->addForeignPrimaryKey('DT_VERSAO_ORC', 'DtVersaoOrc', 'INTEGER' , 'PROGRAMAS', 'DT_VERSAO_ORC', true, 4, null);
		$this->addForeignPrimaryKey('CD_ORGAO', 'CdOrgao', 'CHAR' , 'UNIDADES_ORCAMENTARIAS', 'CD_ORGAO', true, 2, null);
		$this->addForeignPrimaryKey('CD_UNID_ORC', 'CdUnidOrc', 'CHAR' , 'UNIDADES_ORCAMENTARIAS', 'CD_UNID_ORC', true, 4, null);
		$this->addPrimaryKey('CD_FUNCAO', 'CdFuncao', 'CHAR', true, 2, null);
		$this->addForeignPrimaryKey('CD_SUBFUNCAO', 'CdSubfuncao', 'CHAR' , 'SUBFUNCOES', 'CD_SUBFUNCAO', true, 3, null);
		$this->addForeignPrimaryKey('CD_PROGRAMA', 'CdPrograma', 'CHAR' , 'PROGRAMAS', 'CD_PROGRAMA', true, 4, null);
		$this->addPrimaryKey('CD_PROJ_ATIV', 'CdProjAtiv', 'CHAR', true, 1, null);
		$this->addPrimaryKey('NU_PROJ_ATIV', 'NuProjAtiv', 'CHAR', true, 3, null);
		$this->addPrimaryKey('NU_SUB_PROJ_ATIV', 'NuSubProjAtiv', 'CHAR', true, 4, null);
		$this->addForeignKey('CD_TIPO_ORCAMENTO', 'CdTipoOrcamento', 'CHAR', 'TIPOS_ORCAMENTOS', 'CD_TIPO_ORCAMENTO', true, 1, null);
		$this->addColumn('NM_PROJ_ATIV', 'NmProjAtiv', 'VARCHAR', false, 120, null);
		$this->addColumn('DE_PROJ_ATIV', 'DeProjAtiv', 'VARCHAR', false, 255, null);
		$this->addColumn('VL_TOT_FIX_PROJ_ATIV', 'VlTotFixProjAtiv', 'DECIMAL', false, 21, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('Subfuncoes', 'Subfuncoes', RelationMap::MANY_TO_ONE, array('cd_subfuncao' => 'cd_subfuncao', ), null, null);
    $this->addRelation('TiposOrcamentos', 'TiposOrcamentos', RelationMap::MANY_TO_ONE, array('cd_tipo_orcamento' => 'cd_tipo_orcamento', ), null, null);
    $this->addRelation('UnidadesOrcamentarias', 'UnidadesOrcamentarias', RelationMap::MANY_TO_ONE, array('cd_municipio' => 'cd_municipio', 'cd_orgao' => 'cd_orgao', 'cd_unid_orc' => 'cd_unid_orc', 'dt_versao_orc' => 'dt_versao_orc', ), null, null);
    $this->addRelation('Programas', 'Programas', RelationMap::MANY_TO_ONE, array('cd_municipio' => 'cd_municipio', 'cd_programa' => 'cd_programa', 'dt_versao_orc' => 'dt_versao_orc', ), null, null);
    $this->addRelation('CatEcoProjAtiv', 'CatEcoProjAtiv', RelationMap::ONE_TO_MANY, array('cd_municipio' => 'cd_municipio', 'cd_orgao' => 'cd_orgao', 'cd_programa' => 'cd_programa', 'cd_proj_ativ' => 'cd_proj_ativ', 'cd_subfuncao' => 'cd_subfuncao', 'cd_unid_orc' => 'cd_unid_orc', 'dt_versao_orc' => 'dt_versao_orc', 'nu_proj_ativ' => 'nu_proj_ativ', 'nu_sub_proj_ativ' => 'nu_sub_proj_ativ', ), null, null);
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // OrcDespProjAtivTableMap
