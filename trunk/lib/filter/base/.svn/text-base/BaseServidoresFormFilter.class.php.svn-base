<?php

/**
 * Servidores filter form base class.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage filter
 * @author     ##AUTHOR_NAME##
 */
abstract class BaseServidoresFormFilter extends BaseFormFilterPropel
{
  public function setup()
  {
    $this->setWidgets(array(
      'st_desligamento_se'    => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'agentes_publicos_list' => new sfWidgetFormPropelChoice(array('model' => 'TiposIngressos', 'add_empty' => true)),
    ));

    $this->setValidators(array(
      'st_desligamento_se'    => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'agentes_publicos_list' => new sfValidatorPropelChoice(array('model' => 'TiposIngressos', 'required' => false)),
    ));

    $this->widgetSchema->setNameFormat('servidores_filters[%s]');

    $this->errorSchema = new sfValidatorErrorSchema($this->validatorSchema);

    parent::setup();
  }

  public function addAgentesPublicosListColumnCriteria(Criteria $criteria, $field, $values)
  {
    if (!is_array($values))
    {
      $values = array($values);
    }

    if (!count($values))
    {
      return;
    }

    $criteria->addJoin(AgentesPublicosPeer::CD_MUNICIPIO, ServidoresPeer::CD_MUNICIPIO);

    $value = array_pop($values);
    $criterion = $criteria->getNewCriterion(AgentesPublicosPeer::CD_INGRESSO, $value);

    foreach ($values as $value)
    {
      $criterion->addOr($criteria->getNewCriterion(AgentesPublicosPeer::CD_INGRESSO, $value));
    }

    $criteria->add($criterion);
  }

  public function getModelName()
  {
    return 'Servidores';
  }

  public function getFields()
  {
    return array(
      'cd_municipio'          => 'ForeignKey',
      'dt_versao_orc'         => 'ForeignKey',
      'cd_orgao'              => 'ForeignKey',
      'cd_unid_orc'           => 'ForeignKey',
      'cd_cpf_serv_muni'      => 'Text',
      'st_desligamento_se'    => 'Boolean',
      'agentes_publicos_list' => 'ManyKey',
    );
  }
}
